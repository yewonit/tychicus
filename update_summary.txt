diff --git a/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue b/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue
--- a/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue
-          <div class="wc-h3 ma-3 mb-0 pa-0 pl-1">
+          <div class="wc-h3 ma-3 mb-0 pa-0 pl-1 d-flex align-center">
+            <v-chip
+              x-small
+              :color="getWeekTagColor(meeting.date)"
+              class="mr-2 week-tag"
+              v-if="meeting.date !== '날짜 미정'"
+            >
+              {{ getMonthWeekTag(meeting.date) }}
+            </v-chip>
+
+          // 최신순으로 정렬 (날짜 기준)
+          this.meetings.sort((a, b) => {
+            if (a.date === "날짜 미정") return 1;
+            if (b.date === "날짜 미정") return -1;
+            return new Date(b.date) - new Date(a.date);
+          });
+
+    getMonthWeekTag(dateString) {
+      if (dateString === "날짜 미정") return "";
+
+      const date = new Date(dateString);
+      if (isNaN(date.getTime())) return "";
+
+      const month = date.getMonth() + 1; // 0부터 시작하므로 1을 더함
+      const weekOfMonth = this.getWeekOfMonth(date);
+
+      return `${month}월 ${weekOfMonth}주차`;
+    },
+    getWeekOfMonth(date) {
+      const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
+      const dayOfWeek = firstDayOfMonth.getDay(); // 0: 일요일, 1: 월요일, ...
+
+      return Math.ceil((date.getDate() + dayOfWeek) / 7);
+    },
+    getWeekTagColor(dateString) {
+      if (dateString === "날짜 미정") return "grey";
+
+      const date = new Date(dateString);
+      if (isNaN(date.getTime())) return "grey";
+
+      const weekOfMonth = this.getWeekOfMonth(date);
+
+      // 주차별로 다른 색상 반환
+      const colors = [
+        "primary", // 1주차: 기본 색상(파란색)
+        "success", // 2주차: 초록색
+        "warning", // 3주차: 주황색
+        "error", // 4주차: 빨간색
+        "purple", // 5주차: 보라색
+      ];
+
+      return colors[(weekOfMonth - 1) % colors.length];
+    },
+  .week-tag {
+    font-size: 11px;
+    font-weight: bold;
+  }
+
diff --git a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
--- a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
+
+    <!-- 모임 정보 저장 로딩 인디케이터 다이얼로그 -->
+    <v-dialog v-model="loadingState.isLoading" persistent max-width="400px">
+      <v-card>
+        <v-card-title class="headline">모임 정보 저장 중...</v-card-title>
+
+        <v-card-text>
+          <!-- 단계별 진행 상태 표시 -->
+          <v-stepper v-model="loadingState.currentStep" vertical>
+            <v-stepper-step step="1" :complete="loadingState.currentStep > 1">
+              입력 정보 검증
+            </v-stepper-step>
+
+            <v-stepper-step step="2" :complete="loadingState.currentStep > 2">
+              이미지 업로드
+              <small v-if="loadingState.currentStep === 2">
+                {{ getFileUploadStatus() }}
+              </small>
+            </v-stepper-step>
+
+            <v-stepper-step step="3" :complete="loadingState.currentStep > 3">
+              참석자 정보 준비
+            </v-stepper-step>
+
+            <v-stepper-step step="4" :complete="loadingState.currentStep > 4">
+              모임 정보 저장
+            </v-stepper-step>
+
+            <v-stepper-step step="5"> 완료 </v-stepper-step>
+          </v-stepper>
+
+          <!-- 현재 진행 상태 및 예상 시간 -->
+          <div class="loading-status pa-4">
+            <v-progress-linear
+              :value="loadingState.progressPercent"
+              height="10"
+              striped
+              color="primary"
+            ></v-progress-linear>
+
+            <div class="mt-2 text-center">
+              <div class="current-action">
+                {{ loadingState.currentStepText }}
+              </div>
+
+              <div
+                v-if="loadingState.estimatedTimeLeft"
+                class="estimated-time grey--text"
+              >
+                예상 소요 시간: {{ loadingState.estimatedTimeLeft }}초
+              </div>
+
+              <div
+                v-if="loadingState.hasLongDelay"
+                class="delay-notice amber--text text--darken-2 mt-2"
+              >
+                <v-icon small color="amber darken-2"
+                  >mdi-clock-alert-outline</v-icon
+                >
+                평소보다 시간이 더 소요되고 있습니다. 잠시만 기다려주세요.
+              </div>
+            </div>
+          </div>
+        </v-card-text>
+
+        <v-card-actions v-if="loadingState.hasLongDelay">
+          <v-spacer></v-spacer>
+          <v-btn text color="error" @click="cancelOperation"> 취소 </v-btn>
+          <v-btn text color="primary" @click="continueWaiting">
+            계속 기다리기
+          </v-btn>
+        </v-card-actions>
+      </v-card>
+    </v-dialog>
+      // 로딩 상태 관리
+      loadingState: {
+        isLoading: false,
+        currentStep: 0,
+        totalSteps: 5,
+        currentStepText: "",
+        progressPercent: 0,
+        startTime: null,
+        estimatedTimeLeft: null,
+        hasLongDelay: false,
+      },
+
+        // 로딩 인디케이터 초기화 및 시작
+        this.initLoadingState();
+        this.updateLoadingState(1, "입력 정보 검증 중...", 10);
+
+          this.loadingState.isLoading = false;
+        // 이미지 업로드 단계로 진행
+        this.updateLoadingState(2, "이미지 업로드 준비 중...", 20);
+
+            this.updateLoadingState(2, "이미지 업로드 중...", 30);
+
+            // 파일 크기에 따른 예상 시간 계산
+            const fileSizeMB = this.photos.size / (1024 * 1024);
+            this.loadingState.estimatedTimeLeft = Math.round(fileSizeMB * 5); // 1MB당 약 5초 예상
+
+              this.updateLoadingState(2, "이미지 업로드 완료", 40);
+            this.isUploading = false;
+            this.loadingState.isLoading = false;
+        } else {
+          this.updateLoadingState(2, "이미지 없음, 다음 단계로 진행", 40);
+        // 참여자 정보 준비 단계로 진행
+        this.updateLoadingState(3, "참여자 정보 준비 중...", 60);
+
+        // 모임 정보 저장 단계로 진행
+        this.updateLoadingState(4, "모임 정보 저장 중...", 80);
+
+        // 완료 단계로 진행
+        this.updateLoadingState(5, "모임 정보 저장 완료", 100);
+
-        alert("모임 정보가 성공적으로 저장되었습니다.");
-        this.resetForm();
-        this.$router.push({ name: "ServiceSelectionView" });
+
+        // 지연 후 로딩 다이얼로그 종료
+        setTimeout(() => {
+          this.loadingState.isLoading = false;
+          alert("모임 정보가 성공적으로 저장되었습니다.");
+          this.resetForm();
+          this.$router.push({ name: "ServiceSelectionView" });
+        }, 1000);
+        this.loadingState.isLoading = false;
+
+    /**
+     * 로딩 상태 초기화 함수
+     */
+    initLoadingState() {
+      this.loadingState = {
+        isLoading: true,
+        currentStep: 0,
+        totalSteps: 5,
+        currentStepText: "준비 중...",
+        progressPercent: 0,
+        startTime: Date.now(),
+        estimatedTimeLeft: null,
+        hasLongDelay: false,
+      };
+    },
+
+    /**
+     * 로딩 상태 업데이트 함수
+     * @param {number} step - 현재 단계 (1~5)
+     * @param {string} text - 현재 단계 설명 텍스트
+     * @param {number} progress - 진행률 (0~100)
+     */
+    updateLoadingState(step, text, progress) {
+      this.loadingState.currentStep = step;
+      this.loadingState.currentStepText = text;
+      this.loadingState.progressPercent = progress;
+
+      // 단계 전환 시 진동 피드백 (모바일에서만 동작)
+      if (window.navigator && window.navigator.vibrate) {
+        window.navigator.vibrate(100);
+      }
+
+      // 장시간 소요 감지
+      const currentTime = Date.now();
+      const elapsedTime = (currentTime - this.loadingState.startTime) / 1000;
+
+      if (elapsedTime > 15 && !this.loadingState.hasLongDelay) {
+        this.loadingState.hasLongDelay = true;
+
+        // 지연 감지 시 더 강한 진동 (모바일에서만 동작)
+        if (window.navigator && window.navigator.vibrate) {
+          window.navigator.vibrate([100, 50, 200]);
+        }
+      }
+    },
+
+    /**
+     * 파일 업로드 상태 텍스트 반환 함수
+     * @returns {string} 업로드 상태 설명 텍스트
+     */
+    getFileUploadStatus() {
+      if (!this.photos) return "이미지 없음";
+
+      const fileSizeMB = (this.photos.size / (1024 * 1024)).toFixed(1);
+      return `${fileSizeMB}MB 이미지 업로드 중`;
+    },
+
+    /**
+     * 작업 취소 함수
+     */
+    cancelOperation() {
+      if (
+        confirm(
+          "정말 작업을 취소하시겠습니까?\n입력한 정보는 저장되지 않습니다."
+        )
+      ) {
+        this.loadingState.isLoading = false;
+        this.isSubmitting = false;
+        this.isUploading = false;
+      }
+    },
+
+    /**
+     * 계속 기다리기 함수
+     */
+    continueWaiting() {
+      this.loadingState.hasLongDelay = false;
+    },
+
+/* 로딩 상태 관련 스타일 */
+.loading-status {
+  background-color: rgba(245, 245, 245, 0.5);
+  border-radius: 8px;
+  margin-top: 16px;
+}
+
+.current-action {
+  font-weight: 500;
+  font-size: 1rem;
+  margin-bottom: 4px;
+}
+
+.estimated-time {
+  font-size: 0.85rem;
+}
+
+.delay-notice {
+  font-size: 0.9rem;
+  animation: pulse 2s infinite;
+  background-color: rgba(255, 193, 7, 0.1);
+  padding: 6px;
+  border-radius: 4px;
+}
+
+@keyframes pulse {
+  0% {
+    opacity: 0.6;
+  }
+  50% {
+    opacity: 1;
+  }
+  100% {
+    opacity: 0.6;
+  }
+}
+
+/* 스텝퍼 사용자 정의 스타일 */
+.v-stepper__step--active .v-stepper__step__step {
+  background-color: #7ea394 !important;
+}
+
+.v-stepper__step--complete .v-stepper__step__step {
+  background-color: #4caf50 !important;
+}
diff --git a/.firebase/hosting.ZGlzdA.cache b/.firebase/hosting.ZGlzdA.cache
--- a/.firebase/hosting.ZGlzdA.cache
+++ b/.firebase/hosting.ZGlzdA.cache
-version.json,1742713641609,fdf67638dfa05ac498431fe23e0cb30b38b50d609f095dcd980b97de2cee98c6
-manifest.json,1742713641604,22ee8de7454fe2a59e7d07b32da8b84cbcab6a105ffe6daf943bb86cebc4b49c
-service-worker.js.map,1742713641620,7bc69e007fdf86f162b31e67fec95aceff0105bc356a0d2bcaf883066de8ef5a
-robots.txt,1742713641609,c17e70846d7031bb27102edfb33b59d1e3e40a8e8e8097af75b7766e7fffc250
-service-worker.js,1742713641618,78997f6e8078d765f964d87c25ed93a9977af028c4115450edfcb335a377185b
-index.html,1742713641618,9dda66f28b93a5159763b7dddc7aa80c943387d54397751b7d17a7cdf53f1d04
-custom-service-worker.js,1742713641609,aac2a2f9f40392cd476af99917aad3b687161b0d67dd47e488e780c024dab622
-favicon.ico,1742713641609,7a1a72943a1b2d7ed41d75574715a454ac9bfb21b636100c59ccd713ca3e86e1
-workbox-14351bdd.js,1742713641619,328e01d6f2d81824d848cd6dfd602bd779c6e84b750f457b725500f5c682665a
-img/icons/safari-pinned-tab.svg,1742713641613,730d14831ff7235b452ff15b4d31888bc2a4b0259ed4461188c0927b0c525250
-img/icons/msapplication-icon-144x144.png,1742713641613,27b3b62de2e36ac452e86079762d3cfd37c33dc8cbde0a7c5657e5a7c32d971a
-img/icons/mstile-150x150.png,1742713641613,f3f1d499b7dcfd19aa6e3a9d5c6e16c1d610728b6892f4756352bade7581c196
-img/icons/favicon-32x32.png,1742713641613,f8834f79a7627bad1084de9b49915dd39a481895819b8f1242f6a57302818e65
-img/icons/favicon-16x16.png,1742713641613,49be9fd84d9ec224026dded41b18f9466f637c9be4a910f816e4b9cbba468682
-img/icons/apple-touch-icon.png,1742713641613,1b2b715b4793871476d9a21ca13df2326a38dd56c9eca517f5ecc1fcd47313bb
-img/icons/apple-touch-icon-76x76.png,1742713641612,65d6c498ad60f94b338df3f1f4551303ec84306ecb1c7e615ed64489fffc8b28
-img/icons/apple-touch-icon-60x60.png,1742713641612,10916e81b10f37cf95567fc91ccb0eb6e92c2cf1346aa4df04f384b06aff2151
-img/icons/apple-touch-icon-152x152.png,1742713641612,b311312e0c6003846dbd8dd07b21a1850f0592821b752eb679d0fad2676ed243
-img/icons/apple-touch-icon-180x180.png,1742713641612,9b4b43fbebb97c9ff395eb49dc34be815a9f0b70d46a00b0c605902ccf32aefa
-img/icons/apple-touch-icon-120x120.png,1742713641612,1fbd32003c38ff6eadeab867da5ff1e7f2bab8d51a49bc0606a1f018281a98b5
-img/icons/android-chrome-maskable-192x192.png,1742713641612,3d32e23ff67870b070c8b878159a13228ca153b6c198e45312c0778c6d626ac2
-img/icons/android-chrome-192x192.png,1742713641612,a1c1aac44befbb68115b2f6f57506995b6caf4337a45bde60ef701bec5a0a4f7
-icons/icon-72x72.png,1742713641612,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-icons/icon-96x96.png,1742713641611,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
-icons/icon-152x152.png,1742713641610,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
-icons/icon-128x128.png,1742713641610,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
-icons/icon-144x144.png,1742713641610,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/favicon-32x32.png,1742713641610,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
-icons/favicon-16x16.png,1742713641610,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
-icons/AppIcons/android/mipmap-xxhdpi/ic_launcher.png,1742713641620,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/AppIcons/android/mipmap-xhdpi/ic_launcher.png,1742713641619,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
-img/intro.3fb2076a.png,1742713641607,f28d709c01ce69bfd1101b876b6a5ccabf8d7044a5e690c2a01397bca03e37cc
-img/icons/android-chrome-maskable-512x512.png,1742713641612,39b440f18b280d6f2c4ed960e00e2a9ef71bb163fadb114636f2b6d56a684fcd
-img/icons/android-chrome-512x512.png,1742713641612,b0b7d48a6cce8b3af50114fb56b94081434dfc1f57d9109027759d4b11f553d1
-icons/icon-192x192.png,1742713641610,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
-icons/icon-180x180.png,1742713641610,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
-icons/icon-167x167.png,1742713641610,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
-icons/icon-384x384.png,1742713641611,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
-icons/AppIcons/android/mipmap-xxxhdpi/ic_launcher.png,1742713641618,6eef9522a8fc62711ba09ca7df038b53b34ae89b6d62fedbdee2382f19a63361
-icons/AppIcons/android/mipmap-mdpi/ic_launcher.png,1742713641618,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/Contents.json,1742713641617,362544adc9abbc072e932a66cdd36fb66f89f0751e9953a465fde292dd8bf78d
-icons/AppIcons/android/mipmap-hdpi/ic_launcher.png,1742713641620,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/92.png,1742713641617,5fb30fd614b6966b7511e70c8eff9847be494d0c47809e2ff39b61ab4a62261d
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/88.png,1742713641617,f5ff7e5f4ae4833a76c2d60c85b98d65b5866c307a95f79c7e758a320afebb49
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/87.png,1742713641617,114a78af463a802f07c487ec04a77cc72cb24471a791f17f6f5cbdc409cd2e16
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/80.png,1742713641617,c18a161ca302d9fa25c6e51eb5086c2794df20a8ece066ebdf63ac50cc336f4e
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/76.png,1742713641616,7fbc388a2b89ad4d588eef816b42ab08a4342d4084f1d0f25c8d1d4599cfc2af
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/72.png,1742713641616,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/66.png,1742713641616,669c5c3d9107922c46ec2a5c521409139b217fcbf1a5f3ffbbd2d37d0fb0c8be
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/64.png,1742713641616,fa3cb4dc5bcfee3e9f2a62f4f1120f620db83656d7febd23f9e310dd5ec9e50a
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/60.png,1742713641616,285f2cd6793a05db820bed6fe0274b6c79b04716a57938f34f74248e0ec174ed
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/58.png,1742713641615,1838c9e4ab0196226253283b3cd3b1939d8d487d6ebc2261b1d70f00de033952
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/57.png,1742713641615,fe269dc44c92a2ea8b2eae6f6b374ecbd9e018f358b0d1bc4f4c6d171f22bd31
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/55.png,1742713641615,5dca7679805c5a99dd78f55d9e4564787bef7a73853dd04b26b1da700aec2c78
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/50.png,1742713641615,671c3ef098c01c79da69f6157cfbd3209c90d7fa6353d134f3c4b175450f5b36
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/48.png,1742713641615,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/40.png,1742713641615,727716cb4a213fe7eb7dbceae439de6171984436e528f93f25d43922a3fb4d74
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/32.png,1742713641615,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/29.png,1742713641615,19c91fd2ec9fee3ca27ee746bf3cb1415c3bd5e7fc58050d5d3367acbcf8110b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/20.png,1742713641615,881068aecdb5edff1dc811b94431339172ea9df83470ee26b95b63569c8f55b3
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/16.png,1742713641614,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/152.png,1742713641614,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/258.png,1742713641615,73121b333e5167762f69d7237e1fca45d09dc970a133b82f18b4f5319e8d8750
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/144.png,1742713641614,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/128.png,1742713641614,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/256.png,1742713641615,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/234.png,1742713641615,b319598a34683bfa303efc9fde15e0b85039f62b181a9740da8b1ac1ed7a455b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/120.png,1742713641613,805fd7fb45f3ef018b22d60ebc4a82a83eaa1ced066a078a80fd3884bbfaa34b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/114.png,1742713641614,5bb5dea1793efb6c336b918b96307dade54d93b29e79966425013fd8b424de3e
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/216.png,1742713641615,cd8eafd93a015dff200946c8abc8a415e547debd55acbf4a9f2664fa5cbd0c73
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/108.png,1742713641614,291d2cc48cdce03737c4743b33677a11bbc26ea455faf11dd0680eccb5fa0a93
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/196.png,1742713641615,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/180.png,1742713641614,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/172.png,1742713641614,dc5201d988ed907e53a2661f51e24d1c245391684bf8c46cb27e5f392f7bf020
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/167.png,1742713641614,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
-icons/AppIcons/playstore.png,1742713641611,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-icons/icon-512x512.png,1742713641611,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/102.png,1742713641613,743eff5509b211feea412bb4648a4107612b0d44723587b3650374fd08f3beb9
-workbox-14351bdd.js.map,1742713641619,3d17c80e55873408853a8ec06d9a49b899bf214cd177f709924919092b1d62b5
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/100.png,1742713641613,912fc9c7eb847eb228f43b53be007fda948e13c818fae49f77557fa8fc9d2a87
-fonts/NotoSansKR-Regular.fa699eee.woff2,1742713641606,3e0d6c75893a1e3eb71a836eaac1ee22f2e8d9e1e6d975e2e6aecdebe1fa69ec
-fonts/NotoSansKR-Regular.16c9adda.eot,1742713641607,1eed3ade4776b114edc1e65fbcd1ecf3ff8b3d7683f82be5792dca515d9b9fc2
-fonts/NotoSansKR-Medium.c67b45b3.eot,1742713641606,044b0b2e2c560b3e192387a24919069b30080351db06c2c682326435ed9fb3f8
-fonts/NotoSansKR-Medium.4278862d.woff2,1742713641607,379528e3ab8f3a1a95ee5a0f0704abd215bee606edb9b55cc73d039c9152220e
-fonts/NotoSansKR-Bold.74d81029.woff2,1742713641607,8678d504518d952238b8ad29079e275ca70c84bc657c4e838479cc615bca9ddc
-fonts/NotoSansKR-Bold.16338ec6.eot,1742713641606,fe1d47ef3911839504742c8d64bf3600cbd916dccf99c75aef7d57006f58ec71
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/512.png,1742713641615,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-css/app.de2f5e34.css,1742713641607,3bc1e5989235dcc2245523d92b9346a6ddabbf50afdb8d2d808020d5835a7bd0
-icons/AppIcons/appstore.png,1742713641611,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
-js/app.1c111875.js,1742713641607,b41377def83bdd3939bb00146448a953edcf48cf03d0b7106b91ed827bae55c5
-img/basic_image.20adb660.png,1742713641606,7cc34db9539ce287ffacb458283f16bf004543649f8a6054692a704425de5858
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/1024.png,1742713641614,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
-css/chunk-vendors.e37a8ad1.css,1742713641609,86059739ab8eb7eed6f9d5f2f540f7ab03aacd94d5eb6a732b53a7cc072823d4
-js/295.34810280.js,1742713641606,7ddc7c8716b6b67c0e4c4e7e45146acc0b95068fea2fcaa78b8ed87a44a749ac
-js/app.1c111875.js.map,1742713641618,0a7fb50a8873e5d54e2d625ded0d4951640b5115e5d7dbec04a969e8946b5e19
-js/chunk-vendors.927485b7.js,1742713641610,490f90bfc86cedb74772b09aa391582a8a40bbb800dd93a6876cc8644465fc70
-js/295.34810280.js.map,1742713641618,c3c782da84e668634b8734d0c6f7febdf2e1c89755891297692d1db99cc29113
-fonts/NotoSansKR-Regular.cc1eb30f.otf,1742713641608,966de43c27bcf429bb0e7d51ec7d3370a6866142ddc7fe19e27d12e281be27c4
-fonts/NotoSansKR-Medium.9b254b95.otf,1742713641605,241896ddfb621581c7955d58e65dc19b591da93472727e22b2af8311176d8374
-fonts/NotoSansKR-Bold.d5ea8c02.otf,1742713641606,d24024f39e5917f95ad662794a0ac50bb46ccd83e80a142cec5ae0b2fbf1a295
-js/chunk-vendors.927485b7.js.map,1742713641619,4d98938342f01ab2fa4d034d7d0811086ec91632b0cfdfe07d7f7eb14f269a45
+manifest.json,1742716277339,22ee8de7454fe2a59e7d07b32da8b84cbcab6a105ffe6daf943bb86cebc4b49c
+service-worker.js.map,1742716277357,21122ba2efffd2cbb1527d810a6956b89a5e216bc0043b622b44cf76cfd24836
+version.json,1742716277344,fdf67638dfa05ac498431fe23e0cb30b38b50d609f095dcd980b97de2cee98c6
+robots.txt,1742716277344,c17e70846d7031bb27102edfb33b59d1e3e40a8e8e8097af75b7766e7fffc250
+service-worker.js,1742716277357,95e2c5f063f47fd498ef58273e5bc197458177a8d4f06e9827095605b9a59e3c
+index.html,1742716277355,d24888baffbc81fd0c0d76a24b3bbab5ce2a54a654ce8bc5ba966e5bf40cd1e1
+custom-service-worker.js,1742716277344,aac2a2f9f40392cd476af99917aad3b687161b0d67dd47e488e780c024dab622
+favicon.ico,1742716277344,7a1a72943a1b2d7ed41d75574715a454ac9bfb21b636100c59ccd713ca3e86e1
+workbox-14351bdd.js,1742716277357,328e01d6f2d81824d848cd6dfd602bd779c6e84b750f457b725500f5c682665a
+img/icons/mstile-150x150.png,1742716277348,f3f1d499b7dcfd19aa6e3a9d5c6e16c1d610728b6892f4756352bade7581c196
+img/icons/safari-pinned-tab.svg,1742716277347,730d14831ff7235b452ff15b4d31888bc2a4b0259ed4461188c0927b0c525250
+img/icons/favicon-32x32.png,1742716277347,f8834f79a7627bad1084de9b49915dd39a481895819b8f1242f6a57302818e65
+img/icons/msapplication-icon-144x144.png,1742716277347,27b3b62de2e36ac452e86079762d3cfd37c33dc8cbde0a7c5657e5a7c32d971a
+img/icons/favicon-16x16.png,1742716277347,49be9fd84d9ec224026dded41b18f9466f637c9be4a910f816e4b9cbba468682
+img/icons/apple-touch-icon-76x76.png,1742716277347,65d6c498ad60f94b338df3f1f4551303ec84306ecb1c7e615ed64489fffc8b28
+img/icons/apple-touch-icon.png,1742716277347,1b2b715b4793871476d9a21ca13df2326a38dd56c9eca517f5ecc1fcd47313bb
+img/icons/apple-touch-icon-60x60.png,1742716277347,10916e81b10f37cf95567fc91ccb0eb6e92c2cf1346aa4df04f384b06aff2151
+img/icons/apple-touch-icon-180x180.png,1742716277346,9b4b43fbebb97c9ff395eb49dc34be815a9f0b70d46a00b0c605902ccf32aefa
+img/icons/apple-touch-icon-120x120.png,1742716277346,1fbd32003c38ff6eadeab867da5ff1e7f2bab8d51a49bc0606a1f018281a98b5
+img/icons/apple-touch-icon-152x152.png,1742716277346,b311312e0c6003846dbd8dd07b21a1850f0592821b752eb679d0fad2676ed243
+img/icons/android-chrome-maskable-192x192.png,1742716277347,3d32e23ff67870b070c8b878159a13228ca153b6c198e45312c0778c6d626ac2
+img/icons/android-chrome-192x192.png,1742716277346,a1c1aac44befbb68115b2f6f57506995b6caf4337a45bde60ef701bec5a0a4f7
+icons/icon-96x96.png,1742716277346,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
+icons/icon-72x72.png,1742716277346,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+icons/icon-152x152.png,1742716277345,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
+icons/favicon-32x32.png,1742716277345,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
+icons/icon-144x144.png,1742716277345,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/favicon-16x16.png,1742716277345,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
+icons/icon-128x128.png,1742716277345,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
+icons/AppIcons/android/mipmap-xhdpi/ic_launcher.png,1742716277355,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
+icons/AppIcons/android/mipmap-xxhdpi/ic_launcher.png,1742716277355,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+img/intro.3fb2076a.png,1742716277342,f28d709c01ce69bfd1101b876b6a5ccabf8d7044a5e690c2a01397bca03e37cc
+img/icons/android-chrome-maskable-512x512.png,1742716277346,39b440f18b280d6f2c4ed960e00e2a9ef71bb163fadb114636f2b6d56a684fcd
+img/icons/android-chrome-512x512.png,1742716277346,b0b7d48a6cce8b3af50114fb56b94081434dfc1f57d9109027759d4b11f553d1
+icons/icon-384x384.png,1742716277346,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
+icons/icon-167x167.png,1742716277345,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
+icons/icon-192x192.png,1742716277345,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
+icons/icon-180x180.png,1742716277345,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
+icons/AppIcons/android/mipmap-xxxhdpi/ic_launcher.png,1742716277355,6eef9522a8fc62711ba09ca7df038b53b34ae89b6d62fedbdee2382f19a63361
+icons/AppIcons/android/mipmap-mdpi/ic_launcher.png,1742716277348,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
+icons/AppIcons/android/mipmap-hdpi/ic_launcher.png,1742716277352,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/Contents.json,1742716277355,362544adc9abbc072e932a66cdd36fb66f89f0751e9953a465fde292dd8bf78d
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/88.png,1742716277354,f5ff7e5f4ae4833a76c2d60c85b98d65b5866c307a95f79c7e758a320afebb49
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/92.png,1742716277355,5fb30fd614b6966b7511e70c8eff9847be494d0c47809e2ff39b61ab4a62261d
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/80.png,1742716277354,c18a161ca302d9fa25c6e51eb5086c2794df20a8ece066ebdf63ac50cc336f4e
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/87.png,1742716277354,114a78af463a802f07c487ec04a77cc72cb24471a791f17f6f5cbdc409cd2e16
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/76.png,1742716277354,7fbc388a2b89ad4d588eef816b42ab08a4342d4084f1d0f25c8d1d4599cfc2af
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/72.png,1742716277354,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/66.png,1742716277354,669c5c3d9107922c46ec2a5c521409139b217fcbf1a5f3ffbbd2d37d0fb0c8be
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/64.png,1742716277354,fa3cb4dc5bcfee3e9f2a62f4f1120f620db83656d7febd23f9e310dd5ec9e50a
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/60.png,1742716277354,285f2cd6793a05db820bed6fe0274b6c79b04716a57938f34f74248e0ec174ed
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/58.png,1742716277354,1838c9e4ab0196226253283b3cd3b1939d8d487d6ebc2261b1d70f00de033952
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/57.png,1742716277353,fe269dc44c92a2ea8b2eae6f6b374ecbd9e018f358b0d1bc4f4c6d171f22bd31
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/55.png,1742716277353,5dca7679805c5a99dd78f55d9e4564787bef7a73853dd04b26b1da700aec2c78
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/50.png,1742716277353,671c3ef098c01c79da69f6157cfbd3209c90d7fa6353d134f3c4b175450f5b36
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/48.png,1742716277353,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/40.png,1742716277353,727716cb4a213fe7eb7dbceae439de6171984436e528f93f25d43922a3fb4d74
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/32.png,1742716277353,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/29.png,1742716277353,19c91fd2ec9fee3ca27ee746bf3cb1415c3bd5e7fc58050d5d3367acbcf8110b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/20.png,1742716277353,881068aecdb5edff1dc811b94431339172ea9df83470ee26b95b63569c8f55b3
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/16.png,1742716277348,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/152.png,1742716277348,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/258.png,1742716277353,73121b333e5167762f69d7237e1fca45d09dc970a133b82f18b4f5319e8d8750
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/144.png,1742716277348,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/256.png,1742716277353,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/234.png,1742716277353,b319598a34683bfa303efc9fde15e0b85039f62b181a9740da8b1ac1ed7a455b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/128.png,1742716277352,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/114.png,1742716277348,5bb5dea1793efb6c336b918b96307dade54d93b29e79966425013fd8b424de3e
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/120.png,1742716277348,805fd7fb45f3ef018b22d60ebc4a82a83eaa1ced066a078a80fd3884bbfaa34b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/108.png,1742716277352,291d2cc48cdce03737c4743b33677a11bbc26ea455faf11dd0680eccb5fa0a93
+icons/icon-512x512.png,1742716277346,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/216.png,1742716277353,cd8eafd93a015dff200946c8abc8a415e547debd55acbf4a9f2664fa5cbd0c73
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/196.png,1742716277353,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/180.png,1742716277352,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/102.png,1742716277352,743eff5509b211feea412bb4648a4107612b0d44723587b3650374fd08f3beb9
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/172.png,1742716277352,dc5201d988ed907e53a2661f51e24d1c245391684bf8c46cb27e5f392f7bf020
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/167.png,1742716277352,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
+icons/AppIcons/playstore.png,1742716277346,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/100.png,1742716277348,912fc9c7eb847eb228f43b53be007fda948e13c818fae49f77557fa8fc9d2a87
+fonts/NotoSansKR-Regular.fa699eee.woff2,1742716277341,3e0d6c75893a1e3eb71a836eaac1ee22f2e8d9e1e6d975e2e6aecdebe1fa69ec
+fonts/NotoSansKR-Regular.16c9adda.eot,1742716277341,1eed3ade4776b114edc1e65fbcd1ecf3ff8b3d7683f82be5792dca515d9b9fc2
+fonts/NotoSansKR-Medium.c67b45b3.eot,1742716277341,044b0b2e2c560b3e192387a24919069b30080351db06c2c682326435ed9fb3f8
+fonts/NotoSansKR-Medium.4278862d.woff2,1742716277343,379528e3ab8f3a1a95ee5a0f0704abd215bee606edb9b55cc73d039c9152220e
+fonts/NotoSansKR-Bold.74d81029.woff2,1742716277342,8678d504518d952238b8ad29079e275ca70c84bc657c4e838479cc615bca9ddc
+fonts/NotoSansKR-Bold.16338ec6.eot,1742716277343,fe1d47ef3911839504742c8d64bf3600cbd916dccf99c75aef7d57006f58ec71
+workbox-14351bdd.js.map,1742716277356,3d17c80e55873408853a8ec06d9a49b899bf214cd177f709924919092b1d62b5
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/512.png,1742716277353,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+css/app.e9a2a2a8.css,1742716277342,b4bd37a4afb0c46c9eb926e9f2d6d4bb655921027668cd144f6d8d3408b32199
+icons/AppIcons/appstore.png,1742716277346,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
+js/app.2d9b67d3.js,1742716277341,d2b65bb51552f782b611bba23497dff11273176b66888a5be755a1adb66fa646
+img/basic_image.20adb660.png,1742716277342,7cc34db9539ce287ffacb458283f16bf004543649f8a6054692a704425de5858
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/1024.png,1742716277348,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
+css/chunk-vendors.e37a8ad1.css,1742716277343,86059739ab8eb7eed6f9d5f2f540f7ab03aacd94d5eb6a732b53a7cc072823d4
+js/295.34810280.js,1742716277342,7ddc7c8716b6b67c0e4c4e7e45146acc0b95068fea2fcaa78b8ed87a44a749ac
+js/app.2d9b67d3.js.map,1742716277355,c09de74de9a082636a6be348bea7655a53f66440790d64b2d49aa68a84b04ffa
+js/chunk-vendors.927485b7.js,1742716277345,490f90bfc86cedb74772b09aa391582a8a40bbb800dd93a6876cc8644465fc70
+js/295.34810280.js.map,1742716277356,c3c782da84e668634b8734d0c6f7febdf2e1c89755891297692d1db99cc29113
+fonts/NotoSansKR-Medium.9b254b95.otf,1742716277341,241896ddfb621581c7955d58e65dc19b591da93472727e22b2af8311176d8374
+fonts/NotoSansKR-Regular.cc1eb30f.otf,1742716277342,966de43c27bcf429bb0e7d51ec7d3370a6866142ddc7fe19e27d12e281be27c4
+fonts/NotoSansKR-Bold.d5ea8c02.otf,1742716277343,d24024f39e5917f95ad662794a0ac50bb46ccd83e80a142cec5ae0b2fbf1a295
+js/chunk-vendors.927485b7.js.map,1742716277357,4d98938342f01ab2fa4d034d7d0811086ec91632b0cfdfe07d7f7eb14f269a45
diff --git a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
--- a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
-            @input="updateDates"
+            @input="onDateSelected"
+        <!-- 권장 요일 안내 표시 -->
+        <div
+          v-if="selectedActivity && getRecommendedDayOfWeek()"
+          class="recommended-day-text mb-4"
+        >
+          <v-icon small color="info" class="mr-1">mdi-information</v-icon>
+          <span
+            >{{ getActivityName() }}은(는) {{ getRecommendedDayOfWeekText() }}에
+            진행되는 모임입니다.</span
+          >
+        </div>
+
+
+    <!-- 잘못된 요일 선택 경고 대화상자 -->
+    <v-dialog v-model="dayOfWeekWarningDialog" max-width="400">
+      <v-card>
+        <v-card-title class="headline">잘못된 요일 선택</v-card-title>
+        <v-card-text>
+          {{ selectedActivityName }}은(는) {{ recommendedDayOfWeekText }}에
+          진행되는 모임입니다. <br /><br />
+          선택한 날짜 {{ selectedDate }}는 {{ selectedDayOfWeekText }}입니다.
+          <br /><br />
+          권장되는 모임 날짜({{ recommendedDate }})로 변경하시겠습니까?
+        </v-card-text>
+        <v-card-actions>
+          <v-spacer></v-spacer>
+          <v-btn text color="error" @click="keepSelectedDate"
+            >아니오, 유지합니다</v-btn
+          >
+          <v-btn text color="primary" @click="changeDateToRecommended"
+            >예, 변경합니다</v-btn
+          >
+        </v-card-actions>
+      </v-card>
+    </v-dialog>
+          dayOfWeek: 0, // 일요일
+          dayOfWeek: 0, // 일요일
+          dayOfWeek: 0, // 일요일
+          dayOfWeek: 3, // 수요일
+          dayOfWeek: 5, // 금요일
+          dayOfWeek: 3, // 수요일
+          dayOfWeek: 5, // 금요일
+      // 요일 경고 대화상자 관련 상태
+      dayOfWeekWarningDialog: false,
+      selectedActivityName: "",
+      recommendedDayOfWeekText: "",
+      selectedDayOfWeekText: "",
+      recommendedDate: "",
+      selectedDate: "",
+      // 요일 표시 텍스트 매핑
+      dayOfWeekTexts: [
+        "일요일",
+        "월요일",
+        "화요일",
+        "수요일",
+        "목요일",
+        "금요일",
+        "토요일",
+      ],
+      // 날짜 검증
+      if (!this.validateSelectedDate()) {
+        // 경고 대화상자가 표시되므로 여기서 함수 종료
+        return;
+      }
+
+
+      // 날짜 선택 시 요일 검증
+      this.validateSelectedDate();
+
-     * 선택된 모임 유형에 따라 모임 이름을 설정하는 함수
+     * 주어진 요일에 해당하는 가장 최근 과거 날짜를 반환하는 함수
+     * @param {number} dayOfWeek - 요일 (0: 일요일, 1: 월요일, ... 6: 토요일)
+     * @returns {string} YYYY-MM-DD 형식의 날짜 문자열
+     */
+    getNearestPastDate(dayOfWeek) {
+      const today = moment();
+      const todayDayOfWeek = today.day(); // 현재 요일 (0-6)
+
+      let daysToSubtract;
+
+      if (todayDayOfWeek === dayOfWeek) {
+        // 오늘이 해당 요일이면 오늘 날짜 반환
+        daysToSubtract = 0;
+      } else if (todayDayOfWeek > dayOfWeek) {
+        // 찾는 요일이 현재 요일보다 앞에 있으면 (예: 오늘이 수요일이고 일요일을 찾는 경우)
+        daysToSubtract = todayDayOfWeek - dayOfWeek;
+      } else {
+        // 찾는 요일이 현재 요일보다 뒤에 있으면 (예: 오늘이 화요일이고 금요일을 찾는 경우)
+        // 이 경우 지난 주의 해당 요일을 계산
+        daysToSubtract = 7 - (dayOfWeek - todayDayOfWeek);
+      }
+
+      // 지정된 일수만큼 오늘 날짜에서 빼기
+      const targetDate = moment().subtract(daysToSubtract, "days");
+      return targetDate.format("YYYY-MM-DD");
+    },
+
+    /**
+     * 선택된 모임 유형에 따라 모임 이름과 날짜를 설정하는 함수
-
-        // 날짜 업데이트 - 자정을 넘어가는 모임인 경우 처리
-        if (
-          dateTimeUtils.isOvernightMeeting(defaults.startTime, defaults.endTime)
-        ) {
-          // 자정을 넘기는 모임인 경우 종료일은 다음날로 설정
-          this.meetingEndDate = moment(this.meetingDate)
-            .add(1, "day")
-            .format("YYYY-MM-DD");
-        } else {
-          // 자정을 넘기지 않는 모임인 경우 종료일 = 시작일
-          this.meetingEndDate = this.meetingDate;
-        }
-
+        // 요일 정보가 있으면 해당 요일의 가장 최근 과거 날짜로 설정
+        if (defaults.dayOfWeek !== undefined) {
+          this.meetingDate = this.getNearestPastDate(defaults.dayOfWeek);
+          this.meetingStartDate = this.meetingDate;
+
+          // 자정을 넘기는 모임인지 확인
+          if (
+            dateTimeUtils.isOvernightMeeting(
+              defaults.startTime,
+              defaults.endTime
+            )
+          ) {
+            // 자정을 넘기는 모임인 경우 종료일은 다음날로 설정
+            this.meetingEndDate = moment(this.meetingDate)
+              .add(1, "day")
+              .format("YYYY-MM-DD");
+          } else {
+            // 자정을 넘기지 않는 모임인 경우 종료일 = 시작일
+            this.meetingEndDate = this.meetingDate;
+          }
+        }
+
+
+    /**
+     * 날짜의 요일이 활동의 권장 요일과 일치하는지 검증하는 함수
+     * @returns {boolean} 요일이 일치하면 true, 일치하지 않으면 false
+     */
+    validateSelectedDate() {
+      if (!this.selectedActivity) return true;
+
+      const activity = this.activities.find(
+        (a) => a.id === this.selectedActivity
+      );
+      if (!activity || !this.activityDefaults[activity.name]) return true;
+
+      const defaults = this.activityDefaults[activity.name];
+      if (defaults.dayOfWeek === undefined) return true;
+
+      const selectedDate = moment(this.meetingDate);
+      const dayOfWeek = selectedDate.day();
+
+      if (dayOfWeek !== defaults.dayOfWeek) {
+        // 불일치 - 경고 대화상자 정보 설정
+        this.selectedActivityName = activity.name;
+        this.recommendedDayOfWeekText = this.dayOfWeekTexts[defaults.dayOfWeek];
+        this.selectedDayOfWeekText = this.dayOfWeekTexts[dayOfWeek];
+        this.selectedDate = this.meetingDate;
+        this.recommendedDate = this.getNearestPastDate(defaults.dayOfWeek);
+
+        // 다이얼로그를 바로 표시하지 않고 UI에만 반영
+        // 시각적 피드백을 위해 CSS 클래스 적용 (date-picker가 열려있을 때는 표시하지 않음)
+        if (!this.meetingDateMenu) {
+          // 잘못된 요일 선택 경고 대화상자 표시
+          this.dayOfWeekWarningDialog = true;
+        }
+
+        return false;
+      }
+
+      return true;
+    },
+
+    /**
+     * 권장 날짜로 변경하는 함수
+     */
+    changeDateToRecommended() {
+      this.meetingDate = this.recommendedDate;
+      this.meetingStartDate = this.recommendedDate;
+
+      // 자정 넘김 처리
+      if (
+        dateTimeUtils.isOvernightMeeting(
+          this.meetingStartTime,
+          this.meetingEndTime
+        )
+      ) {
+        this.meetingEndDate = moment(this.recommendedDate)
+          .add(1, "day")
+          .format("YYYY-MM-DD");
+      } else {
+        this.meetingEndDate = this.recommendedDate;
+      }
+
+      // 내부 DateTime 객체 업데이트
+      this.updateDateTime();
+      this.dayOfWeekWarningDialog = false;
+    },
+
+    /**
+     * 선택한 날짜 유지 함수
+     */
+    keepSelectedDate() {
+      this.dayOfWeekWarningDialog = false;
+    },
+
+    /**
+     * 날짜 선택 시 호출되는 함수
+     */
+    onDateSelected() {
+      this.meetingDateMenu = false;
+      this.updateDates();
+    },
+
+    /**
+     * 선택된 활동의 권장 요일을 반환하는 함수
+     * @returns {number|null} 권장 요일 (0-6) 또는 null
+     */
+    getRecommendedDayOfWeek() {
+      if (!this.selectedActivity) return null;
+
+      const activity = this.activities.find(
+        (a) => a.id === this.selectedActivity
+      );
+      if (!activity || !this.activityDefaults[activity.name]) return null;
+
+      return this.activityDefaults[activity.name].dayOfWeek;
+    },
+
+    /**
+     * 권장 요일 텍스트를 반환하는 함수
+     * @returns {string} 요일 텍스트 (예: "일요일")
+     */
+    getRecommendedDayOfWeekText() {
+      const dayOfWeek = this.getRecommendedDayOfWeek();
+      return dayOfWeek !== null ? this.dayOfWeekTexts[dayOfWeek] : "";
+    },
+
+    /**
+     * 선택된 활동 이름을 반환하는 함수
+     * @returns {string} 활동 이름
+     */
+    getActivityName() {
+      if (!this.selectedActivity) return "";
+
+      const activity = this.activities.find(
+        (a) => a.id === this.selectedActivity
+      );
+      return activity ? activity.name : "";
+    },
+
+/* 권장 요일 안내 텍스트 스타일 */
+.recommended-day-text {
+  background-color: rgba(33, 150, 243, 0.1);
+  border-left: 3px solid #2196f3;
+  padding: 8px 12px;
+  border-radius: 4px;
+  font-size: 0.9rem;
+  color: #555;
+  text-align: left;
+}
+
+/* 잘못된 요일 선택 시 스타일 */
+.wrong-day-warning {
+  border: 1px solid #f44336 !important;
+}
diff --git a/.firebase/hosting.ZGlzdA.cache b/.firebase/hosting.ZGlzdA.cache
--- a/.firebase/hosting.ZGlzdA.cache
+++ b/.firebase/hosting.ZGlzdA.cache
-service-worker.js,1742689603683,2c4c458813aa721b8ad7c8db8a6563de10fad46f7752e64920cce244c7ec7506
-manifest.json,1742689603638,271d366759937d7a7fc99f13b8bf2a2e088cdf5cf39b2d2a9051b676934ba276
-service-worker.js.map,1742689603681,194e5e5ed0a98be63cb84945ae38a0800227f1c856211af84d97e70c4e16e22d
-robots.txt,1742689603640,c17e70846d7031bb27102edfb33b59d1e3e40a8e8e8097af75b7766e7fffc250
-workbox-6567b62a.js,1742689603683,4ccf1afa18aaef5292100783bc70ab22b53b4a4ed87b0a6de1e73aad61dd5d5d
-index.html,1742689603681,ec18910303b7f0b75b4f044a508001a7b86e4ed55e06949d88da174bea0fb907
-favicon.ico,1742689603640,7a1a72943a1b2d7ed41d75574715a454ac9bfb21b636100c59ccd713ca3e86e1
-img/icons/safari-pinned-tab.svg,1742689603647,730d14831ff7235b452ff15b4d31888bc2a4b0259ed4461188c0927b0c525250
-img/icons/mstile-150x150.png,1742689603647,f3f1d499b7dcfd19aa6e3a9d5c6e16c1d610728b6892f4756352bade7581c196
-img/icons/favicon-32x32.png,1742689603646,f8834f79a7627bad1084de9b49915dd39a481895819b8f1242f6a57302818e65
-img/icons/msapplication-icon-144x144.png,1742689603646,27b3b62de2e36ac452e86079762d3cfd37c33dc8cbde0a7c5657e5a7c32d971a
-img/icons/apple-touch-icon.png,1742689603646,1b2b715b4793871476d9a21ca13df2326a38dd56c9eca517f5ecc1fcd47313bb
-img/icons/favicon-16x16.png,1742689603646,49be9fd84d9ec224026dded41b18f9466f637c9be4a910f816e4b9cbba468682
-img/icons/apple-touch-icon-152x152.png,1742689603646,b311312e0c6003846dbd8dd07b21a1850f0592821b752eb679d0fad2676ed243
-img/icons/apple-touch-icon-180x180.png,1742689603646,9b4b43fbebb97c9ff395eb49dc34be815a9f0b70d46a00b0c605902ccf32aefa
-img/icons/apple-touch-icon-120x120.png,1742689603646,1fbd32003c38ff6eadeab867da5ff1e7f2bab8d51a49bc0606a1f018281a98b5
-img/icons/apple-touch-icon-76x76.png,1742689603646,65d6c498ad60f94b338df3f1f4551303ec84306ecb1c7e615ed64489fffc8b28
-img/icons/apple-touch-icon-60x60.png,1742689603646,10916e81b10f37cf95567fc91ccb0eb6e92c2cf1346aa4df04f384b06aff2151
-img/icons/android-chrome-maskable-192x192.png,1742689603646,3d32e23ff67870b070c8b878159a13228ca153b6c198e45312c0778c6d626ac2
-icons/icon-72x72.png,1742689603645,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-img/icons/android-chrome-192x192.png,1742689603645,a1c1aac44befbb68115b2f6f57506995b6caf4337a45bde60ef701bec5a0a4f7
-icons/icon-96x96.png,1742689603645,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
-icons/icon-144x144.png,1742689603644,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/icon-152x152.png,1742689603644,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
-icons/favicon-32x32.png,1742689603644,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
-icons/favicon-16x16.png,1742689603644,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
-icons/icon-128x128.png,1742689603644,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
-icons/AppIcons/android/mipmap-xhdpi/ic_launcher.png,1742689603662,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
-icons/AppIcons/android/mipmap-xxhdpi/ic_launcher.png,1742689603662,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/AppIcons/android/mipmap-mdpi/ic_launcher.png,1742689603651,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
-icons/AppIcons/android/mipmap-hdpi/ic_launcher.png,1742689603648,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-img/intro.3fb2076a.png,1742689603637,f28d709c01ce69bfd1101b876b6a5ccabf8d7044a5e690c2a01397bca03e37cc
-img/icons/android-chrome-maskable-512x512.png,1742689603646,39b440f18b280d6f2c4ed960e00e2a9ef71bb163fadb114636f2b6d56a684fcd
-img/icons/android-chrome-512x512.png,1742689603646,b0b7d48a6cce8b3af50114fb56b94081434dfc1f57d9109027759d4b11f553d1
-icons/icon-192x192.png,1742689603644,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
-icons/icon-384x384.png,1742689603644,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
-icons/icon-167x167.png,1742689603644,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
-icons/icon-180x180.png,1742689603644,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
-icons/AppIcons/android/mipmap-xxxhdpi/ic_launcher.png,1742689603681,6eef9522a8fc62711ba09ca7df038b53b34ae89b6d62fedbdee2382f19a63361
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/Contents.json,1742689603651,362544adc9abbc072e932a66cdd36fb66f89f0751e9953a465fde292dd8bf78d
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/92.png,1742689603651,5fb30fd614b6966b7511e70c8eff9847be494d0c47809e2ff39b61ab4a62261d
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/88.png,1742689603650,f5ff7e5f4ae4833a76c2d60c85b98d65b5866c307a95f79c7e758a320afebb49
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/87.png,1742689603651,114a78af463a802f07c487ec04a77cc72cb24471a791f17f6f5cbdc409cd2e16
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/80.png,1742689603650,c18a161ca302d9fa25c6e51eb5086c2794df20a8ece066ebdf63ac50cc336f4e
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/76.png,1742689603650,7fbc388a2b89ad4d588eef816b42ab08a4342d4084f1d0f25c8d1d4599cfc2af
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/72.png,1742689603650,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/64.png,1742689603650,fa3cb4dc5bcfee3e9f2a62f4f1120f620db83656d7febd23f9e310dd5ec9e50a
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/66.png,1742689603650,669c5c3d9107922c46ec2a5c521409139b217fcbf1a5f3ffbbd2d37d0fb0c8be
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/60.png,1742689603650,285f2cd6793a05db820bed6fe0274b6c79b04716a57938f34f74248e0ec174ed
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/58.png,1742689603649,1838c9e4ab0196226253283b3cd3b1939d8d487d6ebc2261b1d70f00de033952
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/57.png,1742689603649,fe269dc44c92a2ea8b2eae6f6b374ecbd9e018f358b0d1bc4f4c6d171f22bd31
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/55.png,1742689603649,5dca7679805c5a99dd78f55d9e4564787bef7a73853dd04b26b1da700aec2c78
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/50.png,1742689603649,671c3ef098c01c79da69f6157cfbd3209c90d7fa6353d134f3c4b175450f5b36
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/48.png,1742689603649,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/40.png,1742689603649,727716cb4a213fe7eb7dbceae439de6171984436e528f93f25d43922a3fb4d74
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/32.png,1742689603649,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/29.png,1742689603649,19c91fd2ec9fee3ca27ee746bf3cb1415c3bd5e7fc58050d5d3367acbcf8110b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/20.png,1742689603649,881068aecdb5edff1dc811b94431339172ea9df83470ee26b95b63569c8f55b3
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/16.png,1742689603647,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
-workbox-6567b62a.js.map,1742689603683,acde288a8fff0a72bef7b2be1938473f23e5bdfac3930c3ed2840b6aeeb93778
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/152.png,1742689603647,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/144.png,1742689603648,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/128.png,1742689603648,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/120.png,1742689603648,805fd7fb45f3ef018b22d60ebc4a82a83eaa1ced066a078a80fd3884bbfaa34b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/114.png,1742689603647,5bb5dea1793efb6c336b918b96307dade54d93b29e79966425013fd8b424de3e
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/258.png,1742689603649,73121b333e5167762f69d7237e1fca45d09dc970a133b82f18b4f5319e8d8750
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/108.png,1742689603648,291d2cc48cdce03737c4743b33677a11bbc26ea455faf11dd0680eccb5fa0a93
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/256.png,1742689603649,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/102.png,1742689603647,743eff5509b211feea412bb4648a4107612b0d44723587b3650374fd08f3beb9
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/100.png,1742689603647,912fc9c7eb847eb228f43b53be007fda948e13c818fae49f77557fa8fc9d2a87
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/234.png,1742689603649,b319598a34683bfa303efc9fde15e0b85039f62b181a9740da8b1ac1ed7a455b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/216.png,1742689603649,cd8eafd93a015dff200946c8abc8a415e547debd55acbf4a9f2664fa5cbd0c73
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/196.png,1742689603648,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/180.png,1742689603648,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
-fonts/NotoSansKR-Regular.fa699eee.woff2,1742689603638,3e0d6c75893a1e3eb71a836eaac1ee22f2e8d9e1e6d975e2e6aecdebe1fa69ec
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/172.png,1742689603648,dc5201d988ed907e53a2661f51e24d1c245391684bf8c46cb27e5f392f7bf020
-icons/icon-512x512.png,1742689603644,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/167.png,1742689603648,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
-icons/AppIcons/playstore.png,1742689603647,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-fonts/NotoSansKR-Regular.16c9adda.eot,1742689603637,1eed3ade4776b114edc1e65fbcd1ecf3ff8b3d7683f82be5792dca515d9b9fc2
-fonts/NotoSansKR-Medium.c67b45b3.eot,1742689603637,044b0b2e2c560b3e192387a24919069b30080351db06c2c682326435ed9fb3f8
-fonts/NotoSansKR-Medium.4278862d.woff2,1742689603636,379528e3ab8f3a1a95ee5a0f0704abd215bee606edb9b55cc73d039c9152220e
-fonts/NotoSansKR-Bold.74d81029.woff2,1742689603637,8678d504518d952238b8ad29079e275ca70c84bc657c4e838479cc615bca9ddc
-fonts/NotoSansKR-Bold.16338ec6.eot,1742689603638,fe1d47ef3911839504742c8d64bf3600cbd916dccf99c75aef7d57006f58ec71
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/512.png,1742689603649,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-css/app.8ac92e83.css,1742689603637,b6d4a4312953a9ef3cb14a18d0decbed03fa3aae0cd5f9f8d0b5ce7c2ae226cd
-icons/AppIcons/appstore.png,1742689603647,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
-js/app.87c181e2.js,1742689603637,9e22f713c845d1450ed6176163bb5ef42378c14daab4f41ed2b3ed31519d14ea
-img/basic_image.20adb660.png,1742689603637,7cc34db9539ce287ffacb458283f16bf004543649f8a6054692a704425de5858
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/1024.png,1742689603648,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
-css/chunk-vendors.b69de080.css,1742689603640,00d34984c341fed81528f24954550b5084be21aceca2542b712a751215ed3be3
-js/295.34810280.js,1742689603637,7ddc7c8716b6b67c0e4c4e7e45146acc0b95068fea2fcaa78b8ed87a44a749ac
-js/app.87c181e2.js.map,1742689603662,98fdcaf53e7d3f431a026b817c054f4c50cd9b51b09a11f2507999f53d9c95cf
-js/chunk-vendors.9cffd800.js,1742689603644,b21650f8cf63a5638c58b0a4b3a4bdec8e9770324c69b900e9ccd14aa89cbeca
-js/295.34810280.js.map,1742689603681,c3c782da84e668634b8734d0c6f7febdf2e1c89755891297692d1db99cc29113
-fonts/NotoSansKR-Medium.9b254b95.otf,1742689603637,241896ddfb621581c7955d58e65dc19b591da93472727e22b2af8311176d8374
-fonts/NotoSansKR-Regular.cc1eb30f.otf,1742689603638,966de43c27bcf429bb0e7d51ec7d3370a6866142ddc7fe19e27d12e281be27c4
-fonts/NotoSansKR-Bold.d5ea8c02.otf,1742689603639,d24024f39e5917f95ad662794a0ac50bb46ccd83e80a142cec5ae0b2fbf1a295
-js/chunk-vendors.9cffd800.js.map,1742689603683,8ead70a3d447c5faaec1ab824bf3f9d1ed34f61731a548a7629c9e0e068c4dab
+version.json,1742713641609,fdf67638dfa05ac498431fe23e0cb30b38b50d609f095dcd980b97de2cee98c6
+manifest.json,1742713641604,22ee8de7454fe2a59e7d07b32da8b84cbcab6a105ffe6daf943bb86cebc4b49c
+service-worker.js.map,1742713641620,7bc69e007fdf86f162b31e67fec95aceff0105bc356a0d2bcaf883066de8ef5a
+robots.txt,1742713641609,c17e70846d7031bb27102edfb33b59d1e3e40a8e8e8097af75b7766e7fffc250
+service-worker.js,1742713641618,78997f6e8078d765f964d87c25ed93a9977af028c4115450edfcb335a377185b
+index.html,1742713641618,9dda66f28b93a5159763b7dddc7aa80c943387d54397751b7d17a7cdf53f1d04
+custom-service-worker.js,1742713641609,aac2a2f9f40392cd476af99917aad3b687161b0d67dd47e488e780c024dab622
+favicon.ico,1742713641609,7a1a72943a1b2d7ed41d75574715a454ac9bfb21b636100c59ccd713ca3e86e1
+workbox-14351bdd.js,1742713641619,328e01d6f2d81824d848cd6dfd602bd779c6e84b750f457b725500f5c682665a
+img/icons/safari-pinned-tab.svg,1742713641613,730d14831ff7235b452ff15b4d31888bc2a4b0259ed4461188c0927b0c525250
+img/icons/msapplication-icon-144x144.png,1742713641613,27b3b62de2e36ac452e86079762d3cfd37c33dc8cbde0a7c5657e5a7c32d971a
+img/icons/mstile-150x150.png,1742713641613,f3f1d499b7dcfd19aa6e3a9d5c6e16c1d610728b6892f4756352bade7581c196
+img/icons/favicon-32x32.png,1742713641613,f8834f79a7627bad1084de9b49915dd39a481895819b8f1242f6a57302818e65
+img/icons/favicon-16x16.png,1742713641613,49be9fd84d9ec224026dded41b18f9466f637c9be4a910f816e4b9cbba468682
+img/icons/apple-touch-icon.png,1742713641613,1b2b715b4793871476d9a21ca13df2326a38dd56c9eca517f5ecc1fcd47313bb
+img/icons/apple-touch-icon-76x76.png,1742713641612,65d6c498ad60f94b338df3f1f4551303ec84306ecb1c7e615ed64489fffc8b28
+img/icons/apple-touch-icon-60x60.png,1742713641612,10916e81b10f37cf95567fc91ccb0eb6e92c2cf1346aa4df04f384b06aff2151
+img/icons/apple-touch-icon-152x152.png,1742713641612,b311312e0c6003846dbd8dd07b21a1850f0592821b752eb679d0fad2676ed243
+img/icons/apple-touch-icon-180x180.png,1742713641612,9b4b43fbebb97c9ff395eb49dc34be815a9f0b70d46a00b0c605902ccf32aefa
+img/icons/apple-touch-icon-120x120.png,1742713641612,1fbd32003c38ff6eadeab867da5ff1e7f2bab8d51a49bc0606a1f018281a98b5
+img/icons/android-chrome-maskable-192x192.png,1742713641612,3d32e23ff67870b070c8b878159a13228ca153b6c198e45312c0778c6d626ac2
+img/icons/android-chrome-192x192.png,1742713641612,a1c1aac44befbb68115b2f6f57506995b6caf4337a45bde60ef701bec5a0a4f7
+icons/icon-72x72.png,1742713641612,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+icons/icon-96x96.png,1742713641611,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
+icons/icon-152x152.png,1742713641610,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
+icons/icon-128x128.png,1742713641610,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
+icons/icon-144x144.png,1742713641610,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/favicon-32x32.png,1742713641610,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
+icons/favicon-16x16.png,1742713641610,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
+icons/AppIcons/android/mipmap-xxhdpi/ic_launcher.png,1742713641620,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/AppIcons/android/mipmap-xhdpi/ic_launcher.png,1742713641619,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
+img/intro.3fb2076a.png,1742713641607,f28d709c01ce69bfd1101b876b6a5ccabf8d7044a5e690c2a01397bca03e37cc
+img/icons/android-chrome-maskable-512x512.png,1742713641612,39b440f18b280d6f2c4ed960e00e2a9ef71bb163fadb114636f2b6d56a684fcd
+img/icons/android-chrome-512x512.png,1742713641612,b0b7d48a6cce8b3af50114fb56b94081434dfc1f57d9109027759d4b11f553d1
+icons/icon-192x192.png,1742713641610,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
+icons/icon-180x180.png,1742713641610,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
+icons/icon-167x167.png,1742713641610,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
+icons/icon-384x384.png,1742713641611,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
+icons/AppIcons/android/mipmap-xxxhdpi/ic_launcher.png,1742713641618,6eef9522a8fc62711ba09ca7df038b53b34ae89b6d62fedbdee2382f19a63361
+icons/AppIcons/android/mipmap-mdpi/ic_launcher.png,1742713641618,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/Contents.json,1742713641617,362544adc9abbc072e932a66cdd36fb66f89f0751e9953a465fde292dd8bf78d
+icons/AppIcons/android/mipmap-hdpi/ic_launcher.png,1742713641620,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/92.png,1742713641617,5fb30fd614b6966b7511e70c8eff9847be494d0c47809e2ff39b61ab4a62261d
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/88.png,1742713641617,f5ff7e5f4ae4833a76c2d60c85b98d65b5866c307a95f79c7e758a320afebb49
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/87.png,1742713641617,114a78af463a802f07c487ec04a77cc72cb24471a791f17f6f5cbdc409cd2e16
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/80.png,1742713641617,c18a161ca302d9fa25c6e51eb5086c2794df20a8ece066ebdf63ac50cc336f4e
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/76.png,1742713641616,7fbc388a2b89ad4d588eef816b42ab08a4342d4084f1d0f25c8d1d4599cfc2af
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/72.png,1742713641616,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/66.png,1742713641616,669c5c3d9107922c46ec2a5c521409139b217fcbf1a5f3ffbbd2d37d0fb0c8be
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/64.png,1742713641616,fa3cb4dc5bcfee3e9f2a62f4f1120f620db83656d7febd23f9e310dd5ec9e50a
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/60.png,1742713641616,285f2cd6793a05db820bed6fe0274b6c79b04716a57938f34f74248e0ec174ed
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/58.png,1742713641615,1838c9e4ab0196226253283b3cd3b1939d8d487d6ebc2261b1d70f00de033952
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/57.png,1742713641615,fe269dc44c92a2ea8b2eae6f6b374ecbd9e018f358b0d1bc4f4c6d171f22bd31
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/55.png,1742713641615,5dca7679805c5a99dd78f55d9e4564787bef7a73853dd04b26b1da700aec2c78
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/50.png,1742713641615,671c3ef098c01c79da69f6157cfbd3209c90d7fa6353d134f3c4b175450f5b36
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/48.png,1742713641615,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/40.png,1742713641615,727716cb4a213fe7eb7dbceae439de6171984436e528f93f25d43922a3fb4d74
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/32.png,1742713641615,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/29.png,1742713641615,19c91fd2ec9fee3ca27ee746bf3cb1415c3bd5e7fc58050d5d3367acbcf8110b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/20.png,1742713641615,881068aecdb5edff1dc811b94431339172ea9df83470ee26b95b63569c8f55b3
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/16.png,1742713641614,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/152.png,1742713641614,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/258.png,1742713641615,73121b333e5167762f69d7237e1fca45d09dc970a133b82f18b4f5319e8d8750
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/144.png,1742713641614,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/128.png,1742713641614,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/256.png,1742713641615,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/234.png,1742713641615,b319598a34683bfa303efc9fde15e0b85039f62b181a9740da8b1ac1ed7a455b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/120.png,1742713641613,805fd7fb45f3ef018b22d60ebc4a82a83eaa1ced066a078a80fd3884bbfaa34b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/114.png,1742713641614,5bb5dea1793efb6c336b918b96307dade54d93b29e79966425013fd8b424de3e
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/216.png,1742713641615,cd8eafd93a015dff200946c8abc8a415e547debd55acbf4a9f2664fa5cbd0c73
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/108.png,1742713641614,291d2cc48cdce03737c4743b33677a11bbc26ea455faf11dd0680eccb5fa0a93
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/196.png,1742713641615,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/180.png,1742713641614,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/172.png,1742713641614,dc5201d988ed907e53a2661f51e24d1c245391684bf8c46cb27e5f392f7bf020
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/167.png,1742713641614,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
+icons/AppIcons/playstore.png,1742713641611,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+icons/icon-512x512.png,1742713641611,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/102.png,1742713641613,743eff5509b211feea412bb4648a4107612b0d44723587b3650374fd08f3beb9
+workbox-14351bdd.js.map,1742713641619,3d17c80e55873408853a8ec06d9a49b899bf214cd177f709924919092b1d62b5
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/100.png,1742713641613,912fc9c7eb847eb228f43b53be007fda948e13c818fae49f77557fa8fc9d2a87
+fonts/NotoSansKR-Regular.fa699eee.woff2,1742713641606,3e0d6c75893a1e3eb71a836eaac1ee22f2e8d9e1e6d975e2e6aecdebe1fa69ec
+fonts/NotoSansKR-Regular.16c9adda.eot,1742713641607,1eed3ade4776b114edc1e65fbcd1ecf3ff8b3d7683f82be5792dca515d9b9fc2
+fonts/NotoSansKR-Medium.c67b45b3.eot,1742713641606,044b0b2e2c560b3e192387a24919069b30080351db06c2c682326435ed9fb3f8
+fonts/NotoSansKR-Medium.4278862d.woff2,1742713641607,379528e3ab8f3a1a95ee5a0f0704abd215bee606edb9b55cc73d039c9152220e
+fonts/NotoSansKR-Bold.74d81029.woff2,1742713641607,8678d504518d952238b8ad29079e275ca70c84bc657c4e838479cc615bca9ddc
+fonts/NotoSansKR-Bold.16338ec6.eot,1742713641606,fe1d47ef3911839504742c8d64bf3600cbd916dccf99c75aef7d57006f58ec71
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/512.png,1742713641615,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+css/app.de2f5e34.css,1742713641607,3bc1e5989235dcc2245523d92b9346a6ddabbf50afdb8d2d808020d5835a7bd0
+icons/AppIcons/appstore.png,1742713641611,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
+js/app.1c111875.js,1742713641607,b41377def83bdd3939bb00146448a953edcf48cf03d0b7106b91ed827bae55c5
+img/basic_image.20adb660.png,1742713641606,7cc34db9539ce287ffacb458283f16bf004543649f8a6054692a704425de5858
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/1024.png,1742713641614,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
+css/chunk-vendors.e37a8ad1.css,1742713641609,86059739ab8eb7eed6f9d5f2f540f7ab03aacd94d5eb6a732b53a7cc072823d4
+js/295.34810280.js,1742713641606,7ddc7c8716b6b67c0e4c4e7e45146acc0b95068fea2fcaa78b8ed87a44a749ac
+js/app.1c111875.js.map,1742713641618,0a7fb50a8873e5d54e2d625ded0d4951640b5115e5d7dbec04a969e8946b5e19
+js/chunk-vendors.927485b7.js,1742713641610,490f90bfc86cedb74772b09aa391582a8a40bbb800dd93a6876cc8644465fc70
+js/295.34810280.js.map,1742713641618,c3c782da84e668634b8734d0c6f7febdf2e1c89755891297692d1db99cc29113
+fonts/NotoSansKR-Regular.cc1eb30f.otf,1742713641608,966de43c27bcf429bb0e7d51ec7d3370a6866142ddc7fe19e27d12e281be27c4
+fonts/NotoSansKR-Medium.9b254b95.otf,1742713641605,241896ddfb621581c7955d58e65dc19b591da93472727e22b2af8311176d8374
+fonts/NotoSansKR-Bold.d5ea8c02.otf,1742713641606,d24024f39e5917f95ad662794a0ac50bb46ccd83e80a142cec5ae0b2fbf1a295
+js/chunk-vendors.927485b7.js.map,1742713641619,4d98938342f01ab2fa4d034d7d0811086ec91632b0cfdfe07d7f7eb14f269a45
diff --git a/firebase.json b/firebase.json
--- a/firebase.json
+++ b/firebase.json
+      {
+        "source": "/index.html",
+        "headers": [
+          {
+            "key": "Cache-Control",
+            "value": "no-cache, no-store, must-revalidate"
+          }
+        ]
+      },
-            "value": "max-age=3600"
+            "value": "public, max-age=3600"
+          }
+        ]
+      },
+      {
+        "source": "/**/*.@(jpg|jpeg|gif|png|svg|webp|ico|woff|woff2|ttf|eot)",
+        "headers": [
+          {
+            "key": "Cache-Control",
+            "value": "public, max-age=86400"
+      },
+      {
+        "source": "/manifest.json",
+        "headers": [
+          {
+            "key": "Cache-Control",
+            "value": "no-cache, no-store, must-revalidate"
+          }
+        ]
diff --git a/public/custom-service-worker.js b/public/custom-service-worker.js
--- /dev/null
+++ b/public/custom-service-worker.js
+// This file is intentionally left mostly empty
+// It will be populated by Workbox during build process
+// But we add message listener to handle immediate activation
+
+// 이 파일은 빌드 시 생성되는 service-worker.js와 충돌을 피하기 위해
+// custom-service-worker.js로 이름을 변경해야 합니다.
+// 파일명을 변경한 후 이 파일을 삭제하거나 다른 경로로 이동하세요.
+
+self.addEventListener("message", (event) => {
+  if (event.data && event.data.type === "SKIP_WAITING") {
+    self.skipWaiting();
+  }
+});
+
+// 설치 즉시 활성화
+self.addEventListener("install", (event) => {
+  self.skipWaiting();
+});
+
+// 활성화 완료 시 모든 클라이언트 제어 획득
+self.addEventListener("activate", (event) => {
+  event.waitUntil(clients.claim());
+});
diff --git a/public/service-worker.js b/public/service-worker.js
--- a/public/service-worker.js
+++ /dev/null
-// This file is intentionally left mostly empty
-// It will be populated by Workbox during build process
-// But we add message listener to handle immediate activation
-
-self.addEventListener("message", (event) => {
-  if (event.data && event.data.type === "SKIP_WAITING") {
-    self.skipWaiting();
-  }
-});
diff --git a/public/version.json b/public/version.json
--- a/public/version.json
+++ b/public/version.json
-  "version": "1.0.0",
-  "buildDate": "2023-10-16T12:00:00Z"
+  "version": "1.0.1",
+  "buildDate": "2023-07-10T00:00:00Z"
diff --git a/src/registerServiceWorker.js b/src/registerServiceWorker.js
--- a/src/registerServiceWorker.js
+++ b/src/registerServiceWorker.js
+
+        // 버전 변경 시 즉시 서비스 워커 업데이트 요청
+        navigator.serviceWorker.getRegistration().then((registration) => {
+          if (registration && registration.waiting) {
+            registration.waiting.postMessage({ type: "SKIP_WAITING" });
+          }
+        });
+  // 서비스 워커 등록
+  // 기본 service-worker.js는 빌드 중에 Workbox에 의해 생성됨
-      // 주기적으로 서비스 워커 업데이트 확인 (60분마다)
+      // 주기적으로 서비스 워커 업데이트 확인 (5분마다)
-      }, 60 * 60 * 1000);
+      }, 5 * 60 * 1000);
diff --git a/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue b/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue
--- a/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/MeetingHistoryView.vue
+          <div class="created-at ma-3 mt-0 pa-0 pl-1">
+            <v-icon small class="mr-1">mdi-clock-outline</v-icon>
+            모임 기록일시: {{ formatDateTime(meeting.createdAt) }}
+          </div>
+                  createdAt:
+                    instance.created_at ||
+                    instance.createdAt ||
+                    new Date().toISOString(),
+    formatDateTime(dateString) {
+      if (!dateString) return "등록일 정보 없음";
+      const date = new Date(dateString);
+      if (isNaN(date.getTime())) return "날짜 오류";
+      return date.toLocaleString("ko-KR", {
+        year: "numeric",
+        month: "long",
+        day: "numeric",
+        hour: "2-digit",
+        minute: "2-digit",
+      });
+    },
+  .created-at {
+    font-size: 12px;
+    color: rgba(0, 0, 0, 0.6);
+  }
+
diff --git a/vue.config.js b/vue.config.js
--- a/vue.config.js
+++ b/vue.config.js
+    // Workbox 모드 설정 (GenerateSW로 명시적 설정)
+    workboxPluginMode: "GenerateSW",
+
-          handler: "networkFirst",
+          handler: "NetworkFirst",
diff --git a/firebase.json b/firebase.json
--- a/firebase.json
+++ b/firebase.json
-    "ignore": [
-      "firebase.json",
-      "**/.*",
-      "**/node_modules/**"
-    ],
+    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
+    ],
+    "headers": [
+      {
+        "source": "/**/*.@(js|css)",
+        "headers": [
+          {
+            "key": "Cache-Control",
+            "value": "max-age=3600"
+          }
+        ]
+      },
+      {
+        "source": "/version.json",
+        "headers": [
+          {
+            "key": "Cache-Control",
+            "value": "no-cache, no-store, must-revalidate"
+          }
+        ]
+      },
+      {
+        "source": "/service-worker.js",
+        "headers": [
+          {
+            "key": "Cache-Control",
+            "value": "no-cache, no-store, must-revalidate"
+          }
+        ]
+      }
diff --git a/public/service-worker.js b/public/service-worker.js
--- /dev/null
+++ b/public/service-worker.js
+// This file is intentionally left mostly empty
+// It will be populated by Workbox during build process
+// But we add message listener to handle immediate activation
+
+self.addEventListener("message", (event) => {
+  if (event.data && event.data.type === "SKIP_WAITING") {
+    self.skipWaiting();
+  }
+});
diff --git a/public/version.json b/public/version.json
--- /dev/null
+++ b/public/version.json
+{
+  "version": "1.0.0",
+  "buildDate": "2023-10-16T12:00:00Z"
+}
diff --git a/src/App.vue b/src/App.vue
--- a/src/App.vue
+++ b/src/App.vue
-  <router-view />
+  <div>
+    <router-view />
+    <update-notification />
+  </div>
+import UpdateNotification from "./components/UpdateNotification.vue";
+
-
+  components: {
+    UpdateNotification,
+  },
diff --git a/src/components/UpdateNotification.vue b/src/components/UpdateNotification.vue
--- /dev/null
+++ b/src/components/UpdateNotification.vue
+<template>
+  <v-snackbar
+    v-model="snackbar"
+    :timeout="timeout"
+    bottom
+    right
+    color="primary"
+  >
+    <div class="d-flex align-center">
+      <v-icon class="mr-2">mdi-update</v-icon>
+      <span>새 버전이 있습니다. 업데이트하시겠습니까?</span>
+      <v-spacer></v-spacer>
+      <v-btn text color="white" @click="refreshApp"> 업데이트 </v-btn>
+      <v-btn text color="white" @click="snackbar = false"> 나중에 </v-btn>
+    </div>
+  </v-snackbar>
+</template>
+
+<script>
+export default {
+  name: "UpdateNotification",
+  data() {
+    return {
+      snackbar: false,
+      timeout: -1, // 무제한 표시
+      refreshing: false,
+      registration: null,
+      updateVersion: null,
+    };
+  },
+  created() {
+    // 서비스 워커 업데이트 이벤트 리스너
+    window.addEventListener("swUpdated", this.showRefreshUI, { once: true });
+
+    // 버전 업데이트 이벤트 리스너
+    window.addEventListener("updateAvailable", this.showUpdateUI);
+
+    // 이미 이벤트가 발생했을 경우 (컴포넌트 생성 후 이벤트 발생한 경우)
+    if (navigator.serviceWorker && navigator.serviceWorker.controller) {
+      navigator.serviceWorker.controller.onstatechange = (e) => {
+        if (e.target.state === "redundant") {
+          this.showRefreshUI();
+        }
+      };
+    }
+  },
+  methods: {
+    // 서비스 워커 업데이트 알림 표시
+    showRefreshUI(e) {
+      if (e) {
+        this.registration = e.detail;
+      }
+      this.snackbar = true;
+    },
+
+    // 버전 업데이트 알림 표시
+    showUpdateUI(e) {
+      if (e && e.detail) {
+        this.updateVersion = e.detail.newVersion;
+        console.log(`업데이트 가능: ${this.updateVersion}`);
+      }
+      this.snackbar = true;
+    },
+
+    // 앱 새로고침
+    refreshApp() {
+      this.snackbar = false;
+
+      if (this.registration && this.registration.waiting) {
+        // service worker에 스킵 대기 메시지 전송
+        this.registration.waiting.postMessage({ type: "SKIP_WAITING" });
+      } else {
+        // 일반 새로고침
+        window.location.reload();
+      }
+    },
+  },
+};
+</script>
diff --git a/src/registerServiceWorker.js b/src/registerServiceWorker.js
--- a/src/registerServiceWorker.js
+++ b/src/registerServiceWorker.js
+// 업데이트 알림 상태 저장용 변수
+let refreshing = false;
+
+// 앱 버전 체크 함수
+function checkForUpdates() {
+  // 캐시 방지를 위해 쿼리 파라미터 추가
+  fetch(`${process.env.BASE_URL}version.json?_=${new Date().getTime()}`)
+    .then((response) => response.json())
+    .then((data) => {
+      // 로컬 저장소에 저장된 버전과 비교
+      const currentVersion = localStorage.getItem("appVersion");
+      if (currentVersion && currentVersion !== data.version) {
+        console.log(`새 버전 발견: ${data.version} (현재: ${currentVersion})`);
+
+        // 업데이트 알림 이벤트 발생
+        window.dispatchEvent(
+          new CustomEvent("updateAvailable", {
+            detail: {
+              currentVersion,
+              newVersion: data.version,
+            },
+          })
+        );
+      }
+      // 현재 버전 저장
+      localStorage.setItem("appVersion", data.version);
+    })
+    .catch((error) => {
+      console.error("버전 확인 중 오류 발생:", error);
+    });
+}
+
+
+      // 앱 로드 시 버전 체크
+      checkForUpdates();
-    registered() {
+    registered(registration) {
+
+      // 주기적으로 서비스 워커 업데이트 확인 (60분마다)
+      setInterval(() => {
+        registration.update();
+        checkForUpdates();
+      }, 60 * 60 * 1000);
-    updated() {
+    updated(registration) {
+
+      // 업데이트 알림 이벤트 발생
+      window.dispatchEvent(
+        new CustomEvent("swUpdated", { detail: registration })
+      );
+
+      // 서비스 워커 변경 시 자동 새로고침
+      registration.waiting.postMessage({ type: "SKIP_WAITING" });
+
+  // 서비스 워커 컨트롤러 변경 시 페이지 새로고침
+  navigator.serviceWorker.addEventListener("controllerchange", () => {
+    if (refreshing) return;
+    refreshing = true;
+    console.log("Controller changed, refreshing...");
+    window.location.reload();
+  });
diff --git a/update-version.sh b/update-version.sh
--- /dev/null
+++ b/update-version.sh
+#!/bin/bash
+# 버전 업데이트 및 배포 스크립트
+
+# 현재 버전 파싱
+CURRENT_VERSION=$(cat public/version.json | grep -o '"version": "[^"]*"' | cut -d'"' -f4)
+echo "현재 버전: $CURRENT_VERSION"
+
+# 버전 증가 (마이너 버전)
+IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
+MAJOR=${VERSION_PARTS[0]}
+MINOR=${VERSION_PARTS[1]}
+PATCH=${VERSION_PARTS[2]}
+
+# 패치 버전 증가
+PATCH=$((PATCH + 1))
+NEW_VERSION="$MAJOR.$MINOR.$PATCH"
+echo "새 버전: $NEW_VERSION"
+
+# 현재 날짜시간 (ISO 형식)
+NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
+
+# version.json 파일 업데이트
+echo "{
+  \"version\": \"$NEW_VERSION\",
+  \"buildDate\": \"$NOW\"
+}" > public/version.json
+
+echo "version.json 파일 업데이트 완료"
+
+# 빌드
+echo "빌드 시작..."
+npm run build
+
+# Firebase 배포
+echo "Firebase에 배포 시작..."
+firebase deploy
+
+echo "완료: 버전 $NEW_VERSION이 배포되었습니다." 
diff --git a/vue.config.js b/vue.config.js
--- a/vue.config.js
+++ b/vue.config.js
+
+  // PWA 설정 추가
+  pwa: {
+    name: "두기고",
+    themeColor: "#7EA394",
+    msTileColor: "#7EA394",
+    appleMobileWebAppCapable: "yes",
+    appleMobileWebAppStatusBarStyle: "black",
+
+    // Workbox 옵션
+    workboxOptions: {
+      skipWaiting: true,
+      clientsClaim: true,
+
+      // 버전 정보는 캐싱에서 제외
+      navigateFallback: "/index.html",
+
+      // 런타임 캐싱 설정
+      runtimeCaching: [
+        {
+          urlPattern: new RegExp("^https://"),
+          handler: "networkFirst",
+          options: {
+            cacheName: "api-cache",
+            expiration: {
+              maxAgeSeconds: 60 * 60, // 1시간 캐싱
+            },
+          },
+        },
+      ],
+
+      // version.json 파일은 항상 네트워크에서 가져오도록 설정
+      exclude: [/version\.json$/],
+    },
+
+    // manifest.json 설정
+    manifestOptions: {
+      background_color: "#FFFFFF",
+    },
+  },
+
+  // 파일명에 해시 추가하여 캐시 무효화
+  filenameHashing: true,
diff --git a/src/utils/dateTimeUtils.js b/src/utils/dateTimeUtils.js
--- /dev/null
+++ b/src/utils/dateTimeUtils.js
+import moment from "moment-timezone";
+
+/**
+ * 날짜와 시간 처리를 위한 유틸리티 클래스
+ */
+export const dateTimeUtils = {
+  /**
+   * 한국 시간대 상수
+   */
+  KOREA_TIMEZONE: "Asia/Seoul",
+
+  /**
+   * 날짜와 시간 문자열로부터 한국 시간대의 DateTime 객체 생성
+   * @param {string} date - YYYY-MM-DD 형식의 날짜 문자열
+   * @param {string} time - HH:mm 형식의 시간 문자열 (기본값 "00:00")
+   * @returns {moment.Moment} 한국 시간대의 moment 객체
+   */
+  createDateTime(date, time = "00:00") {
+    return moment.tz(
+      `${date} ${time}`,
+      "YYYY-MM-DD HH:mm",
+      this.KOREA_TIMEZONE
+    );
+  },
+
+  /**
+   * DateTime 객체를 UTC ISO 문자열로 변환
+   * @param {moment.Moment} dateTime - moment 객체
+   * @returns {string} UTC ISO 형식의 문자열 (예: "2023-10-01T14:00:00Z")
+   */
+  toUTCString(dateTime) {
+    return dateTime.clone().utc().format();
+  },
+
+  /**
+   * UTC 문자열을 한국 시간대의 DateTime 객체로 변환
+   * @param {string} utcString - UTC ISO 형식 문자열
+   * @returns {moment.Moment} 한국 시간대의 moment 객체
+   */
+  fromUTCString(utcString) {
+    return moment.utc(utcString).tz(this.KOREA_TIMEZONE);
+  },
+
+  /**
+   * 현재 한국 날짜를 YYYY-MM-DD 형식으로 반환
+   * @returns {string} YYYY-MM-DD 형식의 오늘 날짜
+   */
+  getTodayString() {
+    return moment().tz(this.KOREA_TIMEZONE).format("YYYY-MM-DD");
+  },
+
+  /**
+   * 모임이 자정을 넘어가는지 확인 (시작 시간이 종료 시간보다 늦은 경우)
+   * @param {string} startTime - HH:mm 형식의 시작 시간
+   * @param {string} endTime - HH:mm 형식의 종료 시간
+   * @returns {boolean} 자정을 넘어가는 모임이면 true, 아니면 false
+   */
+  isOvernightMeeting(startTime, endTime) {
+    // 유효한 시간 형식인지 확인
+    if (
+      !startTime ||
+      !endTime ||
+      !startTime.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9]$/) ||
+      !endTime.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9]$/)
+    ) {
+      return false;
+    }
+
+    // 시작 시간이 종료 시간보다 늦으면 자정을 넘어가는 모임
+    return startTime > endTime;
+  },
+
+  /**
+   * 두 DateTime 객체 간의 유효성 검증
+   * @param {moment.Moment} startDateTime - 시작 일시
+   * @param {moment.Moment} endDateTime - 종료 일시
+   * @returns {boolean} 유효한 일시 범위면 true, 그렇지 않으면 false
+   */
+  validateDateTimeRange(startDateTime, endDateTime) {
+    return (
+      startDateTime &&
+      endDateTime &&
+      endDateTime.isValid() &&
+      startDateTime.isValid() &&
+      !endDateTime.isBefore(startDateTime)
+    );
+  },
+};
+
+export default dateTimeUtils;
diff --git a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
--- a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
+          <!-- 자정 넘김 알림 추가 -->
+          <div v-if="isOvernightMeeting" class="midnight-notice mt-3">
+            <v-icon small color="warning" class="mr-2"
+              >mdi-clock-alert-outline</v-icon
+            >
+            <span>이 모임은 다음 날 종료됩니다</span>
+          </div>
-
-    <!-- 확인 다이얼로그 추가 -->
-    <v-dialog v-model="confirmDialog" max-width="500px" v-if="isDevelopment">
-      <v-card>
-        <v-card-title>모임 정보 확인 (개발용)</v-card-title>
-        <v-card-text>
-          <pre>{{ JSON.stringify(finalData, null, 2) }}</pre>
-        </v-card-text>
-        <v-card-actions>
-          <v-spacer></v-spacer>
-          <v-btn color="blue darken-1" text @click="confirmDialog = false"
-            >취소</v-btn
-          >
-          <v-btn color="blue darken-1" text @click="confirmSubmit">확인</v-btn>
-        </v-card-actions>
-      </v-card>
-    </v-dialog>
+import { dateTimeUtils } from "@/utils/dateTimeUtils";
+    // 자정을 넘어가는 모임인지 확인
+    isOvernightMeeting() {
+      return dateTimeUtils.isOvernightMeeting(
+        this.meetingStartTime,
+        this.meetingEndTime
+      );
+    },
-    // 오늘 날짜를 YYYY-MM-DD 형식으로 가져옴
-    const today = moment().format("YYYY-MM-DD");
+    // 오늘 날짜를 가져옴
+    const today = dateTimeUtils.getTodayString();
-      // 날짜 관련 필드 수정
-      meetingStartDate: today, // 시작 날짜
-      meetingEndDate: today, // 종료 날짜
-      startDateMenu: false, // 시작 날짜 달력 메뉴
-      endDateMenu: false, // 종료 날짜 달력 메뉴
-      meetingStartTime: "", // 시작 시간
-      meetingEndTime: "", // 종료 시간
+      // 날짜 관련 필드
+      meetingStartDate: today,
+      meetingEndDate: today,
+      startDateMenu: false,
+      endDateMenu: false,
+      meetingStartTime: "",
+      meetingEndTime: "",
+      // 내부 DateTime 객체
+      meetingStartDateTime: null,
+      meetingEndDateTime: null,
-      confirmDialog: false,
-      isDevelopment: process.env.NODE_ENV === "development",
+    // 내부 DateTime 객체 초기화
+    this.meetingStartDateTime = dateTimeUtils.createDateTime(
+      this.meetingStartDate
+    );
+    this.meetingEndDateTime = dateTimeUtils.createDateTime(this.meetingEndDate);
+
-    // this.createActivityDataTest();
-        if (
-          !this.selectedActivity ||
-          !this.meetingStartDate ||
-          !this.meetingStartTime
-        ) {
+        if (!this.selectedActivity || !this.meetingDate) {
-          alert("필수 정보를 모두 입력해주세요.");
+          alert("모임 종류와 날짜를 입력해주세요.");
-        // 날짜 시간 유효성 검사
-        this.validateTimes();
+        // 내부 DateTime 객체 최종 업데이트
+        this.updateDateTime();
-        // moment로 시작 및 종료 날짜/시간 처리
-        const koreaTimeZone = "Asia/Seoul";
-        const startDateTime = moment.tz(
-          `${this.meetingStartDate} ${this.meetingStartTime || "00:00"}`,
-          "YYYY-MM-DD HH:mm",
-          koreaTimeZone
-        );
-
-        const endDateTime = moment.tz(
-          `${this.meetingEndDate} ${this.meetingEndTime || "00:00"}`,
-          "YYYY-MM-DD HH:mm",
-          koreaTimeZone
-        );
-
-        // 인스턴스 데이터 준비 (ISO 형식으로 변환)
+        // UTC 시간으로 변환
-          startDateTime: startDateTime.utc().format(), // UTC ISO 형식
-          endDateTime: endDateTime.utc().format(), // UTC ISO 형식
+          startDateTime: dateTimeUtils.toUTCString(this.meetingStartDateTime),
+          endDateTime: dateTimeUtils.toUTCString(this.meetingEndDateTime),
-          startDateTime.format("YYYY-MM-DD HH:mm:ss")
+          this.meetingStartDateTime.format("YYYY-MM-DD HH:mm:ss")
+        );
+        console.log(
+          "📅 종료 시간:",
+          this.meetingEndDateTime.format("YYYY-MM-DD HH:mm:ss")
-        console.log("📅 종료 시간:", endDateTime.format("YYYY-MM-DD HH:mm:ss"));
-        if (this.isDevelopment) {
-          console.log("🔍 최종 데이터:", this.finalData);
-          this.confirmDialog = true;
-          this.isSubmitting = false;
-          return;
-        }
-
-        // 데이터 저장
+        // 개발 환경 체크 제거하고 바로 데이터 저장
-          this.isDevelopment
+          process.env.NODE_ENV === "development" // showLog 파라미터는 유지
-    /**
-     * 확인 후 최종 제출하는 함수
-     * @async
-     * @returns {Promise<void>}
-     */
-    async confirmSubmit() {
-      if (this.isDevelopment) {
-        this.confirmDialog = false;
-      }
-
-      try {
-        console.log("📤 출석 기록 전 정보:", this.finalData);
-
-        const response = await this.recordAttendance(
-          this.finalData.organizationId,
-          this.finalData.activityId,
-          this.finalData.instanceData,
-          this.finalData.attendances,
-          this.finalData.imageInfo, // 이미지 정보 추가
-          this.isDevelopment // showLog
-        );
-
-        console.log("📥 출석 기록 후 응답:", response);
-
-        if (response.result === 0) {
-          console.error("❌ 출석 정보 저장 실패");
-          throw new Error("출석 정보 저장에 실패했습니다.");
-        }
-
-        // 이미지 정보가 있다면 추가 처리
-        if (this.finalData.imageInfo) {
-          console.log("📸 저장된 이미지 정보:", this.finalData.imageInfo);
-          // TODO: 이미지 정보를 서버에 추가로 저장하는 로직 구현
-        }
-
-        console.log("✅ 모임 정보 저장 성공");
-        alert("모임 정보가 성공적으로 저장되었습니다.");
-        this.resetForm();
-        this.$router.push({ name: "ServiceSelectionView" });
-      } catch (error) {
-        console.error("❌ 모임 정보 저장 중 오류 발생:", error);
-        alert("모임 정보 저장에 실패했습니다. 다시 시도해 주세요.");
-      }
-    },
-
-      const today = moment().format("YYYY-MM-DD");
+      const today = dateTimeUtils.getTodayString();
+    /**
+     * 내부 DateTime 객체 업데이트
+     * @returns {void}
+     */
+    updateDateTime() {
+      // 시작 시간 확인 및 기본값 설정
+      const startTime = this.meetingStartTime || "00:00";
+      const endTime = this.meetingEndTime || "00:00";
+
+      // 내부 DateTime 객체 업데이트
+      this.meetingStartDateTime = dateTimeUtils.createDateTime(
+        this.meetingStartDate,
+        startTime
+      );
+
+      this.meetingEndDateTime = dateTimeUtils.createDateTime(
+        this.meetingEndDate,
+        endTime
+      );
+
+      // 종료 시간이 시작 시간보다 이전인 경우 (날짜가 다름에도 불구하고)
+      if (this.meetingEndDateTime.isBefore(this.meetingStartDateTime)) {
+        // 자정을 넘기는 모임인 경우 (같은 날짜에 시작 시간 > 종료 시간)
+        if (
+          this.meetingStartDate === this.meetingEndDate &&
+          startTime > endTime
+        ) {
+          // 종료 날짜를 다음날로 자동 설정
+          this.meetingEndDateTime = dateTimeUtils
+            .createDateTime(this.meetingStartDate, endTime)
+            .add(1, "day");
+
+          // UI 필드 업데이트
+          this.meetingEndDate = this.meetingEndDateTime.format("YYYY-MM-DD");
+        } else {
+          // 그 외의 경우 - 종료 시간을 시작 시간 이후로 자동 설정 (1시간 후)
+          this.meetingEndDateTime = this.meetingStartDateTime
+            .clone()
+            .add(1, "hour");
+
+          // UI 필드 업데이트
+          this.meetingEndDate = this.meetingEndDateTime.format("YYYY-MM-DD");
+          this.meetingEndTime = this.meetingEndDateTime.format("HH:mm");
+        }
+      }
+    },
+
-      // 모임 날짜가 변경되면 시작 날짜와 종료 날짜를 같이 변경
+      // 모임 날짜가 변경되면 시작 날짜도 변경
-      this.meetingEndDate = this.meetingDate;
-      // 선택된 활동이 있고 그 활동이 자정을 넘어가는 경우
-      if (this.selectedActivity) {
-        const selectedActivity = this.activities.find(
-          (a) => a.id === this.selectedActivity
-        );
-        if (selectedActivity && this.activityDefaults[selectedActivity.name]) {
-          const defaults = this.activityDefaults[selectedActivity.name];
-          if (
-            defaults.startTime &&
-            defaults.endTime &&
-            defaults.startTime > defaults.endTime
-          ) {
-            // 종료 날짜를 다음 날로 설정
-            this.meetingEndDate = moment(this.meetingDate)
-              .add(1, "day")
-              .format("YYYY-MM-DD");
-          }
+      // 시작 시간과 종료 시간이 설정되어 있는 경우에만 자정 넘김 확인
+      if (this.meetingStartTime && this.meetingEndTime) {
+        if (
+          dateTimeUtils.isOvernightMeeting(
+            this.meetingStartTime,
+            this.meetingEndTime
+          )
+        ) {
+          // 자정을 넘기는 모임인 경우 종료일은 다음날로 설정
+          this.meetingEndDate = moment(this.meetingDate)
+            .add(1, "day")
+            .format("YYYY-MM-DD");
+        } else {
+          // 자정을 넘기지 않는 모임인 경우 종료일 = 시작일
+          this.meetingEndDate = this.meetingDate;
+      } else {
+        // 시간이 설정되지 않은 경우 기본적으로 종료일 = 시작일
+        this.meetingEndDate = this.meetingDate;
+
+      // 내부 DateTime 객체 업데이트
+      this.updateDateTime();
+
-        // 자정을 넘어가는 모임인 경우 처리
+        // 날짜 업데이트 - 자정을 넘어가는 모임인 경우 처리
-          defaults.startTime &&
-          defaults.endTime &&
-          defaults.startTime > defaults.endTime
+          dateTimeUtils.isOvernightMeeting(defaults.startTime, defaults.endTime)
-          // 종료 날짜를 다음 날로 설정
+          // 자정을 넘기는 모임인 경우 종료일은 다음날로 설정
+          // 자정을 넘기지 않는 모임인 경우 종료일 = 시작일
-        // 날짜/시간 유효성 검사 실행
-        this.validateTimes();
+        // 내부 DateTime 객체 업데이트
+        this.updateDateTime();
+      }
+    },
+
+    /**
+     * 시간 입력값 변경 시 유효성 검증
+     */
+    validateTimes() {
+      // 필요한 입력값이 모두 있는지 확인
+      if (!this.meetingStartDate || !this.meetingEndDate) {
+        return;
+
+      // 시간이 입력되지 않은 경우 기본값 설정
+      if (!this.meetingStartTime) this.meetingStartTime = "00:00";
+      if (!this.meetingEndTime) this.meetingEndTime = "00:00";
+
+      // 내부 DateTime 객체 업데이트
+      this.updateDateTime();
-
-    /**
-     * 시작 및 종료 시간 유효성 검사
-     */
-    validateTimes() {
-      try {
-        // 모든 필드가 채워져 있는지 확인
-        if (
-          !this.meetingStartDate ||
-          !this.meetingStartTime ||
-          !this.meetingEndDate ||
-          !this.meetingEndTime
-        ) {
-          return; // 아직 모든 필드가 채워지지 않음
-        }
-
-        // moment 객체 생성
-        const koreaTimeZone = "Asia/Seoul";
-        const startDateTime = moment.tz(
-          `${this.meetingStartDate} ${this.meetingStartTime}`,
-          "YYYY-MM-DD HH:mm",
-          koreaTimeZone
-        );
-
-        const endDateTime = moment.tz(
-          `${this.meetingEndDate} ${this.meetingEndTime}`,
-          "YYYY-MM-DD HH:mm",
-          koreaTimeZone
-        );
-
-        // 종료 시간이 시작 시간보다 이전인 경우 경고
-        if (endDateTime.isBefore(startDateTime)) {
-          alert("종료 시간은 시작 시간보다 이후여야 합니다.");
-
-          // 종료 시간을 시작 시간보다 1시간 후로 자동 설정
-          const suggestedEndTime = startDateTime.clone().add(1, "hour");
-          this.meetingEndDate = suggestedEndTime.format("YYYY-MM-DD");
-          this.meetingEndTime = suggestedEndTime.format("HH:mm");
-        }
-      } catch (error) {
-        console.error("시간 유효성 검사 중 오류 발생:", error);
-      }
-    },
+
+.midnight-notice {
+  background-color: rgba(255, 193, 7, 0.1);
+  border-left: 3px solid #ffc107;
+  padding: 8px 12px;
+  margin: 10px 0;
+  border-radius: 4px;
+  display: flex;
+  align-items: center;
+}
diff --git a/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue b/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue
--- a/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue
+          <!-- 자정 넘김 알림 추가 -->
+          <div v-if="isOvernightMeeting" class="midnight-notice mt-3">
+            <v-icon small color="warning" class="mr-2"
+              >mdi-clock-alert-outline</v-icon
+            >
+            <span>이 모임은 다음 날 종료됩니다</span>
+          </div>
+import { dateTimeUtils } from "@/utils/dateTimeUtils";
+    // 자정을 넘어가는 모임인지 확인
+    isOvernightMeeting() {
+      return dateTimeUtils.isOvernightMeeting(
+        this.meetingStartTime,
+        this.meetingEndTime
+      );
+    },
+      meetingDateMenu: false,
+      // 내부 DateTime 객체
+      meetingStartDateTime: null,
+      meetingEndDateTime: null,
-      meetingDateMenu: false,
+    /**
+     * 내부 DateTime 객체 업데이트
+     * @returns {void}
+     */
+    updateDateTime() {
+      // 시작 시간 확인 및 기본값 설정
+      const startTime = this.meetingStartTime || "00:00";
+      const endTime = this.meetingEndTime || "00:00";
+
+      // 내부 DateTime 객체 업데이트
+      this.meetingStartDateTime = dateTimeUtils.createDateTime(
+        this.meetingStartDate,
+        startTime
+      );
+
+      this.meetingEndDateTime = dateTimeUtils.createDateTime(
+        this.meetingEndDate,
+        endTime
+      );
+
+      // 종료 시간이 시작 시간보다 이전인 경우 (날짜가 다름에도 불구하고)
+      if (this.meetingEndDateTime.isBefore(this.meetingStartDateTime)) {
+        // 자정을 넘기는 모임인 경우 (같은 날짜에 시작 시간 > 종료 시간)
+        if (
+          this.meetingStartDate === this.meetingEndDate &&
+          startTime > endTime
+        ) {
+          // 종료 날짜를 다음날로 자동 설정
+          this.meetingEndDateTime = dateTimeUtils
+            .createDateTime(this.meetingStartDate, endTime)
+            .add(1, "day");
+
+          // UI 필드 업데이트
+          this.meetingEndDate = this.meetingEndDateTime.format("YYYY-MM-DD");
+        } else {
+          // 그 외의 경우 - 종료 시간을 시작 시간 이후로 자동 설정 (1시간 후)
+          this.meetingEndDateTime = this.meetingStartDateTime
+            .clone()
+            .add(1, "hour");
+
+          // UI 필드 업데이트
+          this.meetingEndDate = this.meetingEndDateTime.format("YYYY-MM-DD");
+          this.meetingEndTime = this.meetingEndDateTime.format("HH:mm");
+        }
+      }
+    },
+
+    /**
+     * 모임 날짜 변경 시 시작/종료 날짜 업데이트
+     * @returns {void}
+     */
+    updateDates() {
+      this.meetingDateMenu = false;
+      // 모임 날짜가 변경되면 시작 날짜도 변경
+      this.meetingStartDate = this.meetingDate;
+
+      // 시작 시간과 종료 시간이 설정되어 있는 경우에만 자정 넘김 확인
+      if (this.meetingStartTime && this.meetingEndTime) {
+        if (
+          dateTimeUtils.isOvernightMeeting(
+            this.meetingStartTime,
+            this.meetingEndTime
+          )
+        ) {
+          // 자정을 넘기는 모임인 경우 종료일은 다음날로 설정
+          this.meetingEndDate = moment(this.meetingDate)
+            .add(1, "day")
+            .format("YYYY-MM-DD");
+        } else {
+          // 자정을 넘기지 않는 모임인 경우 종료일 = 시작일
+          this.meetingEndDate = this.meetingDate;
+        }
+      } else {
+        // 시간이 설정되지 않은 경우 기본적으로 종료일 = 시작일
+        this.meetingEndDate = this.meetingDate;
+      }
+
+      // 내부 DateTime 객체 업데이트
+      this.updateDateTime();
+    },
+
-          const koreaTimeZone = "Asia/Seoul";
-          const startDateTime = moment(activityInstance.startDateTime).tz(
-            koreaTimeZone
+          // UTC 문자열을 한국 시간대의 DateTime 객체로 변환
+          const startDateTime = dateTimeUtils.fromUTCString(
+            activityInstance.startDateTime
-          const endDateTime = moment(activityInstance.endDateTime).tz(
-            koreaTimeZone
+          const endDateTime = dateTimeUtils.fromUTCString(
+            activityInstance.endDateTime
-          // 날짜와 시간 분리하여 저장
-          this.meetingDate = startDateTime.format("YYYY-MM-DD");
+          // 내부 DateTime 객체 설정
+          this.meetingStartDateTime = startDateTime.clone();
+          this.meetingEndDateTime = endDateTime.clone();
+
+          // UI 표시용 필드 업데이트
+          this.meetingDate = startDateTime.format("YYYY-MM-DD"); // 모임 날짜
+
+    async updateMeeting() {
+      console.log("🚀 updateMeeting 함수 시작");
+
+      if (!this.meetingDate || !this.activityId) {
+        console.warn("⚠️ 필수 정보 누락");
+        alert("필수 정보를 모두 입력해주세요.");
+        return;
+      }
+
+      // 내부 DateTime 객체 업데이트
+      this.updateDateTime();
+
+      // 인스턴스 데이터 준비 (UTC ISO 형식으로 변환)
+      const instanceData = {
+        startDateTime: dateTimeUtils.toUTCString(this.meetingStartDateTime),
+        endDateTime: dateTimeUtils.toUTCString(this.meetingEndDateTime),
+        location: this.meetingLocation || "",
+        notes: this.meetingNotes || "",
+      };
+
+      console.log(
+        "📅 시작 시간:",
+        this.meetingStartDateTime.format("YYYY-MM-DD HH:mm:ss")
+      );
+      console.log(
+        "📅 종료 시간:",
+        this.meetingEndDateTime.format("YYYY-MM-DD HH:mm:ss")
+      );
+
+      const attendances = this.memberList.map((member) => ({
+        userId: member.id || member.userId,
+        status: member.isParticipating ? "출석" : "결석",
+        checkInTime: member.isParticipating ? instanceData.startDateTime : null,
+        checkOutTime: member.isParticipating ? instanceData.endDateTime : null,
+        note: "",
+      }));
+
+      try {
+        // 이미지 처리
+        let imageInfo = null;
+        if (this.photos) {
+          this.isUploading = true; // 업로드 시작
+          // 기존 이미지 삭제
+          if (this.originalImageInfo) {
+            await this.s3DeleteFile(this.originalImageInfo.fileName, true);
+          }
+
+          // 새 이미지 업로드
+          const uploadResult = await this.uploadImageToS3();
+          if (uploadResult) {
+            imageInfo = {
+              url: uploadResult.url,
+              fileName: uploadResult.fileName,
+              fileSize: this.photos.size,
+              fileType: this.photos.type,
+            };
+          }
+        }
+
+        const response = await this.updateAttendance(
+          this.currentOrganizationId,
+          this.activityId,
+          this.activityInstanceId,
+          instanceData,
+          attendances,
+          imageInfo,
+          true // showLog
+        );
+
+        if (response && response.result !== 0) {
+          console.log("모임 정보 업데이트 성공");
+          alert("모임 정보가 성공적으로 업데이트되었습니다.");
+          this.$router.push({ name: "MeetingHistoryView" });
+        } else {
+          throw new Error("모임 정보 업데이트에 실패했습니다.");
+        }
+      } catch (error) {
+        console.error("❌ 모임 정보 수정 중 오류 발생:", error);
+        alert("모임 정보 수정에 실패했습니다. 다시 시도해 주세요.");
+      } finally {
+        this.isUploading = false; // 업로드 완료 또는 실패 시
+      }
+    },
+
+    /**
+     * 회원 목록 조회
+     * @async
+     * @returns {Promise<void>}
+     */
+
+    /**
+     * 시간 입력값 변경 시 유효성 검증
+     */
+    validateTimes() {
+      // 필요한 입력값이 모두 있는지 확인
+      if (!this.meetingStartDate || !this.meetingEndDate) {
+        return;
+      }
+
+      // 시간이 입력되지 않은 경우 기본값 설정
+      if (!this.meetingStartTime) this.meetingStartTime = "00:00";
+      if (!this.meetingEndTime) this.meetingEndTime = "00:00";
+
+      // 내부 DateTime 객체 업데이트
+      this.updateDateTime();
+    },
-    async updateMeeting() {
-      console.log("🚀 updateMeeting 함수 시작");
-
-      if (!this.meetingStartDate || !this.meetingStartTime) {
-        console.warn("⚠️ 필수 정보 누락");
-        alert("필수 정보를 모두 입력해주세요.");
-        return;
-      }
-
-      // 시간 유효성 검사
-      this.validateTimes();
-
-      const koreaTimeZone = "Asia/Seoul";
-      const startDateTime = moment.tz(
-        `${this.meetingStartDate} ${this.meetingStartTime || "00:00"}`,
-        "YYYY-MM-DD HH:mm",
-        koreaTimeZone
-      );
-
-      const endDateTime = moment.tz(
-        `${this.meetingEndDate} ${this.meetingEndTime || "00:00"}`,
-        "YYYY-MM-DD HH:mm",
-        koreaTimeZone
-      );
-
-      const instanceData = {
-        startDateTime: startDateTime.utc().format(),
-        endDateTime: endDateTime.utc().format(),
-        location: this.meetingLocation || "",
-        notes: this.meetingNotes || "",
-      };
-
-      console.log("📅 시작 시간:", startDateTime.format("YYYY-MM-DD HH:mm:ss"));
-      console.log("📅 종료 시간:", endDateTime.format("YYYY-MM-DD HH:mm:ss"));
-
-      const attendances = this.memberList.map((member) => ({
-        userId: member.id || member.userId,
-        status: member.isParticipating ? "출석" : "결석",
-        checkInTime: member.isParticipating ? instanceData.startDateTime : null,
-        checkOutTime: member.isParticipating ? instanceData.endDateTime : null,
-        note: "",
-      }));
-
-      try {
-        // 이미지 처리
-        let imageInfo = null;
-        if (this.photos) {
-          this.isUploading = true; // 업로드 시작
-          // 기존 이미지 삭제
-          if (this.originalImageInfo) {
-            await this.s3DeleteFile(this.originalImageInfo.fileName, true);
-          }
-
-          // 새 이미지 업로드
-          const uploadResult = await this.uploadImageToS3();
-          if (uploadResult) {
-            imageInfo = {
-              url: uploadResult.url,
-              fileName: uploadResult.fileName,
-              fileSize: this.photos.size,
-              fileType: this.photos.type,
-            };
-          }
-        }
-
-        const response = await this.updateAttendance(
-          this.currentOrganizationId,
-          this.activityId,
-          this.activityInstanceId,
-          instanceData,
-          attendances,
-          imageInfo,
-          true // showLog
-        );
-
-        if (response && response.result !== 0) {
-          console.log("모임 정보 업데이트 성공");
-          alert("모임 정보가 성공적으로 업데이트되었습니다.");
-          this.$router.push({ name: "MeetingHistoryView" });
-        } else {
-          throw new Error("모임 정보 업데이트에 실패했습니다.");
-        }
-      } catch (error) {
-        console.error("❌ 모임 정보 수정 중 오류 발생:", error);
-        alert("모임 정보 수정에 실패했습니다. 다시 시도해 주세요.");
-      } finally {
-        this.isUploading = false; // 업로드 완료 또는 실패 시
-      }
-    },
-    /**
-     * 시작 및 종료 시간 유효성 검사
-     */
-    validateTimes() {
-      try {
-        // 모든 필드가 채워져 있는지 확인
-        if (
-          !this.meetingStartDate ||
-          !this.meetingStartTime ||
-          !this.meetingEndDate ||
-          !this.meetingEndTime
-        ) {
-          return; // 아직 모든 필드가 채워지지 않음
-        }
-
-        // moment 객체 생성
-        const koreaTimeZone = "Asia/Seoul";
-        const startDateTime = moment.tz(
-          `${this.meetingStartDate} ${this.meetingStartTime}`,
-          "YYYY-MM-DD HH:mm",
-          koreaTimeZone
-        );
-
-        const endDateTime = moment.tz(
-          `${this.meetingEndDate} ${this.meetingEndTime}`,
-          "YYYY-MM-DD HH:mm",
-          koreaTimeZone
-        );
-
-        // 종료 시간이 시작 시간보다 이전인 경우 경고
-        if (endDateTime.isBefore(startDateTime)) {
-          alert("종료 시간은 시작 시간보다 이후여야 합니다.");
-
-          // 종료 시간을 시작 시간보다 1시간 후로 자동 설정
-          const suggestedEndTime = startDateTime.clone().add(1, "hour");
-          this.meetingEndDate = suggestedEndTime.format("YYYY-MM-DD");
-          this.meetingEndTime = suggestedEndTime.format("HH:mm");
-        }
-      } catch (error) {
-        console.error("시간 유효성 검사 중 오류 발생:", error);
-      }
-    },
-    /**
-     * 모임 날짜 변경 시 시작/종료 날짜 업데이트
-     * @returns {void}
-     */
-    updateDates() {
-      this.meetingDateMenu = false;
-      // 모임 날짜가 변경되면 시작 날짜와 종료 날짜를 같이 변경
-      this.meetingStartDate = this.meetingDate;
-
-      // 시작 시간과 종료 시간이 설정되어 있고, 종료 시간이 시작 시간보다 이전인 경우
-      // (자정을 넘어가는 경우)
-      if (
-        this.meetingStartTime &&
-        this.meetingEndTime &&
-        this.meetingStartTime > this.meetingEndTime
-      ) {
-        // 종료 날짜를 다음 날로 설정
-        this.meetingEndDate = moment(this.meetingDate)
-          .add(1, "day")
-          .format("YYYY-MM-DD");
-      } else {
-        this.meetingEndDate = this.meetingDate;
-      }
-
-      // 날짜/시간 유효성 검사 실행
-      this.validateTimes();
-    },
+
+.midnight-notice {
+  background-color: rgba(255, 193, 7, 0.1);
+  border-left: 3px solid #ffc107;
+  padding: 8px 12px;
+  margin: 10px 0;
+  border-radius: 4px;
+  display: flex;
+  align-items: center;
+}
diff --git a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
--- a/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/AttendanceInputView.vue
+        <div class="section-label mb-2">모임 일정</div>
+
+        <!-- 모임 공식 날짜 -->
-          v-model="menu"
+          v-model="meetingDateMenu"
+          class="mb-7"
+          width="100%"
-              label="모임 날짜 선택"
+              label="모임 날짜"
+              style="width: 100%"
-            @input="menu = false"
+            @input="updateDates"
+        <!-- 시작 날짜 및 시간 -->
+        <div class="date-time-section mb-7">
+          <div class="section-title mb-1">시작 일시</div>
+          <div>
+            <v-menu
+              v-model="startDateMenu"
+              :close-on-content-click="false"
+              :nudge-right="40"
+              transition="scale-transition"
+              offset-y
+              min-width="290px"
+              class="mb-7"
+              width="100%"
+            >
+              <template v-slot:activator="{ on, attrs }">
+                <v-text-field
+                  v-model="meetingStartDate"
+                  label="시작 날짜"
+                  color="#7EA394"
+                  background-color="#edeef3"
+                  readonly
+                  solo
+                  rounded
+                  flat
+                  dense
+                  v-bind="attrs"
+                  v-on="on"
+                  class="mb-7"
+                  style="width: 100%"
+                ></v-text-field>
+              </template>
+              <v-date-picker
+                v-model="meetingStartDate"
+                no-title
+                @input="startDateMenu = false"
+              ></v-date-picker>
+            </v-menu>
+            <v-text-field
+              v-model="meetingStartTime"
+              label="시작 시간"
+              type="time"
+              background-color="#edeef3"
+              color="#7EA394"
+              solo
+              rounded
+              flat
+              dense
+              hide-details="auto"
+              style="width: 100%"
+              @change="validateTimes"
+              @focus="startEditing('meetingStartTime')"
+              @blur="finishEditing"
+              ref="meetingStartTime"
+            ></v-text-field>
+          </div>
+        </div>
+
+        <!-- 종료 날짜 및 시간 -->
+        <div class="date-time-section mb-7">
+          <div class="section-title mb-1">종료 일시</div>
+          <div>
+            <v-menu
+              v-model="endDateMenu"
+              :close-on-content-click="false"
+              :nudge-right="40"
+              transition="scale-transition"
+              offset-y
+              min-width="290px"
+              class="mb-7"
+              width="100%"
+            >
+              <template v-slot:activator="{ on, attrs }">
+                <v-text-field
+                  v-model="meetingEndDate"
+                  label="종료 날짜"
+                  color="#7EA394"
+                  background-color="#edeef3"
+                  readonly
+                  solo
+                  rounded
+                  flat
+                  dense
+                  v-bind="attrs"
+                  v-on="on"
+                  class="mb-7"
+                  style="width: 100%"
+                ></v-text-field>
+              </template>
+              <v-date-picker
+                v-model="meetingEndDate"
+                no-title
+                @input="endDateMenu = false"
+              ></v-date-picker>
+            </v-menu>
+            <v-text-field
+              v-model="meetingEndTime"
+              label="종료 시간"
+              type="time"
+              background-color="#edeef3"
+              color="#7EA394"
+              solo
+              rounded
+              flat
+              dense
+              hide-details="auto"
+              style="width: 100%"
+              @change="validateTimes"
+              @focus="startEditing('meetingEndTime')"
+              @blur="finishEditing"
+              ref="meetingEndTime"
+            ></v-text-field>
+          </div>
+        </div>
+
-        <!-- 시작 시간, 종료 시간, 장소, 메모 입력 -->
-        <v-text-field
-          v-model="meetingStartTime"
-          label="시작 시간"
-          type="time"
-          background-color="#edeef3"
-          color="#7EA394"
-          solo
-          rounded
-          flat
-          dense
-          hide-details="auto"
-          class="mb-7 mx-auto bg-transparent"
-          @focus="startEditing('meetingStartTime')"
-          @blur="finishEditing"
-          ref="meetingStartTime"
-        ></v-text-field>
-        <v-text-field
-          v-model="meetingEndTime"
-          label="종료 시간"
-          type="time"
-          background-color="#edeef3"
-          color="#7EA394"
-          solo
-          rounded
-          flat
-          dense
-          hide-details="auto"
-          class="mb-7 mx-auto bg-transparent"
-          @focus="startEditing('meetingEndTime')"
-          @blur="finishEditing"
-          ref="meetingEndTime"
-        ></v-text-field>
+        <!-- 시장소, 메모 입력 -->
+import moment from "moment-timezone";
+    // 오늘 날짜를 YYYY-MM-DD 형식으로 가져옴
+    const today = moment().format("YYYY-MM-DD");
+
+      meetingDateMenu: false,
+      meetingDate: today,
-      // 오늘 날짜로 초기화
-      meetingDate: new Date().toISOString().substr(0, 10),
+      // 날짜 관련 필드 수정
+      meetingStartDate: today, // 시작 날짜
+      meetingEndDate: today, // 종료 날짜
+      startDateMenu: false, // 시작 날짜 달력 메뉴
+      endDateMenu: false, // 종료 날짜 달력 메뉴
+      meetingStartTime: "", // 시작 시간
+      meetingEndTime: "", // 종료 시간
-      meetingStartTime: "",
-      meetingEndTime: "",
-        if (!this.selectedActivity || !this.meetingDate) {
+        if (
+          !this.selectedActivity ||
+          !this.meetingStartDate ||
+          !this.meetingStartTime
+        ) {
+          this.isSubmitting = false;
+        // 날짜 시간 유효성 검사
+        this.validateTimes();
+
+            this.isSubmitting = false;
-        // 인스턴스 데이터 준비
+        // moment로 시작 및 종료 날짜/시간 처리
+        const koreaTimeZone = "Asia/Seoul";
+        const startDateTime = moment.tz(
+          `${this.meetingStartDate} ${this.meetingStartTime || "00:00"}`,
+          "YYYY-MM-DD HH:mm",
+          koreaTimeZone
+        );
+
+        const endDateTime = moment.tz(
+          `${this.meetingEndDate} ${this.meetingEndTime || "00:00"}`,
+          "YYYY-MM-DD HH:mm",
+          koreaTimeZone
+        );
+
+        // 인스턴스 데이터 준비 (ISO 형식으로 변환)
-          startDateTime: `${this.meetingDate}T${
-            this.meetingStartTime || "00:00"
-          }:00`,
-          endDateTime: `${this.meetingDate}T${
-            this.meetingEndTime || "00:00"
-          }:00`,
+          startDateTime: startDateTime.utc().format(), // UTC ISO 형식
+          endDateTime: endDateTime.utc().format(), // UTC ISO 형식
+        console.log(
+          "📅 시작 시간:",
+          startDateTime.format("YYYY-MM-DD HH:mm:ss")
+        );
+        console.log("📅 종료 시간:", endDateTime.format("YYYY-MM-DD HH:mm:ss"));
+
+        if (this.isDevelopment) {
+          console.log("🔍 최종 데이터:", this.finalData);
+          this.confirmDialog = true;
+          this.isSubmitting = false;
+          return;
+        }
+
+      const today = moment().format("YYYY-MM-DD");
-      this.meetingDate = new Date().toISOString().substr(0, 10);
+      this.meetingStartDate = today;
+      this.meetingEndDate = today;
+      this.meetingStartTime = "";
+      this.meetingEndTime = "";
+      this.meetingLocation = "";
+      this.meetingNotes = "";
+    /**
+     * 모임 날짜 변경 시 시작/종료 날짜 업데이트
+     * @returns {void}
+     */
+    updateDates() {
+      this.meetingDateMenu = false;
+      // 모임 날짜가 변경되면 시작 날짜와 종료 날짜를 같이 변경
+      this.meetingStartDate = this.meetingDate;
+      this.meetingEndDate = this.meetingDate;
+
+      // 선택된 활동이 있고 그 활동이 자정을 넘어가는 경우
+      if (this.selectedActivity) {
+        const selectedActivity = this.activities.find(
+          (a) => a.id === this.selectedActivity
+        );
+        if (selectedActivity && this.activityDefaults[selectedActivity.name]) {
+          const defaults = this.activityDefaults[selectedActivity.name];
+          if (
+            defaults.startTime &&
+            defaults.endTime &&
+            defaults.startTime > defaults.endTime
+          ) {
+            // 종료 날짜를 다음 날로 설정
+            this.meetingEndDate = moment(this.meetingDate)
+              .add(1, "day")
+              .format("YYYY-MM-DD");
+          }
+        }
+      }
+    },
+
+
+        // 자정을 넘어가는 모임인 경우 처리
+        if (
+          defaults.startTime &&
+          defaults.endTime &&
+          defaults.startTime > defaults.endTime
+        ) {
+          // 종료 날짜를 다음 날로 설정
+          this.meetingEndDate = moment(this.meetingDate)
+            .add(1, "day")
+            .format("YYYY-MM-DD");
+        } else {
+          this.meetingEndDate = this.meetingDate;
+        }
+
+
+        // 날짜/시간 유효성 검사 실행
+        this.validateTimes();
+
+    /**
+     * 시작 및 종료 시간 유효성 검사
+     */
+    validateTimes() {
+      try {
+        // 모든 필드가 채워져 있는지 확인
+        if (
+          !this.meetingStartDate ||
+          !this.meetingStartTime ||
+          !this.meetingEndDate ||
+          !this.meetingEndTime
+        ) {
+          return; // 아직 모든 필드가 채워지지 않음
+        }
+
+        // moment 객체 생성
+        const koreaTimeZone = "Asia/Seoul";
+        const startDateTime = moment.tz(
+          `${this.meetingStartDate} ${this.meetingStartTime}`,
+          "YYYY-MM-DD HH:mm",
+          koreaTimeZone
+        );
+
+        const endDateTime = moment.tz(
+          `${this.meetingEndDate} ${this.meetingEndTime}`,
+          "YYYY-MM-DD HH:mm",
+          koreaTimeZone
+        );
+
+        // 종료 시간이 시작 시간보다 이전인 경우 경고
+        if (endDateTime.isBefore(startDateTime)) {
+          alert("종료 시간은 시작 시간보다 이후여야 합니다.");
+
+          // 종료 시간을 시작 시간보다 1시간 후로 자동 설정
+          const suggestedEndTime = startDateTime.clone().add(1, "hour");
+          this.meetingEndDate = suggestedEndTime.format("YYYY-MM-DD");
+          this.meetingEndTime = suggestedEndTime.format("HH:mm");
+        }
+      } catch (error) {
+        console.error("시간 유효성 검사 중 오류 발생:", error);
+      }
+    },
-.full-size {
-  width: 100%;
-  height: 100%;
-}
-
+
+/* 새로 추가된 스타일 */
+.section-label {
+  font-weight: 600;
+  color: #7ea394;
+  font-size: 1.1rem;
+  text-align: left;
+  padding-left: 8px;
+}
+
+.section-title {
+  font-weight: 500;
+  color: #666;
+  font-size: 0.9rem;
+  text-align: left;
+  padding-left: 8px;
+}
+
+.date-time-section {
+  background-color: rgba(126, 163, 148, 0.05);
+  border-radius: 12px;
+  padding: 12px 16px;
+  border-left: 3px solid #7ea394;
+}
diff --git a/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue b/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue
--- a/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue
+++ b/src/views/main/mainMenu/attendanceManagement/AttendanceUpdateView.vue
-        <!-- 모임 날짜 선택 -->
+        <!-- 모임 일정 -->
+        <div class="section-label mb-2">모임 일정</div>
+
+        <!-- 모임 공식 날짜 -->
-          v-model="menu"
+          v-model="meetingDateMenu"
+          class="mb-7"
+          width="100%"
-              label="임 날 선택"
+              label="모임 날짜"
+              style="width: 100%"
-            @input="menu = false"
+            @input="updateDates"
+        <!-- 시작 날짜 및 시간 -->
+        <div class="date-time-section mb-4">
+          <div class="section-title mb-1">시작 일시</div>
+          <div>
+            <v-menu
+              v-model="startDateMenu"
+              :close-on-content-click="false"
+              :nudge-right="40"
+              transition="scale-transition"
+              offset-y
+              min-width="290px"
+              class="mb-7"
+              width="100%"
+            >
+              <template v-slot:activator="{ on, attrs }">
+                <v-text-field
+                  v-model="meetingStartDate"
+                  label="시작 날짜"
+                  color="#7EA394"
+                  background-color="#edeef3"
+                  readonly
+                  solo
+                  rounded
+                  flat
+                  dense
+                  v-bind="attrs"
+                  v-on="on"
+                  class="mb-7"
+                  style="width: 100%"
+                ></v-text-field>
+              </template>
+              <v-date-picker
+                v-model="meetingStartDate"
+                no-title
+                @input="startDateMenu = false"
+              ></v-date-picker>
+            </v-menu>
+            <v-text-field
+              v-model="meetingStartTime"
+              label="시작 시간"
+              type="time"
+              background-color="#edeef3"
+              color="#7EA394"
+              solo
+              rounded
+              flat
+              dense
+              hide-details="auto"
+              style="width: 100%"
+              @change="validateTimes"
+            ></v-text-field>
+          </div>
+        </div>
+
+        <!-- 종료 날짜 및 시간 -->
+        <div class="date-time-section mb-7">
+          <div class="section-title mb-1">종료 일시</div>
+          <div>
+            <v-menu
+              v-model="endDateMenu"
+              :close-on-content-click="false"
+              :nudge-right="40"
+              transition="scale-transition"
+              offset-y
+              min-width="290px"
+              class="mb-7"
+              width="100%"
+            >
+              <template v-slot:activator="{ on, attrs }">
+                <v-text-field
+                  v-model="meetingEndDate"
+                  label="종료 날짜"
+                  color="#7EA394"
+                  background-color="#edeef3"
+                  readonly
+                  solo
+                  rounded
+                  flat
+                  dense
+                  v-bind="attrs"
+                  v-on="on"
+                  class="mb-7"
+                  style="width: 100%"
+                ></v-text-field>
+              </template>
+              <v-date-picker
+                v-model="meetingEndDate"
+                no-title
+                @input="endDateMenu = false"
+              ></v-date-picker>
+            </v-menu>
+            <v-text-field
+              v-model="meetingEndTime"
+              label="종료 시간"
+              type="time"
+              background-color="#edeef3"
+              color="#7EA394"
+              solo
+              rounded
+              flat
+              dense
+              hide-details="auto"
+              style="width: 100%"
+              @change="validateTimes"
+            ></v-text-field>
+          </div>
+        </div>
+
-        <!-- 시작 시간, 종료 시간, 장소, 메모 입력 -->
-        <v-text-field
-          v-model="meetingStartTime"
-          label="시작 시간"
-          type="time"
-          background-color="#edeef3"
-          color="#7EA394"
-          solo
-          rounded
-          flat
-          dense
-          hide-details="auto"
-          class="mb-7 mx-auto bg-transparent"
-        ></v-text-field>
-        <v-text-field
-          v-model="meetingEndTime"
-          label="종료 시간"
-          type="time"
-          background-color="#edeef3"
-          color="#7EA394"
-          solo
-          rounded
-          flat
-          dense
-          hide-details="auto"
-          class="mb-7 mx-auto bg-transparent"
-        ></v-text-field>
+        <!-- 장소, 메모 입력 -->
+      startDateMenu: false,
+      meetingStartDate: "",
+      endDateMenu: false,
+      meetingEndDate: "",
+      meetingDateMenu: false,
+          // 날짜와 시간 분리하여 저장
+          this.meetingStartDate = startDateTime.format("YYYY-MM-DD");
+          this.meetingEndDate = endDateTime.format("YYYY-MM-DD");
-      if (!this.meetingDate) {
+      if (!this.meetingStartDate || !this.meetingStartTime) {
-      const selectedParticipants = this.memberList.filter(
-        (member) => member.isParticipating
-      );
+      // 시간 유효성 검사
+      this.validateTimes();
-        `${this.meetingDate} ${this.meetingStartTime || "00:00"}`,
+        `${this.meetingStartDate} ${this.meetingStartTime || "00:00"}`,
+        "YYYY-MM-DD HH:mm",
+
-        `${this.meetingDate} ${this.meetingEndTime || "00:00"}`,
+        `${this.meetingEndDate} ${this.meetingEndTime || "00:00"}`,
+        "YYYY-MM-DD HH:mm",
-      const attendances = selectedParticipants.map((participant) => ({
-        userId: participant.id || participant.userId,
-        status: "출석",
-        checkInTime: instanceData.startDateTime,
-        checkOutTime: instanceData.endDateTime,
+      console.log("📅 시작 시간:", startDateTime.format("YYYY-MM-DD HH:mm:ss"));
+      console.log("📅 종료 시간:", endDateTime.format("YYYY-MM-DD HH:mm:ss"));
+
+      const attendances = this.memberList.map((member) => ({
+        userId: member.id || member.userId,
+        status: member.isParticipating ? "출석" : "결석",
+        checkInTime: member.isParticipating ? instanceData.startDateTime : null,
+        checkOutTime: member.isParticipating ? instanceData.endDateTime : null,
+    /**
+     * 시작 및 종료 시간 유효성 검사
+     */
+    validateTimes() {
+      try {
+        // 모든 필드가 채워져 있는지 확인
+        if (
+          !this.meetingStartDate ||
+          !this.meetingStartTime ||
+          !this.meetingEndDate ||
+          !this.meetingEndTime
+        ) {
+          return; // 아직 모든 필드가 채워지지 않음
+        }
+
+        // moment 객체 생성
+        const koreaTimeZone = "Asia/Seoul";
+        const startDateTime = moment.tz(
+          `${this.meetingStartDate} ${this.meetingStartTime}`,
+          "YYYY-MM-DD HH:mm",
+          koreaTimeZone
+        );
+
+        const endDateTime = moment.tz(
+          `${this.meetingEndDate} ${this.meetingEndTime}`,
+          "YYYY-MM-DD HH:mm",
+          koreaTimeZone
+        );
+
+        // 종료 시간이 시작 시간보다 이전인 경우 경고
+        if (endDateTime.isBefore(startDateTime)) {
+          alert("종료 시간은 시작 시간보다 이후여야 합니다.");
+
+          // 종료 시간을 시작 시간보다 1시간 후로 자동 설정
+          const suggestedEndTime = startDateTime.clone().add(1, "hour");
+          this.meetingEndDate = suggestedEndTime.format("YYYY-MM-DD");
+          this.meetingEndTime = suggestedEndTime.format("HH:mm");
+        }
+      } catch (error) {
+        console.error("시간 유효성 검사 중 오류 발생:", error);
+      }
+    },
+    /**
+     * 모임 날짜 변경 시 시작/종료 날짜 업데이트
+     * @returns {void}
+     */
+    updateDates() {
+      this.meetingDateMenu = false;
+      // 모임 날짜가 변경되면 시작 날짜와 종료 날짜를 같이 변경
+      this.meetingStartDate = this.meetingDate;
+
+      // 시작 시간과 종료 시간이 설정되어 있고, 종료 시간이 시작 시간보다 이전인 경우
+      // (자정을 넘어가는 경우)
+      if (
+        this.meetingStartTime &&
+        this.meetingEndTime &&
+        this.meetingStartTime > this.meetingEndTime
+      ) {
+        // 종료 날짜를 다음 날로 설정
+        this.meetingEndDate = moment(this.meetingDate)
+          .add(1, "day")
+          .format("YYYY-MM-DD");
+      } else {
+        this.meetingEndDate = this.meetingDate;
+      }
+
+      // 날짜/시간 유효성 검사 실행
+      this.validateTimes();
+    },
+
+/* 새로 추가된 스타일 */
+.section-label {
+  font-weight: 600;
+  color: #7ea394;
+  font-size: 1.1rem;
+  text-align: left;
+  padding-left: 8px;
+}
+
+.section-title {
+  font-weight: 500;
+  color: #666;
+  font-size: 0.9rem;
+  text-align: left;
+  padding-left: 8px;
+}
+
+.date-time-section {
+  background-color: rgba(126, 163, 148, 0.05);
+  border-radius: 12px;
+  padding: 12px 16px;
+  border-left: 3px solid #7ea394;
+}
diff --git a/.firebase/hosting.ZGlzdA.cache b/.firebase/hosting.ZGlzdA.cache
--- a/.firebase/hosting.ZGlzdA.cache
+++ b/.firebase/hosting.ZGlzdA.cache
-robots.txt,1742097821728,c17e70846d7031bb27102edfb33b59d1e3e40a8e8e8097af75b7766e7fffc250
-index.html,1742097821765,1e6cd8c9935be4d06e2a0793af19abd82ef485e4ec96b0e4f410c3c8ffee9700
-service-worker.js.map,1742097821765,7a85e9334f2f5a0571a997e632037565ed8b607c95bfd52008e6a87b7d38466e
-service-worker.js,1742097821765,16d6717e4d931d81880f5ad103c288c109c3dda2f0dc68b004bed5c6e90f56a6
-manifest.json,1742097821722,271d366759937d7a7fc99f13b8bf2a2e088cdf5cf39b2d2a9051b676934ba276
-workbox-6567b62a.js,1742097821765,4ccf1afa18aaef5292100783bc70ab22b53b4a4ed87b0a6de1e73aad61dd5d5d
-favicon.ico,1742097821728,7a1a72943a1b2d7ed41d75574715a454ac9bfb21b636100c59ccd713ca3e86e1
-img/icons/safari-pinned-tab.svg,1742097821734,730d14831ff7235b452ff15b4d31888bc2a4b0259ed4461188c0927b0c525250
-img/icons/mstile-150x150.png,1742097821734,f3f1d499b7dcfd19aa6e3a9d5c6e16c1d610728b6892f4756352bade7581c196
-img/icons/msapplication-icon-144x144.png,1742097821733,27b3b62de2e36ac452e86079762d3cfd37c33dc8cbde0a7c5657e5a7c32d971a
-img/icons/favicon-16x16.png,1742097821733,49be9fd84d9ec224026dded41b18f9466f637c9be4a910f816e4b9cbba468682
-img/icons/favicon-32x32.png,1742097821733,f8834f79a7627bad1084de9b49915dd39a481895819b8f1242f6a57302818e65
-img/icons/apple-touch-icon.png,1742097821733,1b2b715b4793871476d9a21ca13df2326a38dd56c9eca517f5ecc1fcd47313bb
-img/icons/apple-touch-icon-76x76.png,1742097821734,65d6c498ad60f94b338df3f1f4551303ec84306ecb1c7e615ed64489fffc8b28
-img/icons/apple-touch-icon-60x60.png,1742097821733,10916e81b10f37cf95567fc91ccb0eb6e92c2cf1346aa4df04f384b06aff2151
-img/icons/apple-touch-icon-152x152.png,1742097821733,b311312e0c6003846dbd8dd07b21a1850f0592821b752eb679d0fad2676ed243
-img/icons/apple-touch-icon-180x180.png,1742097821733,9b4b43fbebb97c9ff395eb49dc34be815a9f0b70d46a00b0c605902ccf32aefa
-img/icons/apple-touch-icon-120x120.png,1742097821733,1fbd32003c38ff6eadeab867da5ff1e7f2bab8d51a49bc0606a1f018281a98b5
-img/icons/android-chrome-maskable-192x192.png,1742097821733,3d32e23ff67870b070c8b878159a13228ca153b6c198e45312c0778c6d626ac2
-img/icons/android-chrome-192x192.png,1742097821733,a1c1aac44befbb68115b2f6f57506995b6caf4337a45bde60ef701bec5a0a4f7
-icons/icon-96x96.png,1742097821732,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
-icons/icon-72x72.png,1742097821732,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-icons/icon-152x152.png,1742097821729,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
-icons/icon-144x144.png,1742097821729,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/favicon-32x32.png,1742097821729,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
-icons/favicon-16x16.png,1742097821728,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
-icons/icon-128x128.png,1742097821732,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
-icons/AppIcons/android/mipmap-hdpi/ic_launcher.png,1742097821765,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-icons/AppIcons/android/mipmap-mdpi/ic_launcher.png,1742097821765,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
-icons/AppIcons/android/mipmap-xxhdpi/ic_launcher.png,1742097821766,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/Contents.json,1742097821738,362544adc9abbc072e932a66cdd36fb66f89f0751e9953a465fde292dd8bf78d
-icons/AppIcons/android/mipmap-xhdpi/ic_launcher.png,1742097821765,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/92.png,1742097821738,5fb30fd614b6966b7511e70c8eff9847be494d0c47809e2ff39b61ab4a62261d
-img/intro.3fb2076a.png,1742097821726,f28d709c01ce69bfd1101b876b6a5ccabf8d7044a5e690c2a01397bca03e37cc
-img/icons/android-chrome-maskable-512x512.png,1742097821733,39b440f18b280d6f2c4ed960e00e2a9ef71bb163fadb114636f2b6d56a684fcd
-img/icons/android-chrome-512x512.png,1742097821733,b0b7d48a6cce8b3af50114fb56b94081434dfc1f57d9109027759d4b11f553d1
-icons/icon-180x180.png,1742097821729,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
-icons/icon-167x167.png,1742097821729,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
-icons/icon-192x192.png,1742097821732,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
-icons/icon-384x384.png,1742097821732,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
-icons/AppIcons/android/mipmap-xxxhdpi/ic_launcher.png,1742097821738,6eef9522a8fc62711ba09ca7df038b53b34ae89b6d62fedbdee2382f19a63361
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/88.png,1742097821738,f5ff7e5f4ae4833a76c2d60c85b98d65b5866c307a95f79c7e758a320afebb49
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/87.png,1742097821738,114a78af463a802f07c487ec04a77cc72cb24471a791f17f6f5cbdc409cd2e16
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/76.png,1742097821737,7fbc388a2b89ad4d588eef816b42ab08a4342d4084f1d0f25c8d1d4599cfc2af
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/72.png,1742097821737,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/80.png,1742097821738,c18a161ca302d9fa25c6e51eb5086c2794df20a8ece066ebdf63ac50cc336f4e
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/64.png,1742097821737,fa3cb4dc5bcfee3e9f2a62f4f1120f620db83656d7febd23f9e310dd5ec9e50a
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/66.png,1742097821737,669c5c3d9107922c46ec2a5c521409139b217fcbf1a5f3ffbbd2d37d0fb0c8be
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/60.png,1742097821737,285f2cd6793a05db820bed6fe0274b6c79b04716a57938f34f74248e0ec174ed
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/58.png,1742097821737,1838c9e4ab0196226253283b3cd3b1939d8d487d6ebc2261b1d70f00de033952
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/57.png,1742097821736,fe269dc44c92a2ea8b2eae6f6b374ecbd9e018f358b0d1bc4f4c6d171f22bd31
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/55.png,1742097821736,5dca7679805c5a99dd78f55d9e4564787bef7a73853dd04b26b1da700aec2c78
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/50.png,1742097821736,671c3ef098c01c79da69f6157cfbd3209c90d7fa6353d134f3c4b175450f5b36
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/48.png,1742097821736,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/40.png,1742097821736,727716cb4a213fe7eb7dbceae439de6171984436e528f93f25d43922a3fb4d74
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/32.png,1742097821736,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/29.png,1742097821736,19c91fd2ec9fee3ca27ee746bf3cb1415c3bd5e7fc58050d5d3367acbcf8110b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/20.png,1742097821735,881068aecdb5edff1dc811b94431339172ea9df83470ee26b95b63569c8f55b3
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/16.png,1742097821734,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/128.png,1742097821735,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/152.png,1742097821734,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/144.png,1742097821735,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/120.png,1742097821735,805fd7fb45f3ef018b22d60ebc4a82a83eaa1ced066a078a80fd3884bbfaa34b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/114.png,1742097821735,5bb5dea1793efb6c336b918b96307dade54d93b29e79966425013fd8b424de3e
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/108.png,1742097821735,291d2cc48cdce03737c4743b33677a11bbc26ea455faf11dd0680eccb5fa0a93
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/102.png,1742097821735,743eff5509b211feea412bb4648a4107612b0d44723587b3650374fd08f3beb9
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/258.png,1742097821736,73121b333e5167762f69d7237e1fca45d09dc970a133b82f18b4f5319e8d8750
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/100.png,1742097821734,912fc9c7eb847eb228f43b53be007fda948e13c818fae49f77557fa8fc9d2a87
-fonts/NotoSansKR-Regular.fa699eee.woff2,1742097821723,3e0d6c75893a1e3eb71a836eaac1ee22f2e8d9e1e6d975e2e6aecdebe1fa69ec
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/256.png,1742097821736,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/196.png,1742097821735,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/234.png,1742097821736,b319598a34683bfa303efc9fde15e0b85039f62b181a9740da8b1ac1ed7a455b
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/216.png,1742097821735,cd8eafd93a015dff200946c8abc8a415e547debd55acbf4a9f2664fa5cbd0c73
-workbox-6567b62a.js.map,1742097821765,acde288a8fff0a72bef7b2be1938473f23e5bdfac3930c3ed2840b6aeeb93778
-fonts/NotoSansKR-Regular.16c9adda.eot,1742097821724,1eed3ade4776b114edc1e65fbcd1ecf3ff8b3d7683f82be5792dca515d9b9fc2
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/180.png,1742097821735,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/172.png,1742097821735,dc5201d988ed907e53a2661f51e24d1c245391684bf8c46cb27e5f392f7bf020
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/167.png,1742097821734,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
-fonts/NotoSansKR-Medium.c67b45b3.eot,1742097821725,044b0b2e2c560b3e192387a24919069b30080351db06c2c682326435ed9fb3f8
-icons/icon-512x512.png,1742097821732,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-icons/AppIcons/playstore.png,1742097821733,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-fonts/NotoSansKR-Medium.4278862d.woff2,1742097821722,379528e3ab8f3a1a95ee5a0f0704abd215bee606edb9b55cc73d039c9152220e
-fonts/NotoSansKR-Bold.74d81029.woff2,1742097821722,8678d504518d952238b8ad29079e275ca70c84bc657c4e838479cc615bca9ddc
-fonts/NotoSansKR-Bold.16338ec6.eot,1742097821723,fe1d47ef3911839504742c8d64bf3600cbd916dccf99c75aef7d57006f58ec71
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/512.png,1742097821736,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
-css/app.eee1ebd9.css,1742097821726,9cf08651641252f404840628e76212b1bb6c786710af20f30544a551309798ce
-icons/AppIcons/appstore.png,1742097821733,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
-js/app.0283cc41.js,1742097821726,d234bbd4e6edfd00881ca912506f62458a9276c32a0c6f333a53b4cac815c881
-icons/AppIcons/Assets.xcassets/AppIcon.appiconset/1024.png,1742097821735,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
-img/basic_image.20adb660.png,1742097821724,7cc34db9539ce287ffacb458283f16bf004543649f8a6054692a704425de5858
-css/chunk-vendors.69941987.css,1742097821724,4cc420b177199727aec193711f592d57ffc5ab6eadbe896e9de34d682dac3931
-js/app.0283cc41.js.map,1742097821765,cbb387668924d99d67a680b5e199e5129332ad354cfd5be32676b8579ceaca35
-js/chunk-vendors.4eddb7cb.js,1742097821728,b12e4bb33e5efd8a07fee2664d50f8652750a3df7041e3ad11d20e5af458b849
-fonts/NotoSansKR-Regular.cc1eb30f.otf,1742097821726,966de43c27bcf429bb0e7d51ec7d3370a6866142ddc7fe19e27d12e281be27c4
-fonts/NotoSansKR-Medium.9b254b95.otf,1742097821724,241896ddfb621581c7955d58e65dc19b591da93472727e22b2af8311176d8374
-fonts/NotoSansKR-Bold.d5ea8c02.otf,1742097821723,d24024f39e5917f95ad662794a0ac50bb46ccd83e80a142cec5ae0b2fbf1a295
-js/chunk-vendors.4eddb7cb.js.map,1742097821766,4bb403c231be984781ac64b90458aefdf8fede709e1019126f0925598f31bde2
+service-worker.js,1742689603683,2c4c458813aa721b8ad7c8db8a6563de10fad46f7752e64920cce244c7ec7506
+manifest.json,1742689603638,271d366759937d7a7fc99f13b8bf2a2e088cdf5cf39b2d2a9051b676934ba276
+service-worker.js.map,1742689603681,194e5e5ed0a98be63cb84945ae38a0800227f1c856211af84d97e70c4e16e22d
+robots.txt,1742689603640,c17e70846d7031bb27102edfb33b59d1e3e40a8e8e8097af75b7766e7fffc250
+workbox-6567b62a.js,1742689603683,4ccf1afa18aaef5292100783bc70ab22b53b4a4ed87b0a6de1e73aad61dd5d5d
+index.html,1742689603681,ec18910303b7f0b75b4f044a508001a7b86e4ed55e06949d88da174bea0fb907
+favicon.ico,1742689603640,7a1a72943a1b2d7ed41d75574715a454ac9bfb21b636100c59ccd713ca3e86e1
+img/icons/safari-pinned-tab.svg,1742689603647,730d14831ff7235b452ff15b4d31888bc2a4b0259ed4461188c0927b0c525250
+img/icons/mstile-150x150.png,1742689603647,f3f1d499b7dcfd19aa6e3a9d5c6e16c1d610728b6892f4756352bade7581c196
+img/icons/favicon-32x32.png,1742689603646,f8834f79a7627bad1084de9b49915dd39a481895819b8f1242f6a57302818e65
+img/icons/msapplication-icon-144x144.png,1742689603646,27b3b62de2e36ac452e86079762d3cfd37c33dc8cbde0a7c5657e5a7c32d971a
+img/icons/apple-touch-icon.png,1742689603646,1b2b715b4793871476d9a21ca13df2326a38dd56c9eca517f5ecc1fcd47313bb
+img/icons/favicon-16x16.png,1742689603646,49be9fd84d9ec224026dded41b18f9466f637c9be4a910f816e4b9cbba468682
+img/icons/apple-touch-icon-152x152.png,1742689603646,b311312e0c6003846dbd8dd07b21a1850f0592821b752eb679d0fad2676ed243
+img/icons/apple-touch-icon-180x180.png,1742689603646,9b4b43fbebb97c9ff395eb49dc34be815a9f0b70d46a00b0c605902ccf32aefa
+img/icons/apple-touch-icon-120x120.png,1742689603646,1fbd32003c38ff6eadeab867da5ff1e7f2bab8d51a49bc0606a1f018281a98b5
+img/icons/apple-touch-icon-76x76.png,1742689603646,65d6c498ad60f94b338df3f1f4551303ec84306ecb1c7e615ed64489fffc8b28
+img/icons/apple-touch-icon-60x60.png,1742689603646,10916e81b10f37cf95567fc91ccb0eb6e92c2cf1346aa4df04f384b06aff2151
+img/icons/android-chrome-maskable-192x192.png,1742689603646,3d32e23ff67870b070c8b878159a13228ca153b6c198e45312c0778c6d626ac2
+icons/icon-72x72.png,1742689603645,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+img/icons/android-chrome-192x192.png,1742689603645,a1c1aac44befbb68115b2f6f57506995b6caf4337a45bde60ef701bec5a0a4f7
+icons/icon-96x96.png,1742689603645,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
+icons/icon-144x144.png,1742689603644,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/icon-152x152.png,1742689603644,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
+icons/favicon-32x32.png,1742689603644,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
+icons/favicon-16x16.png,1742689603644,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
+icons/icon-128x128.png,1742689603644,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
+icons/AppIcons/android/mipmap-xhdpi/ic_launcher.png,1742689603662,84d9991adbf2c084694b548b7dc4583692719c2a5b5a39561abba3f3c65a23f8
+icons/AppIcons/android/mipmap-xxhdpi/ic_launcher.png,1742689603662,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/AppIcons/android/mipmap-mdpi/ic_launcher.png,1742689603651,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
+icons/AppIcons/android/mipmap-hdpi/ic_launcher.png,1742689603648,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+img/intro.3fb2076a.png,1742689603637,f28d709c01ce69bfd1101b876b6a5ccabf8d7044a5e690c2a01397bca03e37cc
+img/icons/android-chrome-maskable-512x512.png,1742689603646,39b440f18b280d6f2c4ed960e00e2a9ef71bb163fadb114636f2b6d56a684fcd
+img/icons/android-chrome-512x512.png,1742689603646,b0b7d48a6cce8b3af50114fb56b94081434dfc1f57d9109027759d4b11f553d1
+icons/icon-192x192.png,1742689603644,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
+icons/icon-384x384.png,1742689603644,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
+icons/icon-167x167.png,1742689603644,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
+icons/icon-180x180.png,1742689603644,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
+icons/AppIcons/android/mipmap-xxxhdpi/ic_launcher.png,1742689603681,6eef9522a8fc62711ba09ca7df038b53b34ae89b6d62fedbdee2382f19a63361
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/Contents.json,1742689603651,362544adc9abbc072e932a66cdd36fb66f89f0751e9953a465fde292dd8bf78d
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/92.png,1742689603651,5fb30fd614b6966b7511e70c8eff9847be494d0c47809e2ff39b61ab4a62261d
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/88.png,1742689603650,f5ff7e5f4ae4833a76c2d60c85b98d65b5866c307a95f79c7e758a320afebb49
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/87.png,1742689603651,114a78af463a802f07c487ec04a77cc72cb24471a791f17f6f5cbdc409cd2e16
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/80.png,1742689603650,c18a161ca302d9fa25c6e51eb5086c2794df20a8ece066ebdf63ac50cc336f4e
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/76.png,1742689603650,7fbc388a2b89ad4d588eef816b42ab08a4342d4084f1d0f25c8d1d4599cfc2af
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/72.png,1742689603650,5f13b0d52ec263b3479f68ebfe481e9555456a4376b06c71917dcca0023ce4da
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/64.png,1742689603650,fa3cb4dc5bcfee3e9f2a62f4f1120f620db83656d7febd23f9e310dd5ec9e50a
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/66.png,1742689603650,669c5c3d9107922c46ec2a5c521409139b217fcbf1a5f3ffbbd2d37d0fb0c8be
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/60.png,1742689603650,285f2cd6793a05db820bed6fe0274b6c79b04716a57938f34f74248e0ec174ed
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/58.png,1742689603649,1838c9e4ab0196226253283b3cd3b1939d8d487d6ebc2261b1d70f00de033952
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/57.png,1742689603649,fe269dc44c92a2ea8b2eae6f6b374ecbd9e018f358b0d1bc4f4c6d171f22bd31
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/55.png,1742689603649,5dca7679805c5a99dd78f55d9e4564787bef7a73853dd04b26b1da700aec2c78
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/50.png,1742689603649,671c3ef098c01c79da69f6157cfbd3209c90d7fa6353d134f3c4b175450f5b36
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/48.png,1742689603649,cd3d6398e483263d7b1d783102b8dfe8be9df864987b036632f78db282f451a9
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/40.png,1742689603649,727716cb4a213fe7eb7dbceae439de6171984436e528f93f25d43922a3fb4d74
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/32.png,1742689603649,7820d8b107ffa3e9be5c71f7e0eea434d8e38aa7f62e51eea3dda61125530e6c
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/29.png,1742689603649,19c91fd2ec9fee3ca27ee746bf3cb1415c3bd5e7fc58050d5d3367acbcf8110b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/20.png,1742689603649,881068aecdb5edff1dc811b94431339172ea9df83470ee26b95b63569c8f55b3
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/16.png,1742689603647,8c53ecbd314250e0d3825883e6538ba9c6543ea72c76e740f04d936ec061b4fe
+workbox-6567b62a.js.map,1742689603683,acde288a8fff0a72bef7b2be1938473f23e5bdfac3930c3ed2840b6aeeb93778
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/152.png,1742689603647,2ea3661d6603a587908287d8bf386e7740a31fa6b2df1d5e52aaf85c1bf358a5
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/144.png,1742689603648,29d8affa2885a8afd41465f982cea612b5bfc912eaf56a01a6cfcc5ce9773166
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/128.png,1742689603648,4726093d9885855f01f717127d0e08aee0fca7945d151c87924135603bfa17b4
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/120.png,1742689603648,805fd7fb45f3ef018b22d60ebc4a82a83eaa1ced066a078a80fd3884bbfaa34b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/114.png,1742689603647,5bb5dea1793efb6c336b918b96307dade54d93b29e79966425013fd8b424de3e
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/258.png,1742689603649,73121b333e5167762f69d7237e1fca45d09dc970a133b82f18b4f5319e8d8750
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/108.png,1742689603648,291d2cc48cdce03737c4743b33677a11bbc26ea455faf11dd0680eccb5fa0a93
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/256.png,1742689603649,0ccbbd8219081709e97e684e8d64d681810b2daec6687e3ff1babae108a35c95
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/102.png,1742689603647,743eff5509b211feea412bb4648a4107612b0d44723587b3650374fd08f3beb9
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/100.png,1742689603647,912fc9c7eb847eb228f43b53be007fda948e13c818fae49f77557fa8fc9d2a87
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/234.png,1742689603649,b319598a34683bfa303efc9fde15e0b85039f62b181a9740da8b1ac1ed7a455b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/216.png,1742689603649,cd8eafd93a015dff200946c8abc8a415e547debd55acbf4a9f2664fa5cbd0c73
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/196.png,1742689603648,0fa8fdfb392575acc2beb27429f70b7bcd9a06ad08884b2d362f72dba624ba0b
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/180.png,1742689603648,d5ba804119fb34acc9bf286c7e420a30ea6648516eb9e88e27513ba35ffd4f35
+fonts/NotoSansKR-Regular.fa699eee.woff2,1742689603638,3e0d6c75893a1e3eb71a836eaac1ee22f2e8d9e1e6d975e2e6aecdebe1fa69ec
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/172.png,1742689603648,dc5201d988ed907e53a2661f51e24d1c245391684bf8c46cb27e5f392f7bf020
+icons/icon-512x512.png,1742689603644,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/167.png,1742689603648,ed283d5681120ed4b732b182ddb1a97026b52461db2bdc0e719cd9aa51846b3b
+icons/AppIcons/playstore.png,1742689603647,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+fonts/NotoSansKR-Regular.16c9adda.eot,1742689603637,1eed3ade4776b114edc1e65fbcd1ecf3ff8b3d7683f82be5792dca515d9b9fc2
+fonts/NotoSansKR-Medium.c67b45b3.eot,1742689603637,044b0b2e2c560b3e192387a24919069b30080351db06c2c682326435ed9fb3f8
+fonts/NotoSansKR-Medium.4278862d.woff2,1742689603636,379528e3ab8f3a1a95ee5a0f0704abd215bee606edb9b55cc73d039c9152220e
+fonts/NotoSansKR-Bold.74d81029.woff2,1742689603637,8678d504518d952238b8ad29079e275ca70c84bc657c4e838479cc615bca9ddc
+fonts/NotoSansKR-Bold.16338ec6.eot,1742689603638,fe1d47ef3911839504742c8d64bf3600cbd916dccf99c75aef7d57006f58ec71
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/512.png,1742689603649,8ba41e5b95bed7371b548942916610c41f1a61a9bdb95f1d4b90b89fbb4422d6
+css/app.8ac92e83.css,1742689603637,b6d4a4312953a9ef3cb14a18d0decbed03fa3aae0cd5f9f8d0b5ce7c2ae226cd
+icons/AppIcons/appstore.png,1742689603647,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
+js/app.87c181e2.js,1742689603637,9e22f713c845d1450ed6176163bb5ef42378c14daab4f41ed2b3ed31519d14ea
+img/basic_image.20adb660.png,1742689603637,7cc34db9539ce287ffacb458283f16bf004543649f8a6054692a704425de5858
+icons/AppIcons/Assets.xcassets/AppIcon.appiconset/1024.png,1742689603648,627cb3e48d3e67ef660420f19f730ce079e54f3cd7dda5c8f8c9472bdca8152b
+css/chunk-vendors.b69de080.css,1742689603640,00d34984c341fed81528f24954550b5084be21aceca2542b712a751215ed3be3
+js/295.34810280.js,1742689603637,7ddc7c8716b6b67c0e4c4e7e45146acc0b95068fea2fcaa78b8ed87a44a749ac
+js/app.87c181e2.js.map,1742689603662,98fdcaf53e7d3f431a026b817c054f4c50cd9b51b09a11f2507999f53d9c95cf
+js/chunk-vendors.9cffd800.js,1742689603644,b21650f8cf63a5638c58b0a4b3a4bdec8e9770324c69b900e9ccd14aa89cbeca
+js/295.34810280.js.map,1742689603681,c3c782da84e668634b8734d0c6f7febdf2e1c89755891297692d1db99cc29113
+fonts/NotoSansKR-Medium.9b254b95.otf,1742689603637,241896ddfb621581c7955d58e65dc19b591da93472727e22b2af8311176d8374
+fonts/NotoSansKR-Regular.cc1eb30f.otf,1742689603638,966de43c27bcf429bb0e7d51ec7d3370a6866142ddc7fe19e27d12e281be27c4
+fonts/NotoSansKR-Bold.d5ea8c02.otf,1742689603639,d24024f39e5917f95ad662794a0ac50bb46ccd83e80a142cec5ae0b2fbf1a295
+js/chunk-vendors.9cffd800.js.map,1742689603683,8ead70a3d447c5faaec1ab824bf3f9d1ed34f61731a548a7629c9e0e068c4dab
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
-          <v-tab>새가족 관리</v-tab>
+          <v-tab>새가족 관리(개발중)</v-tab>
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
-        <v-row>
-          <v-col cols="12" md="4">
-            <organization-tree
-              :organization-tree="organizationTree"
-              @organization-selected="handleOrganizationSelect"
-              @edit-organization="openOrganizationDialog"
-              @delete-organization="confirmDeleteOrganization"
-              @tree-input="(val) => console.log('트리뷰 입력 이벤트:', val)"
-              :expanded-org-ids="expandedOrganizationIds"
-            />
-          </v-col>
-          <v-col cols="12" md="8">
-            <member-list
-              :selected-organization="selectedOrganization"
-              :members="members"
-              :loading="loadingMembers"
-              @edit-member="openMemberDialog"
-              @delete-member="confirmDeleteMember"
-            />
-          </v-col>
-        </v-row>
+        <v-tabs
+          v-model="activeTab"
+          background-color="transparent"
+          color="#7EA394"
+          grow
+        >
+          <v-tab>조직 & 멤버 관리</v-tab>
+          <v-tab>새가족 관리</v-tab>
+        </v-tabs>
+
+        <v-tabs-items v-model="activeTab">
+          <!-- 조직 & 멤버 관리 탭 -->
+          <v-tab-item>
+            <v-row>
+              <v-col cols="12" md="4">
+                <organization-tree
+                  :organization-tree="organizationTree"
+                  @organization-selected="handleOrganizationSelect"
+                  @edit-organization="openOrganizationDialog"
+                  @delete-organization="confirmDeleteOrganization"
+                  @tree-input="(val) => console.log('트리뷰 입력 이벤트:', val)"
+                  :expanded-org-ids="expandedOrganizationIds"
+                />
+              </v-col>
+              <v-col cols="12" md="8">
+                <member-list
+                  :selected-organization="selectedOrganization"
+                  :members="members"
+                  :loading="loadingMembers"
+                  @edit-member="openMemberDialog"
+                  @delete-member="confirmDeleteMember"
+                />
+              </v-col>
+            </v-row>
+          </v-tab-item>
+
+          <!-- 새가족 관리 탭 -->
+          <v-tab-item>
+            <v-row>
+              <v-col cols="12">
+                <v-card flat>
+                  <v-card-title>
+                    <div class="d-flex align-center w-100">
+                      <span class="text-h6">새가족 목록</span>
+                      <v-spacer></v-spacer>
+
+                      <!-- 날짜 필터 개선 -->
+                      <div class="d-flex align-center">
+                        <!-- 시작일 -->
+                        <v-menu
+                          v-model="startDatePickerMenu"
+                          :close-on-content-click="false"
+                          transition="scale-transition"
+                          offset-y
+                          min-width="290px"
+                        >
+                          <template v-slot:activator="{ on, attrs }">
+                            <v-text-field
+                              v-model="startDate"
+                              label="시작일"
+                              prepend-icon="mdi-calendar-start"
+                              readonly
+                              v-bind="attrs"
+                              v-on="on"
+                              background-color="#FFFFFF"
+                              color="#7EA394"
+                              solo
+                              rounded
+                              flat
+                              dense
+                              hide-details="auto"
+                              class="max-width-150 mr-2"
+                            ></v-text-field>
+                          </template>
+                          <v-date-picker
+                            v-model="startDate"
+                            @input="startDatePickerMenu = false"
+                          ></v-date-picker>
+                        </v-menu>
+
+                        <!-- 종료일 -->
+                        <v-menu
+                          v-model="endDatePickerMenu"
+                          :close-on-content-click="false"
+                          transition="scale-transition"
+                          offset-y
+                          min-width="290px"
+                        >
+                          <template v-slot:activator="{ on, attrs }">
+                            <v-text-field
+                              v-model="endDate"
+                              label="종료일"
+                              prepend-icon="mdi-calendar-end"
+                              readonly
+                              v-bind="attrs"
+                              v-on="on"
+                              background-color="#FFFFFF"
+                              color="#7EA394"
+                              solo
+                              rounded
+                              flat
+                              dense
+                              hide-details="auto"
+                              class="max-width-150"
+                            ></v-text-field>
+                          </template>
+                          <v-date-picker
+                            v-model="endDate"
+                            @input="endDatePickerMenu = false"
+                          ></v-date-picker>
+                        </v-menu>
+
+                        <v-btn
+                          text
+                          small
+                          color="#7EA394"
+                          class="ml-3"
+                          @click="clearDateFilter"
+                        >
+                          전체 보기
+                        </v-btn>
+                      </div>
+                    </div>
+                  </v-card-title>
+
+                  <!-- 그룹화 선택 -->
+                  <v-card-subtitle>
+                    <div class="d-flex align-center mb-2">
+                      <span class="font-weight-medium mr-4"
+                        >날짜별 그룹핑:</span
+                      >
+                      <v-btn-toggle
+                        v-model="dateGrouping"
+                        mandatory
+                        dense
+                        color="#7EA394"
+                        class="rounded-lg"
+                      >
+                        <v-btn small value="none">그룹화 없음</v-btn>
+                        <v-btn small value="week">주차별</v-btn>
+                        <v-btn small value="day">일별</v-btn>
+                        <v-btn small value="month">월별</v-btn>
+                        <v-btn small value="year">년도별</v-btn>
+                      </v-btn-toggle>
+                    </div>
+                  </v-card-subtitle>
+
+                  <!-- 날짜별 그룹화된 새가족 목록 -->
+                  <div v-if="dateGrouping !== 'none'">
+                    <div
+                      v-for="(group, groupKey) in groupedNewMembers"
+                      :key="groupKey"
+                      class="mb-6"
+                    >
+                      <v-divider></v-divider>
+                      <div class="group-header pa-2 pl-4">
+                        <span class="text-subtitle-1 font-weight-bold"
+                          >{{ groupKey }} ({{ group.length }}명)</span
+                        >
+                      </div>
+                      <v-data-table
+                        :headers="newMembersHeaders"
+                        :items="group"
+                        hide-default-footer
+                        disable-pagination
+                        class="elevation-0"
+                      >
+                        <template #[`item.registrationDate`]="{ item }">
+                          {{ formatDate(item.registrationDate) }}
+                        </template>
+                        <template #[`item.genderType`]="{ item }">
+                          {{ item.genderType === "M" ? "남성" : "여성" }}
+                        </template>
+                        <template #[`item.actions`]="{ item }">
+                          <v-icon
+                            small
+                            class="mr-2"
+                            @click="openMemberDialog(item)"
+                          >
+                            mdi-pencil
+                          </v-icon>
+                          <v-icon small @click="confirmDeleteMember(item)">
+                            mdi-delete
+                          </v-icon>
+                        </template>
+                      </v-data-table>
+                    </div>
+                  </div>
+
+                  <!-- 기존 테이블 (그룹화 없을 때) -->
+                  <v-data-table
+                    v-else
+                    :headers="newMembersHeaders"
+                    :items="filteredNewMembers"
+                    :loading="loadingAllMembers"
+                    :items-per-page="10"
+                    :footer-props="{
+                      'items-per-page-options': [10, 20, 50, 100],
+                    }"
+                    class="elevation-1"
+                  >
+                    <template #[`item.registrationDate`]="{ item }">
+                      {{ formatDate(item.registrationDate) }}
+                    </template>
+                    <template #[`item.genderType`]="{ item }">
+                      {{ item.genderType === "M" ? "남성" : "여성" }}
+                    </template>
+                    <template #[`item.actions`]="{ item }">
+                      <v-icon
+                        small
+                        class="mr-2"
+                        @click="openMemberDialog(item)"
+                      >
+                        mdi-pencil
+                      </v-icon>
+                      <v-icon small @click="confirmDeleteMember(item)">
+                        mdi-delete
+                      </v-icon>
+                    </template>
+                    <template #no-data>
+                      <div class="text-center pa-4">
+                        <p v-if="loadingAllMembers">
+                          새가족 정보를 불러오는 중입니다...
+                        </p>
+                        <p v-else>등록된 새가족이 없습니다.</p>
+                      </div>
+                    </template>
+                  </v-data-table>
+                </v-card>
+              </v-col>
+            </v-row>
+          </v-tab-item>
+        </v-tabs-items>
+
+      activeTab: 0,
+      datePickerMenu: false,
+      selectedDate: null,
+      newMembersHeaders: [
+        { text: "이름", value: "name" },
+        { text: "성별", value: "genderType" },
+        { text: "조직", value: "organizationName" },
+        { text: "등록일", value: "registrationDate" },
+        { text: "관리", value: "actions", sortable: false, align: "right" },
+      ],
+      allNewMembers: [], // 모든 새가족 데이터
+      loadingAllMembers: false,
+      startDatePickerMenu: false,
+      startDate: null,
+      endDatePickerMenu: false,
+      endDate: null,
+      dateGrouping: "week",
+
+    // 날짜별 필터링된 새가족 목록
+    filteredNewMembers() {
+      if (!this.allNewMembers || !Array.isArray(this.allNewMembers)) {
+        return [];
+      }
+
+      // 날짜 필터가 설정된 경우
+      if (this.startDate && this.endDate) {
+        return this.allNewMembers.filter((member) => {
+          if (!member.registrationDate) return false;
+
+          // YYYY-MM-DD 형식으로 변환
+          let memberDate = member.registrationDate;
+          if (memberDate.length === 8) {
+            // YYYYMMDD 형식을 YYYY-MM-DD로 변환
+            memberDate = `${memberDate.substring(0, 4)}-${memberDate.substring(
+              4,
+              6
+            )}-${memberDate.substring(6, 8)}`;
+          }
+
+          return memberDate >= this.startDate && memberDate <= this.endDate;
+        });
+      }
+
+      // 날짜 필터가 없는 경우 모든 새가족 목록 반환
+      return this.allNewMembers;
+    },
+
+    // 날짜별 그룹화된 새가족 목록
+    groupedNewMembers() {
+      const members = this.filteredNewMembers;
+      if (
+        !members ||
+        !Array.isArray(members) ||
+        !this.dateGrouping ||
+        this.dateGrouping === "none"
+      ) {
+        return {};
+      }
+
+      const grouped = {};
+
+      // 주차별 그룹핑을 위한 날짜 계산 함수
+      const getWeekGroup = (dateStr) => {
+        const today = new Date();
+        const targetDate = new Date(dateStr);
+
+        // 현재 날짜의 주의 시작일(일요일)과 종료일(토요일) 구하기
+        const currentWeekStart = new Date(today);
+        const dayOfWeek = today.getDay(); // 0: 일요일, 1: 월요일, ..., 6: 토요일
+        currentWeekStart.setDate(today.getDate() - dayOfWeek); // 이번주 일요일
+
+        const oneWeekAgo = new Date(currentWeekStart);
+        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7); // 저번주 일요일
+
+        const twoWeeksAgo = new Date(oneWeekAgo);
+        twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 7); // 저저번주 일요일
+
+        const threeWeeksAgo = new Date(twoWeeksAgo);
+        threeWeeksAgo.setDate(threeWeeksAgo.getDate() - 7); // 3주 전 일요일
+
+        const fourWeeksAgo = new Date(threeWeeksAgo);
+        fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 7); // 4주 전 일요일
+
+        // 어느 주차에 속하는지 확인
+        if (targetDate >= currentWeekStart) {
+          return { key: "thisWeek", label: "이번 주" };
+        } else if (targetDate >= oneWeekAgo) {
+          return { key: "lastWeek", label: "지난 주" };
+        } else if (targetDate >= twoWeeksAgo) {
+          return { key: "twoWeeksAgo", label: "2주 전" };
+        } else if (targetDate >= threeWeeksAgo) {
+          return { key: "threeWeeksAgo", label: "3주 전" };
+        } else if (targetDate >= fourWeeksAgo) {
+          return { key: "fourWeeksAgo", label: "4주 전" };
+        } else {
+          // 4주 이전의 날짜는 월별로 그룹화
+          const month = targetDate.getMonth() + 1;
+          const year = targetDate.getFullYear();
+          return {
+            key: `${year}-${month.toString().padStart(2, "0")}`,
+            label: `${year}년 ${month}월`,
+          };
+        }
+      };
+
+      for (const member of members) {
+        if (!member.registrationDate) continue;
+
+        // YYYY-MM-DD 형식으로 변환
+        let dateStr = member.registrationDate;
+        if (dateStr.length === 8) {
+          // YYYYMMDD 형식을 YYYY-MM-DD로 변환
+          const year = dateStr.substring(0, 4);
+          const month = dateStr.substring(4, 6);
+          const day = dateStr.substring(6, 8);
+          dateStr = `${year}-${month}-${day}`;
+        }
+
+        // 그룹화 기준에 따라 키 생성
+        let groupKey = "";
+
+        if (this.dateGrouping === "week") {
+          // 주차별 그룹화
+          const weekGroup = getWeekGroup(dateStr);
+          groupKey = weekGroup.key;
+        } else if (this.dateGrouping === "day") {
+          // 일별 그룹화: YYYY-MM-DD
+          groupKey = dateStr;
+        } else if (this.dateGrouping === "month") {
+          // 월별 그룹화: YYYY-MM
+          groupKey = dateStr.substring(0, 7);
+        } else if (this.dateGrouping === "year") {
+          // 연별 그룹화: YYYY
+          groupKey = dateStr.substring(0, 4);
+        }
+
+        if (!groupKey) continue;
+
+        // 그룹에 추가
+        if (!grouped[groupKey]) {
+          grouped[groupKey] = [];
+        }
+        grouped[groupKey].push(member);
+      }
+
+      // 그룹 키 정렬 및 표시 이름 설정
+      const sortedGrouped = {};
+
+      // 주차별 그룹핑인 경우 특별 처리
+      if (this.dateGrouping === "week") {
+        // 주차 순서 정의
+        const weekOrder = [
+          "thisWeek",
+          "lastWeek",
+          "twoWeeksAgo",
+          "threeWeeksAgo",
+          "fourWeeksAgo",
+        ];
+
+        // 먼저 주차 그룹 정렬
+        weekOrder.forEach((weekKey) => {
+          if (grouped[weekKey]) {
+            // 주차별 라벨 설정
+            let label;
+            switch (weekKey) {
+              case "thisWeek":
+                label = "이번 주";
+                break;
+              case "lastWeek":
+                label = "지난 주";
+                break;
+              case "twoWeeksAgo":
+                label = "2주 전";
+                break;
+              case "threeWeeksAgo":
+                label = "3주 전";
+                break;
+              case "fourWeeksAgo":
+                label = "4주 전";
+                break;
+              default:
+                label = weekKey;
+            }
+
+            sortedGrouped[label] = grouped[weekKey];
+          }
+        });
+
+        // 그 다음 기타 월별 그룹 추가 (4주 이전 데이터)
+        const otherKeys = Object.keys(grouped)
+          .filter((key) => !weekOrder.includes(key))
+          .sort((a, b) => b.localeCompare(a));
+
+        otherKeys.forEach((key) => {
+          // 월별 포맷인 경우
+          if (key.match(/^\d{4}-\d{2}$/)) {
+            const [year, month] = key.split("-");
+            sortedGrouped[`${year}년 ${month}월`] = grouped[key];
+          } else {
+            sortedGrouped[key] = grouped[key];
+          }
+        });
+      } else {
+        // 기존 정렬 로직
+        Object.keys(grouped)
+          .sort((a, b) => b.localeCompare(a))
+          .forEach((key) => {
+            // 그룹 표시용 라벨 형식화
+            let displayKey = key;
+            if (this.dateGrouping === "month") {
+              const [year, month] = key.split("-");
+              displayKey = `${year}년 ${month}월`;
+            } else if (this.dateGrouping === "year") {
+              displayKey = `${key}년`;
+            } else if (this.dateGrouping === "day") {
+              const [year, month, day] = key.split("-");
+              displayKey = `${year}년 ${month}월 ${day}일`;
+            }
+
+            sortedGrouped[displayKey] = grouped[key];
+          });
+      }
+
+      return sortedGrouped;
+    },
+  },
+
+  watch: {
+    // 활성 탭 변경을 감지
+    activeTab(newVal) {
+      // 새가족 탭이 선택된 경우(index 1)
+      if (newVal === 1) {
+        this.loadAllNewMembers();
+      }
+    },
+
+    // 날짜 필터 변경 감지
+    startDate() {
+      // 시작일만 설정된 경우 종료일도 자동으로 설정
+      if (this.startDate && !this.endDate) {
+        this.endDate = this.startDate;
+      }
+    },
+
+    endDate() {
+      // 종료일만 설정된 경우 시작일도 자동으로 설정
+      if (this.endDate && !this.startDate) {
+        this.startDate = this.endDate;
+      }
+
+      // 종료일이 시작일보다 이전이면 시작일을 종료일로 조정
+      if (this.startDate && this.endDate && this.endDate < this.startDate) {
+        this.startDate = this.endDate;
+      }
+    },
+
+    // 날짜 그룹화 옵션 변경 감지
+    dateGrouping(newVal) {
+      console.log("날짜 그룹화 옵션 변경:", newVal);
+    },
+
+    formatDate(dateString) {
+      if (!dateString) return "-";
+
+      // YYYYMMDD 형식일 경우 변환
+      if (dateString.length === 8) {
+        const year = dateString.substring(0, 4);
+        const month = dateString.substring(4, 6);
+        const day = dateString.substring(6, 8);
+        return `${year}-${month}-${day}`;
+      }
+
+      // 이미 YYYY-MM-DD 형식이면 그대로 반환
+      return dateString;
+    },
+
+    clearDateFilter() {
+      this.startDate = null;
+      this.endDate = null;
+    },
+
+    // 모든 새가족 로드
+    async loadAllNewMembers() {
+      this.loadingAllMembers = true;
+
+      try {
+        // 새가족 데이터가 이미 있는 경우 다시 로드하지 않음
+        if (this.allNewMembers && this.allNewMembers.length > 0) {
+          this.loadingAllMembers = false;
+          return;
+        }
+
+        // 새가족 데이터 초기화
+        this.allNewMembers = [];
+
+        // 각 조직의 새가족 로드
+        await this.loadAllLeafOrganizationsNewMembers();
+      } catch (error) {
+        console.error("새가족 로드 중 오류 발생:", error);
+        this.$store.dispatch("snackbar/showMessage", {
+          message: "새가족 정보를 불러오는 중 오류가 발생했습니다.",
+          color: "error",
+        });
+      } finally {
+        this.loadingAllMembers = false;
+      }
+    },
+
+    // 모든 최하위 조직의 새가족 로드
+    async loadAllLeafOrganizationsNewMembers() {
+      // 최하위 조직 찾기
+      const findLeafOrganizations = (orgs) => {
+        let leaves = [];
+        orgs.forEach((org) => {
+          if (!org.children || org.children.length === 0 || org.isLeafNode) {
+            leaves.push(org);
+          } else if (org.children && org.children.length > 0) {
+            leaves = leaves.concat(findLeafOrganizations(org.children));
+          }
+        });
+        return leaves;
+      };
+
+      const leafOrgs = findLeafOrganizations(this.organizationTree);
+
+      // 각 최하위 조직의 새가족 멤버 로드
+      for (const org of leafOrgs) {
+        try {
+          const members = await this.getMembersWithRoles(org.id, false);
+
+          if (members && Array.isArray(members)) {
+            // 새가족 필터링 (isNewMember === 'Y')
+            const newMembers = members.filter(
+              (member) => member.isNewMember === "Y"
+            );
+
+            // 조직 정보 추가
+            newMembers.forEach((member) => {
+              member.organizationId = org.id;
+              member.organizationName = org.organization_name;
+            });
+
+            // 새가족 목록에 추가
+            this.allNewMembers = [...this.allNewMembers, ...newMembers];
+          }
+        } catch (error) {
+          console.error(`조직 ${org.id}의 새가족 로드 중 오류:`, error);
+        }
+      }
+
+      // 등록일 기준으로 정렬
+      this.allNewMembers.sort((a, b) => {
+        if (!a.registrationDate) return 1;
+        if (!b.registrationDate) return -1;
+        return b.registrationDate.localeCompare(a.registrationDate);
+      });
+    },
+/* 날짜 그룹 관련 스타일 */
+.max-width-150 {
+  max-width: 150px !important;
+}
+
+.max-width-200 {
+  max-width: 200px !important;
+}
+
+.group-header {
+  background-color: #f5f7f9;
+  border-left: 4px solid #7ea394;
+}
+
+/* 반응형 스타일 */
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
-      <v-card-title class="d-flex justify-space-between align-center">
-        <span class="wc-bold-600 text-h5">조직 및 멤버 관리</span>
-
-        <!-- 검색 기능 추가 -->
-        <div class="search-container d-flex align-center mr-4">
-          <v-text-field
-            v-model="searchQuery"
-            placeholder="조직/멤버 검색"
-            prepend-inner-icon="mdi-magnify"
-            background-color="#FFFFFF"
-            color="#7EA394"
-            solo
-            rounded
-            flat
-            dense
-            hide-details="auto"
-            class="search-input mx-2"
-            @input="debounceSearch"
-            @focus="showSearchResults = true"
-            @blur="hideSearchResultsDelayed"
-            @keyup.esc="showSearchResults = false"
-          ></v-text-field>
-          <v-btn-toggle
-            v-model="searchType"
-            mandatory
-            dense
-            color="#7EA394"
-            class="search-toggle rounded-lg"
-          >
-            <v-btn small value="all">전체</v-btn>
-            <v-btn small value="organization">조직</v-btn>
-            <v-btn small value="member">멤버</v-btn>
-          </v-btn-toggle>
-
-          <!-- 검색 결과 표시 영역 -->
-          <v-card
-            v-show="showSearchResults && searchResults.length > 0"
-            class="search-results elevation-5"
-            rounded
-          >
-            <v-list dense>
-              <v-subheader v-if="filteredOrganizationResults.length > 0"
-                >조직</v-subheader
-              >
-              <v-list-item
-                v-for="org in filteredOrganizationResults"
-                :key="`org-${org.id}`"
-                @click="selectSearchedOrganization(org)"
-                dense
-              >
-                <v-list-item-icon class="mr-2">
-                  <v-icon small>mdi-folder</v-icon>
-                </v-list-item-icon>
-                <v-list-item-content>
-                  <v-list-item-title>{{
-                    org.organization_name
-                  }}</v-list-item-title>
-                  <v-list-item-subtitle class="text-caption">
-                    멤버: {{ org.memberCount || 0 }}명
-                  </v-list-item-subtitle>
-                </v-list-item-content>
-              </v-list-item>
-
-              <v-divider
-                v-if="
-                  filteredOrganizationResults.length > 0 &&
-                  filteredMemberResults.length > 0
-                "
-              ></v-divider>
-
-              <v-subheader v-if="filteredMemberResults.length > 0"
-                >멤버</v-subheader
-              >
-              <v-list-item
-                v-for="member in filteredMemberResults"
-                :key="`member-${member.userId}`"
-                @click="selectSearchedMember(member)"
-                dense
-              >
-                <v-list-item-icon class="mr-2">
-                  <v-icon small>mdi-account</v-icon>
-                </v-list-item-icon>
-                <v-list-item-content>
-                  <v-list-item-title>{{ member.name }}</v-list-item-title>
-                  <v-list-item-subtitle class="text-caption">
-                    {{ member.organizationName || "소속 정보 없음" }}
-                  </v-list-item-subtitle>
-                </v-list-item-content>
-              </v-list-item>
-
-              <v-list-item v-if="searchResults.length === 0">
-                <v-list-item-content class="text-center">
-                  <v-list-item-title>검색 결과가 없습니다.</v-list-item-title>
-                </v-list-item-content>
-              </v-list-item>
-            </v-list>
-          </v-card>
-        </div>
-
-        <div>
-          <v-btn
-            color="#7EA394"
-            small
-            rounded
-            class="mr-2 white--text"
-            @click="openOrganizationDialog()"
-          >
-            <v-icon left small>mdi-folder-plus</v-icon>
-            조직 추가
-          </v-btn>
-          <v-btn
-            color="#7EA394"
-            small
-            rounded
-            :disabled="
-              !selectedOrganization || !selectedOrganization.isLeafNode
-            "
-            @click="openMemberDialog()"
-            class="white--text"
-          >
-            <v-icon left small>mdi-account-plus</v-icon>
-            신규 인원 등록
-          </v-btn>
-          <v-btn
-            color="grey darken-1"
-            small
-            rounded
-            class="ml-2 white--text"
-            @click="logout"
-          >
-            <v-icon left small>mdi-logout</v-icon>
-            로그아웃
-          </v-btn>
+      <v-card-title class="d-flex flex-column align-start">
+        <span class="wc-bold-600 text-h5 mb-4">조직 및 멤버 관리</span>
+
+        <div class="d-flex justify-space-between align-center w-100">
+          <!-- 검색 기능 추가 -->
+          <div class="search-container d-flex align-center">
+            <v-text-field
+              v-model="searchQuery"
+              placeholder="조직/멤버 검색"
+              prepend-inner-icon="mdi-magnify"
+              background-color="#FFFFFF"
+              color="#7EA394"
+              solo
+              rounded
+              flat
+              dense
+              hide-details="auto"
+              class="search-input"
+              @input="debounceSearch"
+              @focus="showSearchResults = true"
+              @blur="hideSearchResultsDelayed"
+              @keyup.esc="showSearchResults = false"
+            ></v-text-field>
+            <v-btn-toggle
+              v-model="searchType"
+              mandatory
+              dense
+              color="#7EA394"
+              class="search-toggle rounded-lg ml-4"
+            >
+              <v-btn small value="all">전체</v-btn>
+              <v-btn small value="organization">조직</v-btn>
+              <v-btn small value="member">멤버</v-btn>
+            </v-btn-toggle>
+
+            <!-- 검색 결과 표시 영역 -->
+            <v-card
+              v-show="showSearchResults && searchResults.length > 0"
+              class="search-results elevation-5"
+              rounded
+            >
+              <v-list dense>
+                <v-subheader v-if="filteredOrganizationResults.length > 0"
+                  >조직</v-subheader
+                >
+                <v-list-item
+                  v-for="org in filteredOrganizationResults"
+                  :key="`org-${org.id}`"
+                  @click="selectSearchedOrganization(org)"
+                  dense
+                >
+                  <v-list-item-icon class="mr-2">
+                    <v-icon small>mdi-folder</v-icon>
+                  </v-list-item-icon>
+                  <v-list-item-content>
+                    <v-list-item-title>{{
+                      org.organization_name
+                    }}</v-list-item-title>
+                    <v-list-item-subtitle class="text-caption">
+                      멤버: {{ org.memberCount || 0 }}명
+                    </v-list-item-subtitle>
+                  </v-list-item-content>
+                </v-list-item>
+
+                <v-divider
+                  v-if="
+                    filteredOrganizationResults.length > 0 &&
+                    filteredMemberResults.length > 0
+                  "
+                ></v-divider>
+
+                <v-subheader v-if="filteredMemberResults.length > 0"
+                  >멤버</v-subheader
+                >
+                <v-list-item
+                  v-for="member in filteredMemberResults"
+                  :key="`member-${member.userId}`"
+                  @click="selectSearchedMember(member)"
+                  dense
+                >
+                  <v-list-item-icon class="mr-2">
+                    <v-icon small>mdi-account</v-icon>
+                  </v-list-item-icon>
+                  <v-list-item-content>
+                    <v-list-item-title>{{ member.name }}</v-list-item-title>
+                    <v-list-item-subtitle class="text-caption">
+                      {{ member.organizationName || "소속 정보 없음" }}
+                    </v-list-item-subtitle>
+                  </v-list-item-content>
+                </v-list-item>
+
+                <v-list-item v-if="searchResults.length === 0">
+                  <v-list-item-content class="text-center">
+                    <v-list-item-title>검색 결과가 없습니다.</v-list-item-title>
+                  </v-list-item-content>
+                </v-list-item>
+              </v-list>
+            </v-card>
+          </div>
+
+          <div>
+            <v-btn
+              color="#7EA394"
+              small
+              rounded
+              class="mr-2 white--text"
+              @click="openOrganizationDialog()"
+            >
+              <v-icon left small>mdi-folder-plus</v-icon>
+              조직 추가
+            </v-btn>
+            <v-btn
+              color="#7EA394"
+              small
+              rounded
+              :disabled="
+                !selectedOrganization || !selectedOrganization.isLeafNode
+              "
+              @click="openMemberDialog()"
+              class="white--text"
+            >
+              <v-icon left small>mdi-account-plus</v-icon>
+              신규 인원 등록
+            </v-btn>
+            <v-btn
+              color="grey darken-1"
+              small
+              rounded
+              class="ml-2 white--text"
+              @click="logout"
+            >
+              <v-icon left small>mdi-logout</v-icon>
+              로그아웃
+            </v-btn>
+          </div>
-  min-width: 300px;
+  min-width: 500px;
+  flex-grow: 1;
+  margin-right: 20px;
-  max-width: 250px;
+  max-width: 400px;
+  width: 100%;
+  margin-left: 16px;
-  width: 350px;
+  width: 400px;
diff --git a/src/components/admin/organization/MemberForm.vue b/src/components/admin/organization/MemberForm.vue
--- a/src/components/admin/organization/MemberForm.vue
+++ b/src/components/admin/organization/MemberForm.vue
-                background-color="#edeef3"
+                background-color="#FFFFFF"
-                outlined
-                persistent-hint
-                background-color="#edeef3"
+                background-color="#FFFFFF"
-                outlined
-                persistent-hint
-                background-color="#edeef3"
+                background-color="#FFFFFF"
-                outlined
-                persistent-hint
-                background-color="#edeef3"
+                background-color="#FFFFFF"
-                outlined
-                persistent-hint
-                background-color="#edeef3"
+                background-color="#FFFFFF"
-                outlined
-                persistent-hint
-                    background-color="#edeef3"
+                    background-color="#FFFFFF"
-                    outlined
-                    persistent-hint
-                    hint="직접 입력(8자리)하거나 캘린더에서 선택하세요"
-                    background-color="#edeef3"
+                    background-color="#FFFFFF"
-                    outlined
-                    persistent-hint
-                    hint="직접 입력(8자리)하거나 캘린더에서 선택하세요"
-                background-color="#edeef3"
+                background-color="#FFFFFF"
-                outlined
-                persistent-hint
-                hint="직접 입력 또는 검색 가능합니다"
-                background-color="#edeef3"
+                background-color="#FFFFFF"
-                outlined
-                persistent-hint
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
-            background-color="#edeef3"
+            background-color="#FFFFFF"
-            outlined
-            background-color="#edeef3"
+            background-color="#FFFFFF"
-            outlined
diff --git a/src/components/admin/organization/MemberForm.vue b/src/components/admin/organization/MemberForm.vue
--- a/src/components/admin/organization/MemberForm.vue
+++ b/src/components/admin/organization/MemberForm.vue
+                outlined
-                class="mb-4 mx-auto bg-transparent org-custom-input"
+                class="mb-7"
+                outlined
-                class="mb-4 mx-auto bg-transparent org-custom-input"
+                class="mb-7"
+                outlined
-                class="mb-4 mx-auto bg-transparent org-custom-input"
+                class="mb-7"
+                outlined
-                class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
+                class="mb-7"
+                outlined
-                class="mb-4 mx-auto bg-transparent org-custom-input"
+                class="mb-7"
+                    outlined
+                    hide-details="auto"
+                    class="mb-7"
-                    class="mb-4 mx-auto org-custom-input"
+                    outlined
+                    hide-details="auto"
+                    class="mb-7"
-                    class="mb-4 mx-auto org-custom-input"
-              <v-select
-                v-model="editedMember.countryCode"
-                :items="countryItems"
+              <v-autocomplete
+                v-model="selectedCountry"
+                :items="filteredCountryItems"
+                outlined
-                class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
+                class="mb-7"
-                autocomplete
-                hint="검색 가능합니다"
-              ></v-select>
+                hint="직접 입력 또는 검색 가능합니다"
+                :filter="customFilter"
+                :search-input.sync="countrySearchInput"
+                @change="handleCountryChange"
+                @click:clear="clearSelectedCountry"
+                return-object
+                auto-select-first
+                open-on-clear
+                cache-items
+              ></v-autocomplete>
+                outlined
-                class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
+                class="mb-7"
+        countryName: "대한민국",
+      countrySearchInput: "",
+      selectedCountry: null,
+      pendingCustomItem: null,
+
+    // 검색어에 따라 필터링된 국가 목록
+    filteredCountryItems() {
+      // 검색어가 없으면 전체 국가 목록 반환
+      if (!this.countrySearchInput || this.countrySearchInput.trim() === "") {
+        return this.countryItems;
+      }
+
+      const searchText = this.countrySearchInput.toLowerCase().trim();
+
+      // 기존 국가 목록에서 검색어를 포함하는 항목 필터링
+      const filteredItems = this.countryItems.filter((item) =>
+        item.text.toLowerCase().includes(searchText)
+      );
+
+      // 검색어와 정확히 일치하는 항목이 있는지 확인
+      const exactMatch = this.countryItems.find(
+        (item) => item.text.toLowerCase() === searchText
+      );
+
+      // 검색어와 일치하는 항목이 없고, 직접 입력 값이 있는 경우
+      if (!exactMatch && searchText.length > 0) {
+        // 사용자 정의 항목 생성 (중요: 다른 항목과 형식 일치)
+        const customItem = {
+          text: this.countrySearchInput,
+          value: "ETC",
+          custom: true,
+        };
+
+        // 직접 입력한 값을 리스트 최상단에 표시
+        return [customItem, ...filteredItems];
+      }
+
+      return filteredItems;
+    },
+          // 국가 코드에 해당하는 selectedCountry 설정
+          if (this.editedMember.countryCode) {
+            const country = this.countryItems.find(
+              (item) => item.value === this.editedMember.countryCode
+            );
+            if (country) {
+              this.selectedCountry = country;
+            }
+          }
+
+            countryName: "대한민국",
+
+          // 기본 국가 설정
+          this.selectedCountry = this.countryItems.find(
+            (item) => item.value === "KOR"
+          );
+
+          countryCode: this.editedMember.countryCode,
+          countryName: this.editedMember.countryName,
+          selectedCountry: this.selectedCountry,
+
+    // 국가 선택 변경 감지
+    selectedCountry: {
+      handler(newVal) {
+        if (!newVal) {
+          this.editedMember.countryCode = "";
+          this.editedMember.countryName = "";
+          return;
+        }
+
+        if (typeof newVal === "object") {
+          this.editedMember.countryCode = newVal.value;
+          this.editedMember.countryName = newVal.text;
+          console.log("[디버그] 국가 선택 감지됨:", newVal.text);
+        }
+      },
+      deep: true,
+    },
+
+    // 검색어에 따른 자동 선택
+    countrySearchInput: {
+      handler(newVal) {
+        if (!newVal || newVal.trim() === "") return;
+
+        // 정확히 일치하는 국가가 있는지 확인
+        const exactMatch = this.countryItems.find(
+          (item) => item.text.toLowerCase() === newVal.toLowerCase().trim()
+        );
+
+        if (exactMatch) {
+          // 이미 선택된 값과 다른 경우에만 업데이트
+          if (
+            !this.selectedCountry ||
+            this.selectedCountry.text !== exactMatch.text
+          ) {
+            this.selectedCountry = exactMatch;
+          }
+        }
+      },
+      immediate: false,
+    },
+  },
+
+  mounted() {
+    // 국가 초기값 설정
+    if (this.editedMember.countryCode) {
+      const country = this.countryItems.find(
+        (item) => item.value === this.editedMember.countryCode
+      );
+      if (country) {
+        this.selectedCountry = country;
+      }
+    }
+
+    customFilter(item, queryText) {
+      if (!queryText) return true;
+
+      const text = item.text.toString().toLowerCase();
+      const query = queryText.toString().toLowerCase();
+
+      return text.indexOf(query) > -1;
+    },
+
+    handleCountryChange(value) {
+      console.log("[디버그] 국가 선택 이벤트:", value);
+
+      // 값이 없으면 초기화
+      if (!value) {
+        this.editedMember.countryCode = "";
+        this.editedMember.countryName = "";
+        this.selectedCountry = null;
+        return;
+      }
+
+      // 선택된 객체 처리 (return-object 속성으로 인해 항상 객체 형태)
+      if (typeof value === "object") {
+        this.editedMember.countryCode = value.value;
+        this.editedMember.countryName = value.text;
+
+        console.log("[디버그] 국가 선택 완료:", {
+          countryCode: this.editedMember.countryCode,
+          countryName: this.editedMember.countryName,
+        });
+      }
+    },
+
+    clearSelectedCountry() {
+      this.editedMember.countryCode = "";
+      this.editedMember.countryName = "";
+      this.selectedCountry = null;
+      this.countrySearchInput = ""; // 검색어도 함께 초기화
+    },
-/* 커스텀 입력 필드 공통 스타일 */
-.org-custom-input {
-  height: 50px !important;
-  border-radius: 20px !important;
-  border: 2px solid rgb(240, 238, 238) !important;
-  box-shadow: 5px 5px 15px #00000012, -5px -5px 15px #ffffff !important;
-  transition: all 0.3s ease;
-}
-
-.org-custom-input:focus-within {
-  box-shadow: 7px 7px 20px #00000015, -7px -7px 20px #ffffff !important;
-  border-color: #7ea394 !important;
-}
-
-/* 커스텀 셀렉트 스타일 */
-.org-custom-select .v-input__slot {
-  border-radius: 20px !important;
-  box-shadow: 5px 5px 15px #00000012, -5px -5px 15px #ffffff !important;
-}
-
diff --git a/src/components/basic/LoginComp.vue b/src/components/basic/LoginComp.vue
--- a/src/components/basic/LoginComp.vue
+++ b/src/components/basic/LoginComp.vue
-              label="Email 계정을 입력하세요"
-              :rules="[rules.requiredId]"
+              label="Email 계정을 입력하세요"
+              :rules="[rules.requiredId]"
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
+            background-color="#edeef3"
+            color="#7EA394"
+            solo
+            rounded
+            flat
-            color="#7EA394"
+            hide-details="auto"
+            class="mb-7"
-            outlined
-            dense
-            hide-details
+            background-color="#edeef3"
+            solo
+            rounded
+            flat
+            outlined
+            dense
+            hide-details="auto"
+        country_name: this.editedMember.countryName || "대한민국", // 국가 이름 추가
+        countryName:
+          apiData.country_name || this.getCountryNameByCode(apiData.country),
+    // 국가 코드로 국가명 가져오기
+    getCountryNameByCode(code) {
+      if (!code) return "";
+      const country = this.countryItems.find((item) => item.value === code);
+      return country ? country.text : "기타";
+    },
+
-  border: 2px solid rgb(240, 238, 238) !important;
-  box-shadow: 5px 5px 15px #00000012, -5px -5px 15px #ffffff !important;
-
-  &:focus-within {
-    box-shadow: 7px 7px 20px #00000015, -7px -7px 20px #ffffff !important;
-    border-color: #7ea394 !important;
-  }
diff --git a/src/components/admin/organization/MemberForm.vue b/src/components/admin/organization/MemberForm.vue
--- a/src/components/admin/organization/MemberForm.vue
+++ b/src/components/admin/organization/MemberForm.vue
+                autocomplete
+                clearable
+                :menu-props="{ maxHeight: '300px', offsetY: true }"
+                hint="검색 가능합니다"
+        { text: "가나", value: "GHA" },
+        { text: "나이지리아", value: "NGA" },
+        { text: "남아프리카공화국", value: "ZAF" },
+        { text: "네덜란드", value: "NLD" },
+        { text: "노르웨이", value: "NOR" },
+        { text: "뉴질랜드", value: "NZL" },
+        { text: "대만", value: "TWN" },
+        { text: "덴마크", value: "DNK" },
+        { text: "독일", value: "DEU" },
+        { text: "러시아", value: "RUS" },
+        { text: "말레이시아", value: "MYS" },
+        { text: "멕시코", value: "MEX" },
+        { text: "몽골", value: "MNG" },
+        { text: "베트남", value: "VNM" },
+        { text: "벨기에", value: "BEL" },
+        { text: "브라질", value: "BRA" },
+        { text: "사우디아라비아", value: "SAU" },
+        { text: "스웨덴", value: "SWE" },
+        { text: "스위스", value: "CHE" },
+        { text: "스페인", value: "ESP" },
+        { text: "싱가포르", value: "SGP" },
+        { text: "아르헨티나", value: "ARG" },
+        { text: "영국", value: "GBR" },
+        { text: "오스트레일리아", value: "AUS" },
+        { text: "오스트리아", value: "AUT" },
+        { text: "이스라엘", value: "ISR" },
+        { text: "이집트", value: "EGY" },
+        { text: "이탈리아", value: "ITA" },
+        { text: "인도", value: "IND" },
+        { text: "인도네시아", value: "IDN" },
+        { text: "캐나다", value: "CAN" },
+        { text: "태국", value: "THA" },
+        { text: "터키", value: "TUR" },
+        { text: "포르투갈", value: "PRT" },
+        { text: "폴란드", value: "POL" },
+        { text: "프랑스", value: "FRA" },
+        { text: "핀란드", value: "FIN" },
+        { text: "필리핀", value: "PHL" },
+        { text: "헝가리", value: "HUN" },
+        { text: "홍콩", value: "HKG" },
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
+        { text: "가나", value: "GHA" },
+        { text: "나이지리아", value: "NGA" },
+        { text: "남아프리카공화국", value: "ZAF" },
+        { text: "네덜란드", value: "NLD" },
+        { text: "노르웨이", value: "NOR" },
+        { text: "뉴질랜드", value: "NZL" },
+        { text: "대만", value: "TWN" },
+        { text: "덴마크", value: "DNK" },
+        { text: "독일", value: "DEU" },
+        { text: "러시아", value: "RUS" },
+        { text: "말레이시아", value: "MYS" },
+        { text: "멕시코", value: "MEX" },
+        { text: "몽골", value: "MNG" },
+        { text: "베트남", value: "VNM" },
+        { text: "벨기에", value: "BEL" },
+        { text: "브라질", value: "BRA" },
+        { text: "사우디아라비아", value: "SAU" },
+        { text: "스웨덴", value: "SWE" },
+        { text: "스위스", value: "CHE" },
+        { text: "스페인", value: "ESP" },
+        { text: "싱가포르", value: "SGP" },
+        { text: "아르헨티나", value: "ARG" },
+        { text: "영국", value: "GBR" },
+        { text: "오스트레일리아", value: "AUS" },
+        { text: "오스트리아", value: "AUT" },
+        { text: "이스라엘", value: "ISR" },
+        { text: "이집트", value: "EGY" },
+        { text: "이탈리아", value: "ITA" },
+        { text: "인도", value: "IND" },
+        { text: "인도네시아", value: "IDN" },
+        { text: "캐나다", value: "CAN" },
+        { text: "태국", value: "THA" },
+        { text: "터키", value: "TUR" },
+        { text: "포르투갈", value: "PRT" },
+        { text: "폴란드", value: "POL" },
+        { text: "프랑스", value: "FRA" },
+        { text: "핀란드", value: "FIN" },
+        { text: "필리핀", value: "PHL" },
+        { text: "헝가리", value: "HUN" },
+        { text: "홍콩", value: "HKG" },
diff --git a/src/components/admin/organization/MemberForm.vue b/src/components/admin/organization/MemberForm.vue
--- a/src/components/admin/organization/MemberForm.vue
+++ b/src/components/admin/organization/MemberForm.vue
+          // 오늘 날짜를 YYYYMMDD 형식으로 가져오기
+          const today = new Date();
+          const year = today.getFullYear();
+          const month = String(today.getMonth() + 1).padStart(2, "0");
+          const day = String(today.getDate()).padStart(2, "0");
+          const todayFormatted = `${year}${month}${day}`;
+
-            registrationDate: null,
+            registrationDate: todayFormatted, // 오늘 날짜로 설정
+          registrationDate: this.editedMember.registrationDate, // 교회 등록일 로깅 추가
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
+        // 오늘 날짜를 YYYYMMDD 형식으로 가져오기
+        const today = new Date();
+        const year = today.getFullYear();
+        const month = String(today.getMonth() + 1).padStart(2, "0");
+        const day = String(today.getDate()).padStart(2, "0");
+        const todayFormatted = `${year}${month}${day}`;
+
-          registrationDate: null,
+          registrationDate: todayFormatted, // 오늘 날짜로 설정
+          registrationDate: this.editedMember.registrationDate, // 교회 등록일 표시 추가
diff --git a/src/components/admin/organization/MemberForm.vue b/src/components/admin/organization/MemberForm.vue
--- a/src/components/admin/organization/MemberForm.vue
+++ b/src/components/admin/organization/MemberForm.vue
-                    label="생년월일"
+                    label="생년월일 (예: 19901201)"
-                    readonly
+                    hint="직접 입력(8자리)하거나 캘린더에서 선택하세요"
+                    @input="validateDateFormat('birthDate')"
+                    append-icon="mdi-calendar"
+                    @click:append="birthDateMenu = true"
+                    :error="dateErrors.birthDate"
+                    :error-messages="dateErrorMessages.birthDate"
-                  v-model="editedMember.birthDate"
+                  v-model="pickerBirthDate"
-                  @input="birthDateMenu = false"
+                  @input="handleDatePickerInput('birthDate')"
-                    label="교회 등록일"
+                    label="교회 등록일 (예: 20230101)"
-                    readonly
+                    hint="직접 입력(8자리)하거나 캘린더에서 선택하세요"
+                    @input="validateDateFormat('registrationDate')"
+                    append-icon="mdi-calendar"
+                    @click:append="registrationDateMenu = true"
+                    :error="dateErrors.registrationDate"
+                    :error-messages="dateErrorMessages.registrationDate"
-                  v-model="editedMember.registrationDate"
+                  v-model="pickerRegistrationDate"
-                  @input="registrationDateMenu = false"
+                  @input="handleDatePickerInput('registrationDate')"
+      pickerBirthDate: null,
+      pickerRegistrationDate: null,
-      // 역할 정보
+      dateErrors: {
+        birthDate: false,
+        registrationDate: false,
+      },
+      dateErrorMessages: {
+        birthDate: "",
+        registrationDate: "",
+      },
-      // 국가 정보
+        console.group("MemberForm - member prop 변경");
+        console.log("받은 데이터:", newVal);
+
-          this.editedMember = { ...newVal };
+          // 기존 멤버 수정 - 깊은 복사로 데이터 복제
+          this.editedMember = JSON.parse(JSON.stringify(newVal));
+
+          // 기존 날짜 데이터가 있고 하이픈(-) 형식이면 YYYYMMDD 형식으로 변환
+          if (
+            this.editedMember.birthDate &&
+            this.editedMember.birthDate.includes("-")
+          ) {
+            const [year, month, day] = this.editedMember.birthDate.split("-");
+            this.editedMember.birthDate = `${year}${month}${day}`;
+          }
+
+          if (
+            this.editedMember.registrationDate &&
+            this.editedMember.registrationDate.includes("-")
+          ) {
+            const [year, month, day] =
+              this.editedMember.registrationDate.split("-");
+            this.editedMember.registrationDate = `${year}${month}${day}`;
+          }
+
+          console.log("기존 멤버 수정 모드:", this.editedMember);
+          console.log("새 멤버 추가 모드:", this.editedMember);
+        }
+
+        // 편집 멤버 데이터 확인
+        console.log("최종 편집 멤버 데이터:", {
+          name: this.editedMember.name,
+          phoneNumber: this.editedMember.phoneNumber,
+          genderType: this.editedMember.genderType,
+          roleId: this.editedMember.roleId,
+        });
+        console.groupEnd();
+
+        // 유효성 검사 오류 초기화
+        this.validationErrors = {
+          name: false,
+          phoneNumber: false,
+          genderType: false,
+          roleId: false,
+        };
+
+        // 날짜 오류 초기화
+        this.dateErrors = {
+          birthDate: false,
+          registrationDate: false,
+        };
+        this.dateErrorMessages = {
+          birthDate: "",
+          registrationDate: "",
+        };
+      },
+      immediate: true,
+    },
+
+    // 데이트 피커 값 초기화를 위한 watch
+    "editedMember.birthDate": {
+      handler(val) {
+        if (val && val.length === 8) {
+          // YYYYMMDD 형식을 YYYY-MM-DD로 변환 (데이트피커용)
+          const year = val.substring(0, 4);
+          const month = val.substring(4, 6);
+          const day = val.substring(6, 8);
+          this.pickerBirthDate = `${year}-${month}-${day}`;
+        }
+      },
+      immediate: true,
+    },
+
+    "editedMember.registrationDate": {
+      handler(val) {
+        if (val && val.length === 8) {
+          // YYYYMMDD 형식을 YYYY-MM-DD로 변환 (데이트피커용)
+          const year = val.substring(0, 4);
+          const month = val.substring(4, 6);
+          const day = val.substring(6, 8);
+          this.pickerRegistrationDate = `${year}-${month}-${day}`;
+      // 디버깅을 위한 로그 추가
+      console.group("MemberForm - 필드 유효성 검사");
+      console.log(
+        "이름:",
+        this.editedMember.name,
+        "비어있음:",
+        !this.editedMember.name || this.editedMember.name.trim() === ""
+      );
+      console.log(
+        "전화번호:",
+        this.editedMember.phoneNumber,
+        "비어있음:",
+        !this.editedMember.phoneNumber ||
+          this.editedMember.phoneNumber.trim() === ""
+      );
+      console.log(
+        "성별:",
+        this.editedMember.genderType,
+        "비어있음:",
+        !this.editedMember.genderType
+      );
+      console.log(
+        "역할ID:",
+        this.editedMember.roleId,
+        "비어있음:",
+        !this.editedMember.roleId
+      );
+
+      // 00000000000도 유효한 전화번호로 인정
+      console.log("유효성 검사 결과:", this.validationErrors);
+      console.groupEnd();
+
-      if (this.validateFields()) {
+      // 날짜 필드의 유효성 다시 확인
+      if (this.editedMember.birthDate) {
+        this.validateDateFormat("birthDate");
+      }
+      if (this.editedMember.registrationDate) {
+        this.validateDateFormat("registrationDate");
+      }
+
+      // 날짜 필드 오류 확인
+      const hasDateErrors =
+        this.dateErrors.birthDate || this.dateErrors.registrationDate;
+
+      if (this.validateFields() && !hasDateErrors) {
+      } else {
+        // 검증 실패 시 오류 메시지를 부모 컴포넌트에 전달
+        let validationErrors = this.validationErrors;
+
+        // 날짜 오류 정보 추가
+        if (hasDateErrors) {
+          const errorMessage = this.dateErrors.birthDate
+            ? this.dateErrorMessages.birthDate
+            : this.dateErrorMessages.registrationDate;
+
+          validationErrors = {
+            ...validationErrors,
+            dateError: true,
+            dateErrorMessage: errorMessage,
+          };
+        }
+
+        this.$emit("validation-failed", validationErrors);
+
+    validateDateFormat(field) {
+      // 필드가 비어있으면 오류 없음
+      if (!this.editedMember[field]) {
+        this.dateErrors[field] = false;
+        this.dateErrorMessages[field] = "";
+        return;
+      }
+
+      // 정규식으로 YYYYMMDD 형식 확인 (8자리 숫자)
+      const datePattern = /^\d{8}$/;
+      if (!datePattern.test(this.editedMember[field])) {
+        this.dateErrors[field] = true;
+        this.dateErrorMessages[field] =
+          "날짜 형식이 올바르지 않습니다. (YYYYMMDD)";
+        return;
+      }
+
+      // 입력된 날짜 형식을 년, 월, 일로 분리
+      const year = this.editedMember[field].substring(0, 4);
+      const month = this.editedMember[field].substring(4, 6);
+      const day = this.editedMember[field].substring(6, 8);
+
+      // 날짜 객체로 변환하여 유효성 검사
+      const date = new Date(year, parseInt(month) - 1, day);
+      const isValidDate =
+        !isNaN(date.getTime()) &&
+        date.getFullYear() === parseInt(year) &&
+        date.getMonth() === parseInt(month) - 1 &&
+        date.getDate() === parseInt(day);
+
+      if (!isValidDate) {
+        this.dateErrors[field] = true;
+        this.dateErrorMessages[field] = "유효하지 않은 날짜입니다.";
+        return;
+      }
+
+      // 유효한 날짜이므로 오류 표시 제거
+      this.dateErrors[field] = false;
+      this.dateErrorMessages[field] = "";
+
+      // 생년월일이 미래 날짜인지 검사
+      if (field === "birthDate") {
+        const today = new Date();
+        if (date > today) {
+          this.dateErrors[field] = true;
+          this.dateErrorMessages[field] =
+            "생년월일은 오늘보다 미래일 수 없습니다.";
+        }
+      }
+    },
+
+    handleDatePickerInput(field) {
+      if (field === "birthDate") {
+        // 캘린더에서 선택된 YYYY-MM-DD 형식을 YYYYMMDD로 변환
+        if (this.pickerBirthDate) {
+          const [year, month, day] = this.pickerBirthDate.split("-");
+          this.editedMember.birthDate = `${year}${month}${day}`;
+          this.birthDateMenu = false;
+        }
+      } else if (field === "registrationDate") {
+        // 캘린더에서 선택된 YYYY-MM-DD 형식을 YYYYMMDD로 변환
+        if (this.pickerRegistrationDate) {
+          const [year, month, day] = this.pickerRegistrationDate.split("-");
+          this.editedMember.registrationDate = `${year}${month}${day}`;
+          this.registrationDateMenu = false;
+        }
+      }
+
+      // 날짜 형식 검증
+      this.validateDateFormat(field);
+    },
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
+      @validation-failed="handleValidationFailure"
-          name: "",
+          name: "", // 이름은 빈 값으로 시작 (사용자 입력 필요)
-          genderType: "M",
+          genderType: "M", // 기본값 M으로 설정
-          roleId: 74,
+          roleId: 74, // 기본값 74 (순원)로 설정
+      // 디버깅을 위한 로그 추가
+      console.group("필드 유효성 검사 결과");
+      console.log("이름:", this.editedMember.name);
+      console.log("전화번호:", this.editedMember.phoneNumber);
+      console.log("성별:", this.editedMember.genderType);
+      console.log("역할ID:", this.editedMember.roleId);
+
+      // 00000000000은 유효한 전화번호로 인정
+      console.log("유효성 검사 오류:", this.validationErrors);
+      console.groupEnd();
+
-    async saveMember() {
+    async saveMember(memberData) {
+        // 전달받은 멤버 데이터로 업데이트
+        if (memberData) {
+          this.editedMember = { ...memberData };
+        }
+
+        // 디버깅 로그 추가
+        console.group("멤버 저장 시도");
+        console.log("멤버 데이터:", JSON.stringify(this.editedMember, null, 2));
+        console.groupEnd();
+
-      // 현재 날짜 (YYYY-MM-DD)
-      const today = new Date().toISOString().split("T")[0];
+      // 현재 날짜 (YYYYMMDD)
+      const today = new Date().toISOString().split("T")[0].replace(/-/g, "");
+      // 생년월일이 있으면 사용, 없으면 기본값 사용
+      let birthDate = this.editedMember.birthDate || randomData.birthDate;
+      // 데이터베이스나 API에서 YYYY-MM-DD 형식이 필요한 경우 변환
+      if (birthDate && birthDate.length === 8) {
+        birthDate = `${birthDate.substring(0, 4)}-${birthDate.substring(
+          4,
+          6
+        )}-${birthDate.substring(6, 8)}`;
+      }
+
+      // 교회 등록일이 있으면 사용, 없으면 오늘 날짜 사용
+      let registrationDate = this.editedMember.registrationDate || today;
+      // 데이터베이스나 API에서 YYYY-MM-DD 형식이 필요한 경우 변환
+      if (registrationDate && registrationDate.length === 8) {
+        registrationDate = `${registrationDate.substring(
+          0,
+          4
+        )}-${registrationDate.substring(4, 6)}-${registrationDate.substring(
+          6,
+          8
+        )}`;
+      }
+
-        birth_date: this.editedMember.birthDate || randomData.birthDate,
+        birth_date: birthDate,
-        church_registration_date: this.editedMember.registrationDate || today,
+        church_registration_date: registrationDate,
+
+    // 검증 실패 처리 메서드 추가
+    handleValidationFailure(errors) {
+      console.group("검증 실패 처리");
+      console.log("필드별 오류:", errors);
+
+      // 어떤 필드가 오류인지 구체적인 메시지 표시
+      let errorMessage = "";
+
+      // 필수 입력 필드 오류 확인
+      const requiredFieldsErrors = [];
+      if (errors.name) requiredFieldsErrors.push("이름");
+      if (errors.phoneNumber) requiredFieldsErrors.push("전화번호");
+      if (errors.genderType) requiredFieldsErrors.push("성별");
+      if (errors.roleId) requiredFieldsErrors.push("역할");
+
+      if (requiredFieldsErrors.length > 0) {
+        errorMessage = `다음 필수 항목을 확인해주세요: ${requiredFieldsErrors.join(
+          ", "
+        )}`;
+      }
+
+      // 날짜 형식 오류 확인
+      if (errors.dateError) {
+        errorMessage = errorMessage
+          ? `${errorMessage}. 또한, ${errors.dateErrorMessage}`
+          : errors.dateErrorMessage;
+      }
+
+      console.log("표시할 오류 메시지:", errorMessage);
+      console.groupEnd();
+
+      this.showErrorMessage(errorMessage || "입력 정보를 확인해주세요.");
+    },
diff --git a/src/components/admin/organization/SearchComponent.vue b/src/components/admin/organization/SearchComponent.vue
--- /dev/null
+++ b/src/components/admin/organization/SearchComponent.vue
+<template>
+  <div class="search-component">
+    <!-- 검색 바 -->
+    <v-card flat elevation="0" class="pa-2 search-card">
+      <v-text-field
+        v-model="query"
+        prepend-inner-icon="mdi-magnify"
+        label="그룹명, 순명, 이름으로 검색"
+        solo
+        rounded
+        dense
+        hide-details
+        clearable
+        background-color="#f5f5f5"
+        @input="onQueryChange"
+      >
+        <template v-slot:append>
+          <v-chip-group v-model="type" mandatory column @change="onTypeChange">
+            <v-chip small outlined value="all">전체</v-chip>
+            <v-chip small outlined value="group">그룹</v-chip>
+            <v-chip small outlined value="order">순</v-chip>
+            <v-chip small outlined value="name">이름</v-chip>
+          </v-chip-group>
+        </template>
+      </v-text-field>
+    </v-card>
+
+    <!-- 검색 결과 -->
+    <v-expand-transition>
+      <v-card v-if="query && hasResults" flat class="mt-2 mb-4">
+        <v-tabs v-model="activeTab" background-color="#edeef3" grow>
+          <v-tab v-if="groupResults.length > 0">
+            그룹 ({{ groupResults.length }})
+          </v-tab>
+          <v-tab v-if="memberResults.length > 0">
+            멤버 ({{ memberResults.length }})
+          </v-tab>
+        </v-tabs>
+
+        <v-tabs-items v-model="activeTab">
+          <!-- 그룹 검색 결과 -->
+          <v-tab-item v-if="groupResults.length > 0">
+            <v-list dense>
+              <v-list-item
+                v-for="org in groupResults"
+                :key="org.id"
+                @click="$emit('select-organization', org)"
+              >
+                <v-list-item-icon>
+                  <v-icon small color="#7EA394">mdi-folder-outline</v-icon>
+                </v-list-item-icon>
+                <v-list-item-content>
+                  <v-list-item-title>{{
+                    org.organization_name
+                  }}</v-list-item-title>
+                  <v-list-item-subtitle>
+                    코드: {{ org.organization_code }} | 멤버:
+                    {{ org.memberCount || 0 }}명
+                  </v-list-item-subtitle>
+                </v-list-item-content>
+                <v-list-item-action>
+                  <v-btn
+                    icon
+                    small
+                    @click.stop="$emit('edit-organization', org)"
+                  >
+                    <v-icon small color="#7EA394">mdi-pencil</v-icon>
+                  </v-btn>
+                </v-list-item-action>
+              </v-list-item>
+            </v-list>
+          </v-tab-item>
+
+          <!-- 멤버 검색 결과 -->
+          <v-tab-item v-if="memberResults.length > 0">
+            <v-list dense>
+              <v-list-item
+                v-for="member in memberResults"
+                :key="member.userId"
+                @click="$emit('select-member', member)"
+                :data-member-id="member.userId"
+              >
+                <v-list-item-avatar size="32" class="name-avatar">
+                  <span class="white--text">{{ member.name.charAt(0) }}</span>
+                </v-list-item-avatar>
+                <v-list-item-content>
+                  <v-list-item-title>{{ member.name }}</v-list-item-title>
+                  <v-list-item-subtitle>
+                    {{ member.phoneNumber || "번호 없음" }} |
+                    {{ member.roleName }}
+                    <span
+                      v-if="member.organizationName"
+                      class="grey--text text--darken-1"
+                    >
+                      | {{ member.organizationName }}
+                    </span>
+                    <v-chip
+                      v-if="member.isNewMember === 'Y'"
+                      x-small
+                      color="orange"
+                      text-color="black"
+                      class="ml-1"
+                    >
+                      새가족
+                    </v-chip>
+                  </v-list-item-subtitle>
+                </v-list-item-content>
+                <v-list-item-action>
+                  <v-btn icon small @click.stop="$emit('edit-member', member)">
+                    <v-icon small color="#7EA394">mdi-pencil</v-icon>
+                  </v-btn>
+                </v-list-item-action>
+              </v-list-item>
+            </v-list>
+          </v-tab-item>
+        </v-tabs-items>
+      </v-card>
+    </v-expand-transition>
+  </div>
+</template>
+
+<script>
+export default {
+  name: "SearchComponent",
+
+  props: {
+    organizations: {
+      type: Array,
+      default: () => [],
+    },
+    getMembers: {
+      type: Function,
+      required: true,
+    },
+  },
+
+  data() {
+    return {
+      query: "",
+      type: "all", // 'all', 'group', 'order', 'name'
+      activeTab: 0,
+      groupResults: [],
+      memberResults: [],
+      searchTimer: null,
+    };
+  },
+
+  computed: {
+    hasResults() {
+      return this.groupResults.length > 0 || this.memberResults.length > 0;
+    },
+  },
+
+  methods: {
+    onQueryChange() {
+      // 디바운스 적용해서 타이핑 완료 후 검색 실행
+      clearTimeout(this.searchTimer);
+
+      if (!this.query || this.query.trim().length < 2) {
+        this.groupResults = [];
+        this.memberResults = [];
+        return;
+      }
+
+      this.searchTimer = setTimeout(() => {
+        this.performSearch();
+      }, 300);
+    },
+
+    onTypeChange() {
+      if (this.query && this.query.trim().length >= 2) {
+        this.performSearch();
+      }
+    },
+
+    async performSearch() {
+      const query = this.query.toLowerCase().trim();
+
+      // 그룹 검색
+      if (this.type === "all" || this.type === "group") {
+        this.searchOrganizations(query);
+      } else {
+        this.groupResults = [];
+      }
+
+      // 멤버 검색
+      if (
+        this.type === "all" ||
+        this.type === "name" ||
+        this.type === "order"
+      ) {
+        await this.searchMembers(query);
+      } else {
+        this.memberResults = [];
+      }
+
+      // 검색 결과가 있는 탭으로 활성화
+      this.$nextTick(() => {
+        if (this.hasResults) {
+          if (this.groupResults.length > 0) {
+            this.activeTab = 0;
+          } else if (this.memberResults.length > 0) {
+            this.activeTab = this.groupResults.length > 0 ? 1 : 0;
+          }
+        }
+      });
+    },
+
+    searchOrganizations(query) {
+      this.groupResults = this.organizations.filter((org) => {
+        return (
+          org.organization_name.toLowerCase().includes(query) ||
+          (org.organization_code &&
+            org.organization_code.toLowerCase().includes(query))
+        );
+      });
+    },
+
+    async searchMembers(query) {
+      this.memberResults = [];
+      this.$emit("search-start");
+
+      try {
+        // 최하위 조직들 찾기
+        const leafOrgs = this.organizations.filter(
+          (org) =>
+            !this.organizations.some(
+              (other) => other.upper_organization_id === org.id
+            )
+        );
+
+        // 개별 조직의 멤버를 모두 가져와서 통합 검색
+        for (const org of leafOrgs) {
+          try {
+            const members = await this.getMembers(org.id);
+
+            if (members && Array.isArray(members)) {
+              const filteredMembers = members.filter((member) => {
+                // 모든 검색은 이름을 기반으로 합니다
+                const nameMatches = member.name.toLowerCase().includes(query);
+
+                if (!nameMatches) return false; // 이름이 일치하지 않으면 항상 제외
+
+                // 검색 타입에 따른 추가 필터링
+                if (this.type === "all") {
+                  return true; // 이름이 일치하면 모든 멤버 포함
+                } else if (this.type === "name") {
+                  return true; // 이름 검색은 이미 위에서 필터링됨
+                } else if (this.type === "order") {
+                  // 순 검색: 순장이나 순원인 멤버만 포함 (이름 일치 조건 포함)
+                  return (
+                    member.roleName === "순장" || member.roleName === "순원"
+                  );
+                }
+
+                return false;
+              });
+
+              // 검색 결과에 조직 정보 추가
+              filteredMembers.forEach((member) => {
+                member.organizationId = org.id;
+                member.organizationName = org.organization_name;
+              });
+
+              this.memberResults = [...this.memberResults, ...filteredMembers];
+            }
+          } catch (error) {
+            console.error(`${org.organization_name} 멤버 검색 중 오류`, error);
+          }
+        }
+      } finally {
+        this.$emit("search-end");
+      }
+    },
+
+    clearSearch() {
+      this.query = "";
+      this.groupResults = [];
+      this.memberResults = [];
+    },
+  },
+};
+</script>
+
+<style scoped>
+/* 검색 카드 스타일 */
+.search-card {
+  border-radius: 8px;
+  background-color: transparent !important;
+  transition: all 0.3s;
+}
+
+.search-card:hover {
+  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
+}
+
+/* 이름 아바타 스타일 */
+.name-avatar {
+  background: linear-gradient(135deg, #7ea394, #c2e0c2) !important;
+  font-weight: bold;
+}
+</style>
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
+
+        <!-- 검색 기능 추가 -->
+        <div class="search-container d-flex align-center mr-4">
+          <v-text-field
+            v-model="searchQuery"
+            outlined
+            dense
+            hide-details
+            placeholder="조직/멤버 검색"
+            prepend-inner-icon="mdi-magnify"
+            color="#7EA394"
+            class="search-input mx-2"
+            @input="debounceSearch"
+            @focus="showSearchResults = true"
+            @blur="hideSearchResultsDelayed"
+            @keyup.esc="showSearchResults = false"
+          ></v-text-field>
+          <v-btn-toggle
+            v-model="searchType"
+            mandatory
+            dense
+            color="#7EA394"
+            class="search-toggle rounded-lg"
+          >
+            <v-btn small value="all">전체</v-btn>
+            <v-btn small value="organization">조직</v-btn>
+            <v-btn small value="member">멤버</v-btn>
+          </v-btn-toggle>
+
+          <!-- 검색 결과 표시 영역 -->
+          <v-card
+            v-show="showSearchResults && searchResults.length > 0"
+            class="search-results elevation-5"
+            rounded
+          >
+            <v-list dense>
+              <v-subheader v-if="filteredOrganizationResults.length > 0"
+                >조직</v-subheader
+              >
+              <v-list-item
+                v-for="org in filteredOrganizationResults"
+                :key="`org-${org.id}`"
+                @click="selectSearchedOrganization(org)"
+                dense
+              >
+                <v-list-item-icon class="mr-2">
+                  <v-icon small>mdi-folder</v-icon>
+                </v-list-item-icon>
+                <v-list-item-content>
+                  <v-list-item-title>{{
+                    org.organization_name
+                  }}</v-list-item-title>
+                  <v-list-item-subtitle class="text-caption">
+                    멤버: {{ org.memberCount || 0 }}명
+                  </v-list-item-subtitle>
+                </v-list-item-content>
+              </v-list-item>
+
+              <v-divider
+                v-if="
+                  filteredOrganizationResults.length > 0 &&
+                  filteredMemberResults.length > 0
+                "
+              ></v-divider>
+
+              <v-subheader v-if="filteredMemberResults.length > 0"
+                >멤버</v-subheader
+              >
+              <v-list-item
+                v-for="member in filteredMemberResults"
+                :key="`member-${member.userId}`"
+                @click="selectSearchedMember(member)"
+                dense
+              >
+                <v-list-item-icon class="mr-2">
+                  <v-icon small>mdi-account</v-icon>
+                </v-list-item-icon>
+                <v-list-item-content>
+                  <v-list-item-title>{{ member.name }}</v-list-item-title>
+                  <v-list-item-subtitle class="text-caption">
+                    {{ member.organizationName || "소속 정보 없음" }}
+                  </v-list-item-subtitle>
+                </v-list-item-content>
+              </v-list-item>
+
+              <v-list-item v-if="searchResults.length === 0">
+                <v-list-item-content class="text-center">
+                  <v-list-item-title>검색 결과가 없습니다.</v-list-item-title>
+                </v-list-item-content>
+              </v-list-item>
+            </v-list>
+          </v-card>
+        </div>
+
+              :expanded-org-ids="expandedOrganizationIds"
+      // 검색 관련 데이터 추가
+      searchQuery: "",
+      searchType: "all",
+      searchResults: [],
+      showSearchResults: false,
+      searchDebounceTimeout: null,
+      searchResultsTimeout: null,
+      highlightedMemberId: null,
+      expandedOrganizationIds: [],
+
+      // 전체 멤버 캐싱
+      memberCache: {},
+      allMembersLoaded: false,
+
+    // 필터링된 검색 결과
+    filteredOrganizationResults() {
+      if (this.searchType === "member") return [];
+      return this.searchResults.filter((item) => item.type === "organization");
+    },
+
+    filteredMemberResults() {
+      if (this.searchType === "organization") return [];
+      return this.searchResults.filter((item) => item.type === "member");
+    },
+
+    // 검색 관련 메서드 추가
+    debounceSearch() {
+      clearTimeout(this.searchDebounceTimeout);
+      this.searchDebounceTimeout = setTimeout(() => {
+        this.searchItems();
+      }, 300); // 300ms 디바운싱
+    },
+
+    hideSearchResultsDelayed() {
+      clearTimeout(this.searchResultsTimeout);
+      this.searchResultsTimeout = setTimeout(() => {
+        this.showSearchResults = false;
+      }, 200);
+    },
+
+    searchItems() {
+      // 검색어가 없으면 검색 결과 초기화
+      if (!this.searchQuery.trim()) {
+        this.searchResults = [];
+        this.showSearchResults = false;
+        return;
+      }
+
+      const query = this.searchQuery.toLowerCase().trim();
+      const results = [];
+
+      // 검색 타입에 따라 다른 검색 로직 적용
+      if (this.searchType === "all" || this.searchType === "organization") {
+        // 조직 검색 로직
+        this.searchOrganizations(query, results);
+      }
+
+      if (this.searchType === "all" || this.searchType === "member") {
+        // 멤버 검색 로직
+        this.searchMembers(query, results);
+      }
+
+      this.searchResults = results;
+      this.showSearchResults = results.length > 0;
+    },
+
+    searchOrganizations(query, results) {
+      const searchInOrganizations = (orgs) => {
+        orgs.forEach((org) => {
+          if (org.organization_name.toLowerCase().includes(query)) {
+            // 최하위 조직(isLeafNode가 true)인 경우에만 결과에 추가
+            if (org.isLeafNode) {
+              results.push({
+                type: "organization",
+                id: org.id,
+                organization_name: org.organization_name,
+                organization_code: org.organization_code,
+                memberCount: org.memberCount,
+                isLeafNode: org.isLeafNode,
+                path: this.getOrganizationPath(org.id),
+              });
+            }
+          }
+
+          if (org.children && org.children.length > 0) {
+            searchInOrganizations(org.children);
+          }
+        });
+      };
+
+      searchInOrganizations(this.organizationTree);
+    },
+
+    searchMembers(query, results) {
+      // 아직 모든 멤버가 로드되지 않았다면 로드
+      if (!this.allMembersLoaded) {
+        this.loadAllMembers();
+      }
+
+      // 모든 멤버 검색
+      const allMembers = this.getAllCachedMembers();
+
+      allMembers.forEach((member) => {
+        if (
+          (member.name && member.name.toLowerCase().includes(query)) ||
+          (member.phoneNumber && member.phoneNumber.includes(query)) ||
+          (member.email &&
+            member.email &&
+            member.email.toLowerCase().includes(query))
+        ) {
+          results.push({
+            type: "member",
+            userId: member.userId,
+            name: member.name,
+            phoneNumber: member.phoneNumber,
+            organizationId: member.organizationId,
+            organizationName: member.organizationName,
+          });
+        }
+      });
+    },
+
+    getAllCachedMembers() {
+      // 모든 캐시된 멤버를 합쳐서 반환
+      let allMembers = [];
+
+      // 현재 선택된 조직의 멤버 추가
+      if (this.selectedOrganization && this.members.length > 0) {
+        allMembers = this.members.map((member) => ({
+          ...member,
+          organizationId: this.selectedOrganization.id,
+          organizationName: this.selectedOrganization.organization_name,
+        }));
+      }
+
+      // 캐시된 다른 조직의 멤버들 추가
+      Object.entries(this.memberCache).forEach(([orgId, data]) => {
+        // 현재 선택된 조직의 멤버는 이미 추가됨
+        if (
+          this.selectedOrganization &&
+          this.selectedOrganization.id === Number(orgId)
+        ) {
+          return;
+        }
+
+        if (data.members && Array.isArray(data.members)) {
+          const membersWithOrg = data.members.map((member) => ({
+            ...member,
+            organizationId: Number(orgId),
+            organizationName: data.organization_name,
+          }));
+          allMembers = allMembers.concat(membersWithOrg);
+        }
+      });
+
+      return allMembers;
+    },
+
+    getOrganizationPath(orgId) {
+      // 조직 ID로부터 경로 배열 구하기
+      const findPath = (orgs, targetId, currentPath = []) => {
+        for (const org of orgs) {
+          const newPath = [...currentPath, org.id];
+          if (org.id === targetId) {
+            return newPath;
+          }
+
+          if (org.children && org.children.length > 0) {
+            const found = findPath(org.children, targetId, newPath);
+            if (found) return found;
+          }
+        }
+        return null;
+      };
+
+      return findPath(this.organizationTree, orgId) || [];
+    },
+
+    selectSearchedOrganization(org) {
+      this.showSearchResults = false;
+      this.highlightedMemberId = null;
+
+      // 해당 조직의 경로 펼치기
+      if (org.path && org.path.length > 0) {
+        this.expandedOrganizationIds = org.path;
+
+        // OrganizationTree 컴포넌트에 확장 정보 전달
+        this.$nextTick(() => {
+          // 선택된 조직으로 이동 및 멤버 로드
+          if (org.isLeafNode) {
+            this.selectOrganization(org);
+          }
+        });
+      }
+    },
+
+    selectSearchedMember(member) {
+      this.showSearchResults = false;
+      this.highlightedMemberId = member.userId;
+
+      // 해당 멤버의 조직으로 이동
+      if (member.organizationId) {
+        const org = this.findOrganizationById(member.organizationId);
+        if (org) {
+          this.selectSearchedOrganization(org);
+
+          // 멤버 목록에서 해당 멤버 하이라이트
+          this.$nextTick(() => {
+            // 멤버 하이라이트 로직 (CSS 클래스 등으로 구현)
+          });
+        }
+      }
+    },
+
+    findOrganizationById(orgId) {
+      const findOrg = (orgs) => {
+        for (const org of orgs) {
+          if (org.id === orgId) {
+            return {
+              type: "organization",
+              id: org.id,
+              organization_name: org.organization_name,
+              organization_code: org.organization_code,
+              memberCount: org.memberCount,
+              isLeafNode: org.isLeafNode,
+              path: this.getOrganizationPath(org.id),
+            };
+          }
+
+          if (org.children && org.children.length > 0) {
+            const found = findOrg(org.children);
+            if (found) return found;
+          }
+        }
+        return null;
+      };
+
+      return findOrg(this.organizationTree);
+    },
+
+
+          // 모든 조직 정보를 가져온 후, 멤버 캐시 초기화
+          this.memberCache = {};
+          this.allMembersLoaded = false;
+
+
+        // 모든 조직 정보를 가져온 후, 멤버 캐시 초기화
+        this.memberCache = {};
+        this.allMembersLoaded = false;
-        const members = await this.getMembersWithRoles(organizationId, true);
+        let members;
+
+        // 이미 캐시된 데이터가 있으면 사용
+        if (
+          this.memberCache[organizationId] &&
+          this.memberCache[organizationId].members
+        ) {
+          members = this.memberCache[organizationId].members;
+        } else {
+          members = await this.getMembersWithRoles(organizationId, true);
+
+          // 유효한 멤버 배열인 경우 캐시에 저장
+          if (members && Array.isArray(members)) {
+            // 조직 정보 찾기
+            const organization = this.findOrganizationById(organizationId);
+            this.memberCache[organizationId] = {
+              members,
+              organization_name: organization
+                ? organization.organization_name
+                : `조직 ID: ${organizationId}`,
+            };
+          }
+        }
+
+        // 멤버 목록이 로드된 후 하이라이트된 멤버가 있으면 강조 표시
+        if (this.highlightedMemberId) {
+          this.$nextTick(() => {
+            this.highlightMember(this.highlightedMemberId);
+          });
+        }
-
-            // 선택된 조직이 있으면 멤버 목록 새로고침
-            if (this.selectedOrganization) {
-              console.log(`🔄 멤버 리스트 새로고침`);
-              await this.fetchMembers(this.selectedOrganization.id);
-            }
+
+    // 모든 최하위 조직의 멤버 로드 메서드 추가
+    async loadAllMembers() {
+      if (this.allMembersLoaded) return;
+
+      try {
+        // 최하위 조직 찾기 (children이 없는 조직)
+        const findLeafOrganizations = (orgs) => {
+          let leaves = [];
+          orgs.forEach((org) => {
+            if (!org.children || org.children.length === 0 || org.isLeafNode) {
+              leaves.push(org);
+            } else if (org.children && org.children.length > 0) {
+              leaves = leaves.concat(findLeafOrganizations(org.children));
+            }
+          });
+          return leaves;
+        };
+
+        const leafOrgs = findLeafOrganizations(this.organizationTree);
+
+        // 각 최하위 조직의 멤버 캐싱
+        for (const org of leafOrgs) {
+          await this.cacheOrganizationMembers(org.id);
+        }
+
+        this.allMembersLoaded = true;
+      } catch (error) {
+        console.error("모든 멤버 로드 중 오류:", error);
+      }
+    },
+
+    // 조직의 멤버 정보를 캐시하는 메서드 추가
+    async cacheOrganizationMembers(organizationId) {
+      // 이미 캐시된 데이터가 있으면 다시 가져오지 않음
+      if (
+        this.memberCache[organizationId] &&
+        this.memberCache[organizationId].members
+      ) {
+        return this.memberCache[organizationId].members;
+      }
+
+      try {
+        const members = await this.getMembersWithRoles(organizationId, false);
+
+        // 유효한 멤버 배열인 경우 캐시에 저장
+        if (members && Array.isArray(members)) {
+          // 조직 정보 찾기
+          const organization = this.findOrganizationById(organizationId);
+          this.memberCache[organizationId] = {
+            members,
+            organization_name: organization
+              ? organization.organization_name
+              : `조직 ID: ${organizationId}`,
+          };
+          return members;
+        }
+        return [];
+      } catch {
+        return [];
+      }
+    },
+
+    // 멤버 강조 표시 메서드 추가
+    highlightMember(memberId) {
+      // 이전 강조 표시 제거
+      const previousHighlighted = document.querySelector(".highlighted-member");
+      if (previousHighlighted) {
+        previousHighlighted.classList.remove("highlighted-member");
+      }
+
+      // 새 멤버 강조 표시
+      const memberRow = document.querySelector(
+        `[data-member-id="${memberId}"]`
+      );
+      if (memberRow) {
+        memberRow.classList.add("highlighted-member");
+        // 화면에 보이도록 스크롤
+        memberRow.scrollIntoView({ behavior: "smooth", block: "center" });
+      }
+
+      // 3초 후 강조 표시 제거
+      setTimeout(() => {
+        const el = document.querySelector(".highlighted-member");
+        if (el) {
+          el.classList.remove("highlighted-member");
+        }
+        this.highlightedMemberId = null;
+      }, 3000);
+    },
+
+/* 검색 관련 스타일 */
+.search-container {
+  position: relative;
+  min-width: 300px;
+}
+
+.search-input {
+  max-width: 250px;
+}
+
+.search-toggle {
+  height: 40px;
+}
+
+.search-results {
+  position: absolute;
+  top: 50px;
+  left: 0;
+  width: 350px;
+  max-height: 400px;
+  overflow-y: auto;
+  z-index: 100;
+}
+
+.highlighted-member {
+  background-color: rgba(126, 163, 148, 0.2);
+  transition: background-color 0.3s;
+}
+
+@media (max-width: 960px) {
+  .search-container {
+    margin-bottom: 10px;
+    flex-direction: column;
+    width: 100%;
+  }
+
+  .search-input {
+    max-width: 100%;
+    width: 100%;
+  }
+
+  .search-results {
+    width: 100%;
+  }
+}
diff --git a/src/components/admin/organization/DeleteConfirmDialog.vue b/src/components/admin/organization/DeleteConfirmDialog.vue
--- /dev/null
+++ b/src/components/admin/organization/DeleteConfirmDialog.vue
+<template>
+  <v-dialog v-model="visible" max-width="400px">
+    <v-card rounded="lg">
+      <v-card-title class="text-h5 wc-bold-600"
+        >정말 삭제하시겠습니까?</v-card-title
+      >
+      <v-card-text>
+        {{ text }}
+        <div class="red--text mt-2">이 작업은 되돌릴 수 없습니다.</div>
+      </v-card-text>
+      <v-card-actions>
+        <v-spacer></v-spacer>
+        <v-btn color="#7EA394" text @click="cancel">취소</v-btn>
+        <v-btn color="red" text @click="confirm">삭제</v-btn>
+      </v-card-actions>
+    </v-card>
+  </v-dialog>
+</template>
+
+<script>
+export default {
+  name: "DeleteConfirmDialog",
+
+  props: {
+    value: {
+      type: Boolean,
+      default: false,
+    },
+    text: {
+      type: String,
+      default: "선택된 항목을 삭제하시겠습니까?",
+    },
+  },
+
+  computed: {
+    visible: {
+      get() {
+        return this.value;
+      },
+      set(value) {
+        this.$emit("input", value);
+      },
+    },
+  },
+
+  methods: {
+    confirm() {
+      this.$emit("confirm");
+    },
+
+    cancel() {
+      this.$emit("input", false);
+    },
+  },
+};
+</script>
+
+<style scoped>
+.wc-bold-600 {
+  font-weight: 600;
+}
+</style>
diff --git a/src/components/admin/organization/MemberForm.vue b/src/components/admin/organization/MemberForm.vue
--- /dev/null
+++ b/src/components/admin/organization/MemberForm.vue
+<template>
+  <v-dialog v-model="visible" max-width="600px">
+    <v-card rounded="lg">
+      <v-card-title class="wc-bold-600">
+        <span class="text-h5 font-weight-bold">{{
+          editedMember.userId ? "멤버 수정" : "새로운 인원 등록"
+        }}</span>
+        <v-row>
+          <v-col cols="12" class="pt-1 pb-0">
+            <span class="subtitle-2 grey--text text--darken-1">
+              {{
+                editedMember.userId
+                  ? "기존 멤버의 정보를 수정합니다. 변경된 필드는 자동으로 저장됩니다."
+                  : "새로운 인원을 등록합니다. 필수 항목(*)을 모두 입력해야 저장이 가능합니다."
+              }}
+            </span>
+          </v-col>
+        </v-row>
+      </v-card-title>
+      <v-card-text>
+        <v-container>
+          <!-- 상태 토글 스위치 -->
+          <v-row class="ma-0 pa-0 pt-3 pb-5 px-5" v-if="editedMember.userId">
+            <!-- 카카오톡 단톡방 참여여부 -->
+            <v-col cols="12" md="4" class="d-flex align-center">
+              <v-icon size="22" class="mr-2" color="#262626">mdi-chat</v-icon>
+              <span class="subtitle-1 font-weight-medium"
+                >카톡방 참여 여부</span
+              >
+              <v-spacer></v-spacer>
+              <label class="custom-switch mt-0 pt-0">
+                <input
+                  type="checkbox"
+                  :checked="editedMember.isKakaotalkChatMember === 'Y'"
+                  @change="
+                    editedMember.isKakaotalkChatMember = $event.target.checked
+                      ? 'Y'
+                      : 'N'
+                  "
+                />
+                <span class="custom-slider"></span>
+              </label>
+            </v-col>
+
+            <!-- 장결자 여부 -->
+            <v-col cols="12" md="4" class="d-flex align-center">
+              <v-icon size="22" class="mr-2" color="#262626"
+                >mdi-account-check</v-icon
+              >
+              <span class="subtitle-1 font-weight-medium">장결자 여부</span>
+              <v-spacer></v-spacer>
+              <label class="custom-switch mt-0 pt-0">
+                <input
+                  type="checkbox"
+                  :checked="editedMember.isLongTermAbsentee === 'Y'"
+                  @change="
+                    editedMember.isLongTermAbsentee = $event.target.checked
+                      ? 'Y'
+                      : 'N'
+                  "
+                />
+                <span class="custom-slider"></span>
+              </label>
+            </v-col>
+
+            <!-- 새가족 여부 -->
+            <v-col cols="12" md="4" class="d-flex align-center">
+              <v-icon size="22" class="mr-2" color="#262626"
+                >mdi-account-multiple-plus</v-icon
+              >
+              <span class="subtitle-1 font-weight-medium">새가족 여부</span>
+              <v-spacer></v-spacer>
+              <label class="custom-switch mt-0 pt-0">
+                <input
+                  type="checkbox"
+                  :checked="editedMember.isNewMember === 'Y'"
+                  @change="
+                    editedMember.isNewMember = $event.target.checked ? 'Y' : 'N'
+                  "
+                />
+                <span class="custom-slider"></span>
+              </label>
+            </v-col>
+          </v-row>
+
+          <!-- 정보입력 -->
+          <v-row>
+            <v-col cols="12" class="text-center mt-5 px-15">
+              <!-- 이름 -->
+              <div class="field-title mb-1 text-left">
+                이름 <span class="red--text">*</span>
+              </div>
+              <v-text-field
+                v-model="editedMember.name"
+                label="이름 (필수)"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent org-custom-input"
+                required
+                persistent-hint
+                :error="validationErrors.name"
+                :error-messages="
+                  validationErrors.name ? '이름을 입력해주세요' : ''
+                "
+              ></v-text-field>
+
+              <!-- 동명이인 구분자 -->
+              <div class="field-title mb-1 text-left">구분자</div>
+              <v-text-field
+                v-model="editedMember.nameSuffix"
+                label="구분자 (선택, 기본값: FFF)"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent org-custom-input"
+                persistent-hint
+              ></v-text-field>
+
+              <!-- 전화번호 -->
+              <div class="field-title mb-1 text-left">
+                전화번호 <span class="red--text">*</span>
+              </div>
+              <v-text-field
+                v-model="editedMember.phoneNumber"
+                label="전화번호 (필수)"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent org-custom-input"
+                required
+                persistent-hint
+                :error="validationErrors.phoneNumber"
+                :error-messages="
+                  validationErrors.phoneNumber ? '전화번호를 입력해주세요' : ''
+                "
+              ></v-text-field>
+
+              <!-- 성별(드롭다운) -->
+              <div class="field-title mb-1 text-left">
+                성별 <span class="red--text">*</span>
+              </div>
+              <v-select
+                v-model="editedMember.genderType"
+                :items="[
+                  { text: '남성', value: 'M' },
+                  { text: '여성', value: 'F' },
+                ]"
+                item-text="text"
+                item-value="value"
+                label="성별"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
+                persistent-hint
+                :error="validationErrors.genderType"
+                :error-messages="
+                  validationErrors.genderType ? '성별을 선택해주세요' : ''
+                "
+              ></v-select>
+
+              <!-- 이메일 -->
+              <div class="field-title mb-1 text-left">이메일</div>
+              <v-text-field
+                v-model="editedMember.email"
+                label="이메일 (선택, 기본값: email@email.com)"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent org-custom-input"
+                persistent-hint
+              ></v-text-field>
+
+              <!-- 생년월일 -->
+              <div class="field-title mb-1 text-left">생년월일</div>
+              <v-menu
+                v-model="birthDateMenu"
+                :close-on-content-click="false"
+                :nudge-right="40"
+                transition="scale-transition"
+                offset-y
+                min-width="290px"
+              >
+                <template v-slot:activator="{ on, attrs }">
+                  <v-text-field
+                    v-model="editedMember.birthDate"
+                    label="생년월일"
+                    color="#7EA394"
+                    background-color="#edeef3"
+                    readonly
+                    solo
+                    rounded
+                    flat
+                    dense
+                    v-bind="attrs"
+                    v-on="on"
+                    class="mb-4 mx-auto org-custom-input"
+                    persistent-hint
+                  ></v-text-field>
+                </template>
+                <v-date-picker
+                  v-model="editedMember.birthDate"
+                  no-title
+                  @input="birthDateMenu = false"
+                ></v-date-picker>
+              </v-menu>
+
+              <!-- 교회 등록일 -->
+              <div class="field-title mb-1 text-left">교회 등록일</div>
+              <v-menu
+                v-model="registrationDateMenu"
+                :close-on-content-click="false"
+                :nudge-right="40"
+                transition="scale-transition"
+                offset-y
+                min-width="290px"
+              >
+                <template v-slot:activator="{ on, attrs }">
+                  <v-text-field
+                    v-model="editedMember.registrationDate"
+                    label="교회 등록일"
+                    color="#7EA394"
+                    background-color="#edeef3"
+                    readonly
+                    solo
+                    rounded
+                    flat
+                    dense
+                    v-bind="attrs"
+                    v-on="on"
+                    class="mb-4 mx-auto org-custom-input"
+                    persistent-hint
+                  ></v-text-field>
+                </template>
+                <v-date-picker
+                  v-model="editedMember.registrationDate"
+                  no-title
+                  @input="registrationDateMenu = false"
+                ></v-date-picker>
+              </v-menu>
+
+              <!-- 국적 -->
+              <div class="field-title mb-1 text-left">국적</div>
+              <v-select
+                v-model="editedMember.countryCode"
+                :items="countryItems"
+                item-text="text"
+                item-value="value"
+                label="국적"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
+                persistent-hint
+              ></v-select>
+
+              <!-- 역할 선택 -->
+              <div class="field-title mb-1 text-left">
+                역할 <span class="red--text">*</span>
+              </div>
+              <v-select
+                v-model="editedMember.roleId"
+                :items="roleItems"
+                item-text="text"
+                item-value="value"
+                label="역할 (필수)"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
+                required
+                persistent-hint
+                :error="validationErrors.roleId"
+                :error-messages="
+                  validationErrors.roleId ? '역할을 선택해주세요' : ''
+                "
+              ></v-select>
+
+              <v-col cols="12" class="pa-15 pt-4 pb-0">
+                <v-btn
+                  class="mx-auto custom-save-btn"
+                  block
+                  color="#7EA394"
+                  text
+                  @click="saveMember"
+                  :loading="savingMember"
+                  ><span class="wc-h3">{{
+                    editedMember.userId ? "데이터 수정" : "데이터 저장"
+                  }}</span></v-btn
+                >
+              </v-col>
+            </v-col>
+          </v-row>
+        </v-container>
+      </v-card-text>
+    </v-card>
+  </v-dialog>
+</template>
+
+<script>
+export default {
+  name: "MemberForm",
+
+  props: {
+    value: {
+      type: Boolean,
+      default: false,
+    },
+    member: {
+      type: Object,
+      default: null,
+    },
+    savingMember: {
+      type: Boolean,
+      default: false,
+    },
+  },
+
+  data() {
+    return {
+      editedMember: {
+        userId: null,
+        name: "",
+        nameSuffix: "",
+        phoneNumber: "",
+        genderType: "M",
+        email: "",
+        birthDate: null,
+        isNewMember: "N",
+        isLongTermAbsentee: "N",
+        isKakaotalkChatMember: "N",
+        roleId: 74,
+        roleName: "순원",
+        memberNumber: "",
+        registrationDate: null,
+        countryCode: "KOR",
+        address: "",
+        addressDetail: "",
+        postcode: "",
+        hobby: "",
+        city: null,
+        stateProvince: null,
+        isAddressPublic: "N",
+        isPhoneNumberPublic: "N",
+        snsUrl: null,
+      },
+      birthDateMenu: false,
+      registrationDateMenu: false,
+      validationErrors: {
+        name: false,
+        phoneNumber: false,
+        genderType: false,
+        roleId: false,
+      },
+      // 역할 정보
+      roleItems: [
+        { text: "그룹장", value: 72 },
+        { text: "EBS", value: 73 },
+        { text: "순원", value: 74 },
+      ],
+      // 국가 정보
+      countryItems: [
+        { text: "대한민국", value: "KOR" },
+        { text: "미국", value: "USA" },
+        { text: "일본", value: "JPN" },
+        { text: "중국", value: "CHN" },
+        { text: "기타", value: "ETC" },
+      ],
+    };
+  },
+
+  computed: {
+    visible: {
+      get() {
+        return this.value;
+      },
+      set(value) {
+        this.$emit("input", value);
+      },
+    },
+  },
+
+  watch: {
+    member: {
+      handler(newVal) {
+        if (newVal) {
+          this.editedMember = { ...newVal };
+        } else {
+          // 새 멤버 추가 기본값
+          this.editedMember = {
+            userId: null,
+            name: "",
+            nameSuffix: "FFF",
+            phoneNumber: "00000000000",
+            genderType: "M",
+            email: "email@email.com",
+            birthDate: null,
+            isNewMember: "Y",
+            isLongTermAbsentee: "N",
+            isKakaotalkChatMember: "N",
+            roleId: 74,
+            roleName: "순원",
+            memberNumber: "",
+            registrationDate: null,
+            countryCode: "KOR",
+            address: "",
+            addressDetail: "",
+            postcode: "",
+            hobby: "",
+            city: null,
+            stateProvince: null,
+            isAddressPublic: "N",
+            isPhoneNumberPublic: "N",
+            snsUrl: null,
+          };
+        }
+      },
+      immediate: true,
+    },
+  },
+
+  methods: {
+    // 필드 유효성 검사 메서드
+    validateFields() {
+      this.validationErrors = {
+        name: !this.editedMember.name || this.editedMember.name.trim() === "",
+        phoneNumber:
+          !this.editedMember.phoneNumber ||
+          this.editedMember.phoneNumber.trim() === "",
+        genderType: !this.editedMember.genderType,
+        roleId: !this.editedMember.roleId,
+      };
+
+      return !Object.values(this.validationErrors).some((v) => v === true);
+    },
+
+    saveMember() {
+      if (this.validateFields()) {
+        this.$emit("save", this.editedMember);
+      }
+    },
+
+    // 주소 검색 기능
+    execDaumPostcode() {
+      if (window.daum && window.daum.Postcode) {
+        new window.daum.Postcode({
+          oncomplete: (data) => {
+            let roadAddr = data.roadAddress;
+            let extraRoadAddr = "";
+
+            if (data.bname !== "" && /[동|로|가]$/g.test(data.bname)) {
+              extraRoadAddr += data.bname;
+            }
+            if (data.buildingName !== "" && data.apartment === "Y") {
+              extraRoadAddr +=
+                extraRoadAddr !== ""
+                  ? ", " + data.buildingName
+                  : data.buildingName;
+            }
+            if (extraRoadAddr !== "") {
+              extraRoadAddr = " (" + extraRoadAddr + ")";
+            }
+
+            this.editedMember.postcode = data.zonecode;
+            this.editedMember.address = roadAddr;
+
+            this.$nextTick(() => {
+              const addressDetailField = document.querySelector(
+                'input[v-model="editedMember.addressDetail"]'
+              );
+              if (addressDetailField) {
+                addressDetailField.focus();
+              }
+            });
+          },
+        }).open();
+      } else {
+        this.$store.dispatch("snackbar/showMessage", {
+          message: "주소 검색 서비스를 로드할 수 없습니다. 직접 입력해주세요.",
+          color: "warning",
+        });
+      }
+    },
+  },
+};
+</script>
+
+<style scoped>
+/* 필드 제목 스타일 */
+.field-title {
+  font-weight: 500;
+  font-size: 0.95rem;
+  color: #444;
+  margin-left: 5px;
+}
+
+/* 커스텀 입력 필드 공통 스타일 */
+.org-custom-input {
+  height: 50px !important;
+  border-radius: 20px !important;
+  border: 2px solid rgb(240, 238, 238) !important;
+  box-shadow: 5px 5px 15px #00000012, -5px -5px 15px #ffffff !important;
+  transition: all 0.3s ease;
+}
+
+.org-custom-input:focus-within {
+  box-shadow: 7px 7px 20px #00000015, -7px -7px 20px #ffffff !important;
+  border-color: #7ea394 !important;
+}
+
+/* 커스텀 셀렉트 스타일 */
+.org-custom-select .v-input__slot {
+  border-radius: 20px !important;
+  box-shadow: 5px 5px 15px #00000012, -5px -5px 15px #ffffff !important;
+}
+
+/* 토글 스위치 스타일 */
+.custom-switch {
+  position: relative;
+  display: inline-block;
+  width: 60px;
+  height: 34px;
+}
+
+.custom-switch input {
+  opacity: 0;
+  width: 0;
+  height: 0;
+}
+
+.custom-slider {
+  position: absolute;
+  cursor: pointer;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  background-color: #ccc;
+  transition: 0.4s;
+  border-radius: 34px;
+}
+
+.custom-slider:before {
+  position: absolute;
+  content: "";
+  height: 26px;
+  width: 26px;
+  left: 4px;
+  bottom: 4px;
+  background-color: white;
+  transition: 0.4s;
+  border-radius: 50%;
+}
+
+input:checked + .custom-slider {
+  background-color: #7ea394;
+}
+
+input:focus + .custom-slider {
+  box-shadow: 0 0 1px #7ea394;
+}
+
+input:checked + .custom-slider:before {
+  transform: translateX(26px);
+}
+
+/* 커스텀 저장 버튼 스타일 */
+.custom-save-btn {
+  height: 50px !important;
+  border-radius: 20px !important;
+  background-color: #7ea394 !important;
+  color: white !important;
+  font-weight: 500 !important;
+  box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.1) !important;
+  transition: all 0.3s ease !important;
+}
+
+.custom-save-btn:hover {
+  background-color: #6a8d82 !important;
+  box-shadow: 4px 4px 12px rgba(0, 0, 0, 0.15) !important;
+}
+
+.custom-save-btn:disabled {
+  background-color: #cccccc !important;
+  color: #888888 !important;
+}
+
+.bg-transparent {
+  background-color: transparent !important;
+}
+</style>
diff --git a/src/components/admin/organization/MemberList.vue b/src/components/admin/organization/MemberList.vue
--- /dev/null
+++ b/src/components/admin/organization/MemberList.vue
+<template>
+  <v-card flat>
+    <v-card-title class="pb-0">
+      <span class="subtitle-1 font-weight-bold">
+        {{
+          selectedOrganization
+            ? selectedOrganization.organization_name
+            : "조직을 선택하세요"
+        }}
+        <span v-if="selectedOrganization" class="text-caption ml-2">
+          (총 {{ members.length }}명)
+        </span>
+      </span>
+    </v-card-title>
+    <v-card-text class="pt-0">
+      <v-alert
+        v-if="selectedOrganization && !selectedOrganization.isLeafNode"
+        type="info"
+        dense
+        text
+        class="ma-2"
+      >
+        최하위 조직만 멤버를 관리할 수 있습니다. 최하위 조직을 선택해주세요.
+      </v-alert>
+      <v-data-table
+        :headers="memberHeaders"
+        :items="members"
+        :items-per-page="-1"
+        :loading="loading"
+        class="elevation-0"
+        :footer-props="{
+          'items-per-page-options': [10, 20, 50, 100, -1],
+          'items-per-page-text': 'Rows per page:',
+          'items-per-page-all-text': 'All',
+        }"
+        :no-data-text="
+          selectedOrganization
+            ? selectedOrganization.isLeafNode
+              ? '멤버가 없습니다'
+              : '최하위 조직만 멤버를 조회할 수 있습니다'
+            : '조직을 선택하세요'
+        "
+      >
+        <template v-slot:item="{ item }">
+          <tr>
+            <td>
+              <div class="d-flex align-center">
+                <v-avatar size="32" class="mr-2 name-avatar">
+                  <span class="white--text">{{ item.name.charAt(0) }}</span>
+                </v-avatar>
+                <div>
+                  <div class="member-name">{{ item.name }}</div>
+                  <div class="member-suffix">
+                    {{ item.nameSuffix || "구분자 없음" }}
+                  </div>
+                </div>
+              </div>
+            </td>
+            <td>{{ item.phoneNumber || "번호 없음" }}</td>
+            <td>{{ item.email || "이메일 없음" }}</td>
+            <td>{{ item.genderType === "M" ? "남성" : "여성" }}</td>
+            <td>
+              <!-- 역할 칩 렌더링 단순화 -->
+              <v-chip
+                v-if="
+                  ['그룹장', '부그룹장', '순장', 'EBS'].includes(item.roleName)
+                "
+                small
+                :color="getRoleColor(item.roleName)"
+                text-color="black"
+                class="mr-1"
+              >
+                {{ item.roleName }}
+              </v-chip>
+              <v-chip
+                v-if="item.isNewMember === 'Y'"
+                small
+                color="orange"
+                text-color="black"
+                class="mr-1"
+              >
+                새가족
+              </v-chip>
+              <v-chip
+                v-if="item.isLongTermAbsentee === 'Y'"
+                small
+                color="red"
+                text-color="black"
+                class="mr-1"
+              >
+                장기결석
+              </v-chip>
+              <v-chip
+                v-if="['순원', '회원'].includes(item.roleName)"
+                small
+                :color="getRoleColor(item.roleName)"
+                text-color="black"
+              >
+                {{ item.roleName }}
+              </v-chip>
+            </td>
+            <td class="text-right">
+              <v-btn icon small @click="$emit('edit-member', item)">
+                <v-icon small color="#7EA394">mdi-pencil</v-icon>
+              </v-btn>
+              <v-btn icon small @click="$emit('delete-member', item)">
+                <v-icon small color="red">mdi-delete</v-icon>
+              </v-btn>
+            </td>
+          </tr>
+        </template>
+      </v-data-table>
+    </v-card-text>
+  </v-card>
+</template>
+
+<script>
+export default {
+  name: "MemberList",
+
+  props: {
+    selectedOrganization: {
+      type: Object,
+      default: null,
+    },
+    members: {
+      type: Array,
+      default: () => [],
+    },
+    loading: {
+      type: Boolean,
+      default: false,
+    },
+  },
+
+  data() {
+    return {
+      memberHeaders: [
+        { text: "이름", value: "name", sortable: true },
+        { text: "전화번호", value: "phoneNumber", sortable: true },
+        { text: "이메일", value: "email", sortable: true },
+        { text: "성별", value: "genderType", sortable: true },
+        { text: "상태/역할", value: "status", sortable: false },
+        { text: "관리", value: "actions", sortable: false, align: "right" },
+      ],
+    };
+  },
+
+  methods: {
+    // 역할에 따른 색상 지정
+    getRoleColor(roleName) {
+      const colorMap = {
+        그룹장: "#B3C6FF", // 파스텔 블루
+        부그룹장: "#B3C6FF", // 그룹장과 같은 파스텔 블루
+        순장: "#B3C6FF", // 그룹장과 같은 파스텔 블루
+        EBS: "#FFF4B3", // 파스텔 옐로우
+        순원: "#C2E0C2", // 파스텔 그린
+        회원: "#D6EAD6", // 연한 파스텔 그린
+      };
+      return colorMap[roleName] || "#E0E0E0"; // 기본 연한 회색
+    },
+  },
+};
+</script>
+
+<style scoped>
+/* 이름 아바타 스타일 */
+.name-avatar {
+  background: linear-gradient(135deg, #7ea394, #c2e0c2) !important;
+  font-weight: bold;
+}
+
+/* 멤버 정보 표시 스타일 */
+.member-name {
+  font-weight: 600;
+}
+
+.member-suffix {
+  opacity: 0.7;
+  font-size: 0.85em;
+}
+</style>
diff --git a/src/components/admin/organization/OrganizationDialog.vue b/src/components/admin/organization/OrganizationDialog.vue
--- /dev/null
+++ b/src/components/admin/organization/OrganizationDialog.vue
+<template>
+  <v-dialog v-model="visible" max-width="500px">
+    <v-card rounded="lg">
+      <v-card-title class="wc-bold-600">
+        <span class="text-h5">{{
+          editedOrganization.id ? "조직 수정" : "조직 추가"
+        }}</span>
+      </v-card-title>
+      <v-card-text>
+        <v-container>
+          <v-row>
+            <v-col cols="12">
+              <v-text-field
+                v-model="editedOrganization.organization_name"
+                label="조직명"
+                required
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent"
+              ></v-text-field>
+            </v-col>
+            <v-col cols="12">
+              <v-text-field
+                v-model="editedOrganization.organization_code"
+                label="조직 코드"
+                required
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent"
+              ></v-text-field>
+            </v-col>
+            <v-col cols="12">
+              <v-select
+                v-model="editedOrganization.upper_organization_id"
+                :items="organizationSelectItems"
+                item-text="text"
+                item-value="value"
+                label="상위 조직"
+                hint="상위 조직이 없으면 비워두세요"
+                persistent-hint
+                clearable
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent"
+              ></v-select>
+            </v-col>
+            <v-col cols="12">
+              <v-textarea
+                v-model="editedOrganization.organization_description"
+                label="설명"
+                rows="3"
+                background-color="#edeef3"
+                color="#7EA394"
+                solo
+                rounded
+                flat
+                dense
+                hide-details="auto"
+                class="mb-4 mx-auto bg-transparent"
+              ></v-textarea>
+            </v-col>
+          </v-row>
+        </v-container>
+      </v-card-text>
+      <v-card-actions>
+        <v-spacer></v-spacer>
+        <v-btn color="#7EA394" text @click="close">취소</v-btn>
+        <v-btn color="#7EA394" text @click="save">저장</v-btn>
+      </v-card-actions>
+    </v-card>
+  </v-dialog>
+</template>
+
+<script>
+export default {
+  name: "OrganizationDialog",
+
+  props: {
+    value: {
+      type: Boolean,
+      default: false,
+    },
+    organization: {
+      type: Object,
+      default: null,
+    },
+    organizationSelectItems: {
+      type: Array,
+      default: () => [],
+    },
+  },
+
+  data() {
+    return {
+      editedOrganization: {
+        id: null,
+        organization_name: "",
+        organization_code: "",
+        organization_description: "",
+        upper_organization_id: null,
+      },
+    };
+  },
+
+  computed: {
+    visible: {
+      get() {
+        return this.value;
+      },
+      set(value) {
+        this.$emit("input", value);
+      },
+    },
+  },
+
+  watch: {
+    organization: {
+      handler(newVal) {
+        if (newVal) {
+          this.editedOrganization = {
+            ...newVal,
+            organization_description:
+              newVal.organization_description || newVal.description || "",
+          };
+        } else {
+          this.editedOrganization = {
+            id: null,
+            organization_name: "",
+            organization_code: "",
+            organization_description: "",
+            upper_organization_id: null,
+          };
+        }
+      },
+      immediate: true,
+    },
+  },
+
+  methods: {
+    save() {
+      this.$emit("save", this.editedOrganization);
+    },
+
+    close() {
+      this.$emit("input", false);
+    },
+  },
+};
+</script>
+
+<style scoped>
+.bg-transparent {
+  background-color: transparent !important;
+}
+</style>
diff --git a/src/components/admin/organization/OrganizationTree.vue b/src/components/admin/organization/OrganizationTree.vue
--- /dev/null
+++ b/src/components/admin/organization/OrganizationTree.vue
+<template>
+  <v-card flat>
+    <v-card-title class="pb-0">
+      <span class="subtitle-1 font-weight-bold">조직 목록</span>
+    </v-card-title>
+    <v-card-text class="pt-0">
+      <v-treeview
+        :items="organizationTree"
+        item-key="id"
+        open-all
+        dense
+        :active.sync="activeOrganization"
+        return-object
+        activatable
+        @update:active="handleOrganizationSelect"
+        :load-children="() => {}"
+        @input="(val) => $emit('tree-input', val)"
+      >
+        <template v-slot:prepend="{ item }">
+          <v-icon small color="#7EA394">
+            {{
+              item.children && item.children.length > 0
+                ? "mdi-folder"
+                : "mdi-folder-outline"
+            }}
+          </v-icon>
+        </template>
+        <template v-slot:label="{ item }">
+          <div
+            class="d-flex align-center justify-space-between"
+            style="width: 100%"
+          >
+            <div>
+              <span class="font-weight-bold">{{ item.organization_name }}</span>
+              <div class="text-caption grey--text text--darken-1">
+                ID: {{ item.id }} | 코드: {{ item.organization_code }} | 멤버:
+                {{ item.memberCount || 0 }}명
+              </div>
+            </div>
+            <v-menu bottom left>
+              <template v-slot:activator="{ on, attrs }">
+                <v-btn icon small v-bind="attrs" v-on="on" @click.stop>
+                  <v-icon small>mdi-dots-vertical</v-icon>
+                </v-btn>
+              </template>
+              <v-list dense>
+                <v-list-item @click.stop="$emit('edit-organization', item)">
+                  <v-list-item-title>
+                    <v-icon left small color="#7EA394">mdi-pencil</v-icon>
+                    수정
+                  </v-list-item-title>
+                </v-list-item>
+                <v-list-item @click.stop="$emit('delete-organization', item)">
+                  <v-list-item-title>
+                    <v-icon left small color="red">mdi-delete</v-icon>
+                    삭제
+                  </v-list-item-title>
+                </v-list-item>
+              </v-list>
+            </v-menu>
+          </div>
+        </template>
+      </v-treeview>
+    </v-card-text>
+  </v-card>
+</template>
+
+<script>
+export default {
+  name: "OrganizationTree",
+
+  props: {
+    organizationTree: {
+      type: Array,
+      default: () => [],
+    },
+  },
+
+  data() {
+    return {
+      activeOrganization: [],
+    };
+  },
+
+  methods: {
+    handleOrganizationSelect(active) {
+      this.$emit("organization-selected", active);
+    },
+  },
+};
+</script>
+
+<style scoped>
+/* 조직 트리뷰 아이템 간격 조정 */
+.v-treeview-node__root {
+  margin-bottom: 4px;
+}
+</style>
diff --git a/src/views/admin/members/OrganizationManagementView.vue b/src/views/admin/members/OrganizationManagementView.vue
--- a/src/views/admin/members/OrganizationManagementView.vue
+++ b/src/views/admin/members/OrganizationManagementView.vue
-            <v-card flat>
-              <v-card-title class="pb-0">
-                <span class="subtitle-1 font-weight-bold">조직 목록</span>
-              </v-card-title>
-              <v-card-text class="pt-0">
-                <v-treeview
-                  :items="organizationTree"
-                  item-key="id"
-                  open-all
-                  dense
-                  :active.sync="activeOrganization"
-                  return-object
-                  activatable
-                  @update:active="handleOrganizationSelect"
-                  :load-children="() => {}"
-                  @input="(val) => console.log('트리뷰 입력 이벤트:', val)"
-                >
-                  <template v-slot:prepend="{ item }">
-                    <v-icon small color="#7EA394">
-                      {{
-                        item.children && item.children.length > 0
-                          ? "mdi-folder"
-                          : "mdi-folder-outline"
-                      }}
-                    </v-icon>
-                  </template>
-                  <template v-slot:label="{ item }">
-                    <div
-                      class="d-flex align-center justify-space-between"
-                      style="width: 100%"
-                    >
-                      <div>
-                        <span class="font-weight-bold">{{
-                          item.organization_name
-                        }}</span>
-                        <div class="text-caption grey--text text--darken-1">
-                          ID: {{ item.id }} | 코드:
-                          {{ item.organization_code }} | 멤버:
-                          {{ item.memberCount || 0 }}명
-                        </div>
-                      </div>
-                      <v-menu bottom left>
-                        <template v-slot:activator="{ on, attrs }">
-                          <v-btn
-                            icon
-                            small
-                            v-bind="attrs"
-                            v-on="on"
-                            @click.stop
-                          >
-                            <v-icon small>mdi-dots-vertical</v-icon>
-                          </v-btn>
-                        </template>
-                        <v-list dense>
-                          <v-list-item
-                            @click.stop="openOrganizationDialog(item)"
-                          >
-                            <v-list-item-title>
-                              <v-icon left small color="#7EA394"
-                                >mdi-pencil</v-icon
-                              >
-                              수정
-                            </v-list-item-title>
-                          </v-list-item>
-                          <v-list-item
-                            @click.stop="confirmDeleteOrganization(item)"
-                          >
-                            <v-list-item-title>
-                              <v-icon left small color="red">mdi-delete</v-icon>
-                              삭제
-                            </v-list-item-title>
-                          </v-list-item>
-                        </v-list>
-                      </v-menu>
-                    </div>
-                  </template>
-                </v-treeview>
-              </v-card-text>
-            </v-card>
+            <organization-tree
+              :organization-tree="organizationTree"
+              @organization-selected="handleOrganizationSelect"
+              @edit-organization="openOrganizationDialog"
+              @delete-organization="confirmDeleteOrganization"
+              @tree-input="(val) => console.log('트리뷰 입력 이벤트:', val)"
+            />
-            <v-card flat>
-              <v-card-title class="pb-0">
-                <span class="subtitle-1 font-weight-bold">
-                  {{
-                    selectedOrganization
-                      ? selectedOrganization.organization_name
-                      : "조직을 선택하세요"
-                  }}
-                  <span v-if="selectedOrganization" class="text-caption ml-2">
-                    (총 {{ members.length }}명)
-                  </span>
-                </span>
-              </v-card-title>
-              <v-card-text class="pt-0">
-                <v-alert
-                  v-if="
-                    selectedOrganization && !selectedOrganization.isLeafNode
-                  "
-                  type="info"
-                  dense
-                  text
-                  class="ma-2"
-                >
-                  최하위 조직만 멤버를 관리할 수 있습니다. 최하위 조직을
-                  선택해주세요.
-                </v-alert>
-                <v-data-table
-                  :headers="memberHeaders"
-                  :items="members"
-                  :items-per-page="-1"
-                  :loading="loadingMembers"
-                  class="elevation-0"
-                  :footer-props="{
-                    'items-per-page-options': [10, 20, 50, 100, -1],
-                    'items-per-page-text': 'Rows per page:',
-                    'items-per-page-all-text': 'All',
-                  }"
-                  :no-data-text="
-                    selectedOrganization
-                      ? selectedOrganization.isLeafNode
-                        ? '멤버가 없습니다'
-                        : '최하위 조직만 멤버를 조회할 수 있습니다'
-                      : '조직을 선택하세요'
-                  "
-                >
-                  <template v-slot:item="{ item }">
-                    <tr>
-                      <td>
-                        <div class="d-flex align-center">
-                          <v-avatar size="32" class="mr-2 name-avatar">
-                            <span class="white--text">{{
-                              item.name.charAt(0)
-                            }}</span>
-                          </v-avatar>
-                          <div>
-                            <div class="member-name">{{ item.name }}</div>
-                            <div class="member-suffix">
-                              {{ item.nameSuffix || "구분자 없음" }}
-                            </div>
-                          </div>
-                        </div>
-                      </td>
-                      <td>{{ item.phoneNumber || "번호 없음" }}</td>
-                      <td>{{ item.email || "이메일 없음" }}</td>
-                      <td>{{ item.genderType === "M" ? "남성" : "여성" }}</td>
-                      <td>
-                        <v-chip
-                          v-if="item.roleName === '그룹장'"
-                          small
-                          :color="getRoleColor('그룹장')"
-                          text-color="black"
-                          class="mr-1"
-                        >
-                          그룹장
-                        </v-chip>
-                        <v-chip
-                          v-if="item.roleName === '부그룹장'"
-                          small
-                          :color="getRoleColor('부그룹장')"
-                          text-color="black"
-                          class="mr-1"
-                        >
-                          부그룹장
-                        </v-chip>
-                        <v-chip
-                          v-if="item.roleName === '순장'"
-                          small
-                          :color="getRoleColor('순장')"
-                          text-color="black"
-                          class="mr-1"
-                        >
-                          순장
-                        </v-chip>
-                        <v-chip
-                          v-if="item.roleName === 'EBS'"
-                          small
-                          :color="getRoleColor('EBS')"
-                          text-color="black"
-                          class="mr-1"
-                        >
-                          EBS
-                        </v-chip>
-                        <v-chip
-                          v-if="item.isNewMember === 'Y'"
-                          small
-                          color="orange"
-                          text-color="black"
-                          class="mr-1"
-                        >
-                          새가족
-                        </v-chip>
-                        <v-chip
-                          v-if="item.isLongTermAbsentee === 'Y'"
-                          small
-                          color="red"
-                          text-color="black"
-                          class="mr-1"
-                        >
-                          장기결석
-                        </v-chip>
-                        <v-chip
-                          v-if="
-                            item.roleName === '순원' || item.roleName === '회원'
-                          "
-                          small
-                          :color="getRoleColor(item.roleName)"
-                          text-color="black"
-                        >
-                          {{ item.roleName }}
-                        </v-chip>
-                      </td>
-                      <td class="text-right">
-                        <v-btn icon small @click="openMemberDialog(item)">
-                          <v-icon small color="#7EA394">mdi-pencil</v-icon>
-                        </v-btn>
-                        <v-btn icon small @click="confirmDeleteMember(item)">
-                          <v-icon small color="red">mdi-delete</v-icon>
-                        </v-btn>
-                      </td>
-                    </tr>
-                  </template>
-                </v-data-table>
-              </v-card-text>
-            </v-card>
+            <member-list
+              :selected-organization="selectedOrganization"
+              :members="members"
+              :loading="loadingMembers"
+              @edit-member="openMemberDialog"
+              @delete-member="confirmDeleteMember"
+            />
-    <v-dialog v-model="organizationDialog" max-width="500px">
-      <v-card rounded="lg">
-        <v-card-title class="wc-bold-600">
-          <span class="text-h5">{{
-            editedOrganization.id ? "조직 수정" : "조직 추가"
-          }}</span>
-        </v-card-title>
-        <v-card-text>
-          <v-container>
-            <v-row>
-              <v-col cols="12">
-                <v-text-field
-                  v-model="editedOrganization.organization_name"
-                  label="조직명"
-                  required
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-text-field>
-              </v-col>
-              <v-col cols="12">
-                <v-text-field
-                  v-model="editedOrganization.organization_code"
-                  label="조직 코드"
-                  required
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-text-field>
-              </v-col>
-              <v-col cols="12">
-                <v-select
-                  v-model="editedOrganization.upper_organization_id"
-                  :items="organizationSelectItems"
-                  item-text="text"
-                  item-value="value"
-                  label="상위 조직"
-                  hint="상위 조직이 없으면 비워두세요"
-                  persistent-hint
-                  clearable
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-select>
-              </v-col>
-              <v-col cols="12">
-                <v-textarea
-                  v-model="editedOrganization.organization_description"
-                  label="설명"
-                  rows="3"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-textarea>
-              </v-col>
-            </v-row>
-          </v-container>
-        </v-card-text>
-        <v-card-actions>
-          <v-spacer></v-spacer>
-          <v-btn color="#7EA394" text @click="closeOrganizationDialog"
-            >취소</v-btn
-          >
-          <v-btn color="#7EA394" text @click="saveOrganization">저장</v-btn>
-        </v-card-actions>
-      </v-card>
-    </v-dialog>
+    <organization-dialog
+      v-model="organizationDialog"
+      :organization="editedOrganization"
+      :organization-select-items="organizationSelectItems"
+      @save="saveOrganization"
+    />
-    <v-dialog v-model="memberDialog" max-width="600px">
-      <v-card rounded="lg">
-        <v-card-title class="wc-bold-600">
-          <span class="text-h5 font-weight-bold">{{
-            editedMember.userId ? "멤버 수정" : "새로운 인원 등록"
-          }}</span>
-          <v-row>
-            <v-col cols="12" class="pt-1 pb-0">
-              <span class="subtitle-2 grey--text text--darken-1">
-                {{
-                  editedMember.userId
-                    ? "기존 멤버의 정보를 수정합니다. 변경된 필드는 자동으로 저장됩니다."
-                    : "새로운 인원을 등록합니다. 필수 항목(*)을 모두 입력해야 저장이 가능합니다."
-                }}
-              </span>
-            </v-col>
-          </v-row>
-        </v-card-title>
-        <v-card-text>
-          <v-container>
-            <!-- 상태 토글 스위치 -->
-            <v-row class="ma-0 pa-0 pt-3 pb-5 px-5" v-if="editedMember.userId">
-              <!-- 카카오톡 단톡방 참여여부 -->
-              <v-col cols="12" md="4" class="d-flex align-center">
-                <v-icon size="22" class="mr-2" color="#262626">mdi-chat</v-icon>
-                <span class="subtitle-1 font-weight-medium"
-                  >카톡방 참여 여부</span
-                >
-                <v-spacer></v-spacer>
-                <label class="custom-switch mt-0 pt-0">
-                  <input
-                    type="checkbox"
-                    :checked="editedMember.isKakaotalkChatMember === 'Y'"
-                    @change="
-                      editedMember.isKakaotalkChatMember = $event.target.checked
-                        ? 'Y'
-                        : 'N'
-                    "
-                  />
-                  <span class="custom-slider"></span>
-                </label>
-              </v-col>
-
-              <!-- 장결자 여부 -->
-              <v-col cols="12" md="4" class="d-flex align-center">
-                <v-icon size="22" class="mr-2" color="#262626"
-                  >mdi-account-check</v-icon
-                >
-                <span class="subtitle-1 font-weight-medium">장결자 여부</span>
-                <v-spacer></v-spacer>
-                <label class="custom-switch mt-0 pt-0">
-                  <input
-                    type="checkbox"
-                    :checked="editedMember.isLongTermAbsentee === 'Y'"
-                    @change="
-                      editedMember.isLongTermAbsentee = $event.target.checked
-                        ? 'Y'
-                        : 'N'
-                    "
-                  />
-                  <span class="custom-slider"></span>
-                </label>
-              </v-col>
-
-              <!-- 새가족 여부 -->
-              <v-col cols="12" md="4" class="d-flex align-center">
-                <v-icon size="22" class="mr-2" color="#262626"
-                  >mdi-account-multiple-plus</v-icon
-                >
-                <span class="subtitle-1 font-weight-medium">새가족 여부</span>
-                <v-spacer></v-spacer>
-                <label class="custom-switch mt-0 pt-0">
-                  <input
-                    type="checkbox"
-                    :checked="editedMember.isNewMember === 'Y'"
-                    @change="
-                      editedMember.isNewMember = $event.target.checked
-                        ? 'Y'
-                        : 'N'
-                    "
-                  />
-                  <span class="custom-slider"></span>
-                </label>
-              </v-col>
-            </v-row>
-
-            <!-- 정보입력 -->
-            <v-row>
-              <v-col cols="12" class="text-center mt-5 px-15">
-                <!-- 이름 -->
-                <div class="field-title mb-1 text-left">
-                  이름 <span class="red--text">*</span>
-                </div>
-                <v-text-field
-                  v-model="editedMember.name"
-                  label="이름 (필수)"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent org-custom-input"
-                  required
-                  persistent-hint
-                  :error="validationErrors.name"
-                  :error-messages="
-                    validationErrors.name ? '이름을 입력해주세요' : ''
-                  "
-                ></v-text-field>
-
-                <!-- 동명이인 구분자 -->
-                <div class="field-title mb-1 text-left">구분자</div>
-                <v-text-field
-                  v-model="editedMember.nameSuffix"
-                  label="구분자 (선택, 기본값: FFF)"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent org-custom-input"
-                  persistent-hint
-                ></v-text-field>
-
-                <!-- 전화번호 -->
-                <div class="field-title mb-1 text-left">
-                  전화번호 <span class="red--text">*</span>
-                </div>
-                <v-text-field
-                  v-model="editedMember.phoneNumber"
-                  label="전화번호 (필수)"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent org-custom-input"
-                  required
-                  persistent-hint
-                  :error="validationErrors.phoneNumber"
-                  :error-messages="
-                    validationErrors.phoneNumber
-                      ? '전화번호를 입력해주세요'
-                      : ''
-                  "
-                ></v-text-field>
-
-                <!-- 성별(드롭다운) -->
-                <div class="field-title mb-1 text-left">
-                  성별 <span class="red--text">*</span>
-                </div>
-                <v-select
-                  v-model="editedMember.genderType"
-                  :items="[
-                    { text: '남성', value: 'M' },
-                    { text: '여성', value: 'F' },
-                  ]"
-                  item-text="text"
-                  item-value="value"
-                  label="성별"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
-                  persistent-hint
-                  :error="validationErrors.genderType"
-                  :error-messages="
-                    validationErrors.genderType ? '성별을 선택해주세요' : ''
-                  "
-                ></v-select>
-
-                <!-- 이메일 -->
-                <div class="field-title mb-1 text-left">이메일</div>
-                <v-text-field
-                  v-model="editedMember.email"
-                  label="이메일 (선택, 기본값: email@email.com)"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent org-custom-input"
-                  persistent-hint
-                ></v-text-field>
-
-                <!-- 생년월일 -->
-                <div class="field-title mb-1 text-left">생년월일</div>
-                <v-menu
-                  v-model="birthDateMenu"
-                  :close-on-content-click="false"
-                  :nudge-right="40"
-                  transition="scale-transition"
-                  offset-y
-                  min-width="290px"
-                >
-                  <template v-slot:activator="{ on, attrs }">
-                    <v-text-field
-                      v-model="editedMember.birthDate"
-                      label="생년월일"
-                      color="#7EA394"
-                      background-color="#edeef3"
-                      readonly
-                      solo
-                      rounded
-                      flat
-                      dense
-                      v-bind="attrs"
-                      v-on="on"
-                      class="mb-4 mx-auto org-custom-input"
-                      persistent-hint
-                    ></v-text-field>
-                  </template>
-                  <v-date-picker
-                    v-model="editedMember.birthDate"
-                    no-title
-                    @input="birthDateMenu = false"
-                  ></v-date-picker>
-                </v-menu>
-
-                <!-- 교회 등록일 -->
-                <div class="field-title mb-1 text-left">교회 등록일</div>
-                <v-menu
-                  v-model="registrationDateMenu"
-                  :close-on-content-click="false"
-                  :nudge-right="40"
-                  transition="scale-transition"
-                  offset-y
-                  min-width="290px"
-                >
-                  <template v-slot:activator="{ on, attrs }">
-                    <v-text-field
-                      v-model="editedMember.registrationDate"
-                      label="교회 등록일"
-                      color="#7EA394"
-                      background-color="#edeef3"
-                      readonly
-                      solo
-                      rounded
-                      flat
-                      dense
-                      v-bind="attrs"
-                      v-on="on"
-                      class="mb-4 mx-auto org-custom-input"
-                      persistent-hint
-                    ></v-text-field>
-                  </template>
-                  <v-date-picker
-                    v-model="editedMember.registrationDate"
-                    no-title
-                    @input="registrationDateMenu = false"
-                  ></v-date-picker>
-                </v-menu>
-
-                <!-- 국적 -->
-                <div class="field-title mb-1 text-left">국적</div>
-                <v-select
-                  v-model="editedMember.countryCode"
-                  :items="countryItems"
-                  item-text="text"
-                  item-value="value"
-                  label="국적"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
-                  persistent-hint
-                ></v-select>
-
-                <!-- 역할 선택 -->
-                <div class="field-title mb-1 text-left">
-                  역할 <span class="red--text">*</span>
-                </div>
-                <v-select
-                  v-model="editedMember.roleId"
-                  :items="roleItems"
-                  item-text="text"
-                  item-value="value"
-                  label="역할 (필수)"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent org-custom-input org-custom-select"
-                  required
-                  persistent-hint
-                  :error="validationErrors.roleId"
-                  :error-messages="
-                    validationErrors.roleId ? '역할을 선택해주세요' : ''
-                  "
-                ></v-select>
-
-                <!-- 주소 관련 필드 주석 처리 시작 -->
-                <!--
-                <v-textarea
-                  v-model="editedMember.address"
-                  label="주소"
-                  rows="3"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-textarea>
-
-                <v-textarea
-                  v-model="editedMember.addressDetail"
-                  label="상세주소"
-                  rows="3"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-textarea>
-
-                <v-text-field
-                  v-model="editedMember.postcode"
-                  label="우편번호"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-text-field>
-                -->
-                <!-- 주소 관련 필드 주석 처리 끝 -->
-
-                <!-- 취미 필드 주석 처리 시작 -->
-                <!--
-                <v-textarea
-                  v-model="editedMember.hobby"
-                  label="취미"
-                  rows="3"
-                  background-color="#edeef3"
-                  color="#7EA394"
-                  solo
-                  rounded
-                  flat
-                  dense
-                  hide-details="auto"
-                  class="mb-4 mx-auto bg-transparent"
-                ></v-textarea>
-                -->
-                <!-- 취미 필드 주석 처리 끝 -->
-
-                <v-col cols="12" class="pa-15 pt-4 pb-0">
-                  <v-btn
-                    class="mx-auto custom-save-btn"
-                    block
-                    color="#7EA394"
-                    text
-                    @click="saveMember"
-                    :loading="savingMember"
-                    ><span class="wc-h3">{{
-                      editedMember.userId ? "데이터 수정" : "데이터 저장"
-                    }}</span></v-btn
-                  >
-                </v-col>
-              </v-col>
-            </v-row>
-          </v-container>
-        </v-card-text>
-      </v-card>
-    </v-dialog>
+    <member-form
+      v-model="memberDialog"
+      :member="editedMember"
+      :saving-member="savingMember"
+      @save="saveMember"
+    />
-    <v-dialog v-model="deleteDialog" max-width="400px">
-      <v-card rounded="lg">
-        <v-card-title class="text-h5 wc-bold-600"
-          >정말 삭제하시겠습니까?</v-card-title
-        >
-        <v-card-text>
-          {{ deleteDialogText }}
-          <div class="red--text mt-2">이 작업은 되돌릴 수 없습니다.</div>
-        </v-card-text>
-        <v-card-actions>
-          <v-spacer></v-spacer>
-          <v-btn color="#7EA394" text @click="deleteDialog = false">취소</v-btn>
-          <v-btn color="red" text @click="deleteConfirm">삭제</v-btn>
-        </v-card-actions>
-      </v-card>
-    </v-dialog>
+    <delete-confirm-dialog
+      v-model="deleteDialog"
+      :text="deleteDialogText"
+      @confirm="deleteConfirm"
+    />
+// 분리된 컴포넌트 import
+import OrganizationTree from "@/components/admin/organization/OrganizationTree.vue";
+import MemberList from "@/components/admin/organization/MemberList.vue";
+import MemberForm from "@/components/admin/organization/MemberForm.vue";
+import OrganizationDialog from "@/components/admin/organization/OrganizationDialog.vue";
+import DeleteConfirmDialog from "@/components/admin/organization/DeleteConfirmDialog.vue";
+
+  components: {
+    OrganizationTree,
+    MemberList,
+    MemberForm,
+    OrganizationDialog,
+    DeleteConfirmDialog,
+  },
+
-        console.log("사용자 정보 확인:", this.userInfo.id);
+        // 사용자 정보 확인
-        console.warn("사용자 정보가 없습니다.");
+        // 사용자 정보가 없습니다
-              console.log("조직 데이터 로드 완료, 멤버 수 계산 시작");
-            .catch((error) => {
-              console.error("조직 데이터 로드 중 오류:", error);
+            .catch(() => {
+              // 조직 데이터 로드 중 오류
-    } catch (error) {
-      console.error("초기화 중 오류 발생:", error);
+    } catch {
+      // 초기화 중 오류 발생
-    console.log("OrganizationManagementView 마운트됨");
-
-        console.log("마운트 시 조직 데이터 없음, 다시 로드");
-            console.log("마운트 후 조직 데이터 로드 완료");
-                console.log("첫 번째 조직 자동 선택");
-          .catch((error) => {
-            console.error("마운트 후 조직 데이터 로드 중 오류:", error);
+          .catch(() => {
+            // 마운트 후 조직 데이터 로드 중 오류
-        console.log("마운트 시 조직 데이터 있음, 첫 번째 조직 선택");
-                console.log("조직 데이터 로드 완료, 멤버 수 계산 시작");
-              .catch((error) => {
-                console.error("조직 데이터 로드 중 오류:", error);
+              .catch(() => {
+                // 조직 데이터 로드 중 오류
-          console.log("캐시된 조직 데이터 사용 중...");
-        console.log("API에서 조직 데이터 가져오기 시작...");
-        console.log("API에서 가져온 조직 데이터:", response);
-          console.log("API 응답에서 data 배열 추출:", organizations.length);
-          console.log("API 응답이 직접 배열인 경우:", organizations.length);
-          console.error("API 응답 형식이 예상과 다릅니다:", response);
-          console.log("더미 데이터 사용:", organizations.length);
-        // 디버깅: 모든 조직 정보 출력
-        console.log("처리된 조직 데이터:", organizations);
-
-        // 각 조직 ID 출력
-        console.log(
-          "조직 ID 목록:",
-          organizations.map((org) => org.id)
-        );
-
-          console.log("조직 데이터가 없습니다. 더미 데이터를 사용합니다.");
-        console.log("최종 조직 데이터 설정 완료:", this.organizations.length);
-        console.log(
-          "조직 데이터 캐싱 완료, 만료 시간:",
-          new Date(this.organizationCacheExpiry)
-        );
-        // 디버깅: 생성된 트리 구조 출력
-        console.log("생성된 조직 트리:", this.organizationTree);
-        console.log("조직 트리 항목 수:", this.organizationTree.length);
-
-      } catch (error) {
-        console.error("조직 목록 조회 중 오류 발생:", error);
+      } catch {
-        console.log("오류로 인한 더미 데이터 사용:", this.organizations.length);
-        console.log("오류 후 생성된 조직 트리:", this.organizationTree);
-      console.log("멤버 수 계산 시작...");
-
-        console.log(`최하위 조직 ${leafOrgs.length}개 발견`);
-
-              console.log(
-                `조직 ID ${org.id} (${org.organization_name}): 멤버 ${org.memberCount}명`
-              );
-              console.log(
-                `조직 ID ${org.id} (${org.organization_name}): 멤버 없음`
-              );
-          } catch (error) {
-            console.error(`조직 ID ${org.id} 멤버 조회 오류:`, error);
+          } catch {
-        console.log(`조직 레벨 수: ${orgLevels.length}`);
-
-        orgLevels.forEach((levelOrgs, level) => {
-          console.log(
-            `레벨 ${level + 1} 조직 처리 중... (${levelOrgs.length}개)`
-          );
-
+        orgLevels.forEach((levelOrgs) => {
-            console.log(
-              `상위 조직 ID ${org.id} (${org.organization_name}): 멤버 ${org.memberCount}명 (하위 조직 ${childOrgs.length}개)`
-            );
-        console.log("멤버 수 계산 완료");
-      } catch (error) {
-        console.error("멤버 수 계산 중 오류 발생:", error);
+      } catch {
+        // 멤버 수 계산 중 오류 발생
-      } catch (error) {
-        console.error("조직 저장 중 오류 발생:", error);
+      } catch (_) {
-        console.error("유효하지 않은 조직 ID입니다.");
-          console.log(`조직 ID ${organizationId}에 소속된 멤버가 없습니다.`);
-          console.log(
-            `조직 ID ${organizationId}의 멤버 데이터를 가져오지 못했습니다.`
-          );
-        // 멤버 데이터 정렬 (MemberListView.vue 참고)
-        members.sort((a, b) => {
-          // 역할 우선순위에 따른 정렬
-          const roleOrder = {
-            그룹장: 1,
-            부그룹장: 2,
-            순장: 3,
-            EBS: 4,
-          };
-
-          // 역할 우선순위 확인 (지정된 역할이 없으면 높은 값 할당)
-          const roleA =
-            roleOrder[a.roleName] !== undefined ? roleOrder[a.roleName] : 10;
-          const roleB =
-            roleOrder[b.roleName] !== undefined ? roleOrder[b.roleName] : 10;
-
-          // 역할 우선순위가 다르면 그에 따라 정렬
-          if (roleA !== roleB) {
-            return roleA - roleB;
-          }
-
-          // 역할 우선순위가 같거나 지정되지 않은 역할인 경우
-          // 새가족 여부로 정렬 (새가족이 위에)
-          if (a.isNewMember === "Y" && b.isNewMember !== "Y") return -1;
-          if (a.isNewMember !== "Y" && b.isNewMember === "Y") return 1;
-
-          // 장기결석자 정렬
-          if (a.isLongTermAbsentee === "Y" && b.isLongTermAbsentee !== "Y")
-            return -1;
-          if (a.isLongTermAbsentee !== "Y" && b.isLongTermAbsentee === "Y")
-            return 1;
-
-          // 이름 알파벳 순 정렬
-          return a.name.localeCompare(b.name);
-        });
-
-        this.members = members;
+        // 멤버 데이터 정렬
+        this.members = this.sortMembers(members);
-        console.error("멤버 목록 조회 중 오류 발생:", error);
-
-          console.log(`조직 ID ${organizationId}에 소속된 멤버가 없습니다.`);
+    // 멤버 데이터 정렬 메서드
+    sortMembers(members) {
+      if (!members || !Array.isArray(members)) return [];
+
+      return [...members].sort((a, b) => {
+        // 역할 우선순위에 따른 정렬
+        const roleOrder = {
+          그룹장: 1,
+          부그룹장: 2,
+          순장: 3,
+          EBS: 4,
+        };
+
+        // 역할 우선순위 확인 (지정된 역할이 없으면 높은 값 할당)
+        const roleA =
+          roleOrder[a.roleName] !== undefined ? roleOrder[a.roleName] : 10;
+        const roleB =
+          roleOrder[b.roleName] !== undefined ? roleOrder[b.roleName] : 10;
+
+        // 역할 우선순위가 다르면 그에 따라 정렬
+        if (roleA !== roleB) {
+          return roleA - roleB;
+        }
+
+        // 역할 우선순위가 같거나 지정되지 않은 역할인 경우
+        // 새가족 여부로 정렬 (새가족이 위에)
+        if (a.isNewMember === "Y" && b.isNewMember !== "Y") return -1;
+        if (a.isNewMember !== "Y" && b.isNewMember === "Y") return 1;
+
+        // 장기결석자 정렬
+        if (a.isLongTermAbsentee === "Y" && b.isLongTermAbsentee !== "Y")
+          return -1;
+        if (a.isLongTermAbsentee !== "Y" && b.isLongTermAbsentee === "Y")
+          return 1;
+
+        // 이름 알파벳 순 정렬
+        return a.name.localeCompare(b.name);
+      });
+    },
+
-      // 이름에 기반한 랜덤 문자열 생성 (중복 방지)
-      // name 매개변수 사용 (memberNumber에 이름 첫 글자 활용)
-      console.group("🎲 [Debug] 임의 데이터 생성");
-      console.log("이름 파라미터:", name || "없음");
-
-      const randomData = {
+      return {
-      console.log("생성된 임의 데이터:", randomData);
-      console.groupEnd();
-
-      return randomData;
-      // 초기화
-        name: false,
-        phoneNumber: false,
-        genderType: false,
-        roleId: false,
+        name: !this.editedMember.name || this.editedMember.name.trim() === "",
+        phoneNumber:
+          !this.editedMember.phoneNumber ||
+          this.editedMember.phoneNumber.trim() === "",
+        genderType: !this.editedMember.genderType,
+        roleId: !this.editedMember.roleId,
-      // 필수 필드 검사
-      let isValid = true;
-
-      if (!this.editedMember.name || this.editedMember.name.trim() === "") {
-        this.validationErrors.name = true;
-        isValid = false;
-      }
-
-      if (
-        !this.editedMember.phoneNumber ||
-        this.editedMember.phoneNumber.trim() === ""
-      ) {
-        this.validationErrors.phoneNumber = true;
-        isValid = false;
-      }
-
-      if (!this.editedMember.genderType) {
-        this.validationErrors.genderType = true;
-        isValid = false;
-      }
-
-      if (!this.editedMember.roleId) {
-        this.validationErrors.roleId = true;
-        isValid = false;
-      }
-
-      return isValid;
+      return !Object.values(this.validationErrors).some((v) => v === true);
-      if (this.savingMember) {
-        console.log(
-          "🚫 [Save/Update Member] 이미 저장 중입니다. 중복 요청을 방지합니다."
-        );
-        return; // 이미 저장 중이면 중복 호출 방지
-      }
+      if (this.savingMember) return; // 중복 호출 방지
-      this.savingMember = true; // 저장 시작 표시
-      console.time("멤버 저장 작업 시간");
+      this.savingMember = true;
-        console.group("🔄 [Debug] 멤버 저장 시작");
-        console.log(
-          "🛠️ [Save/Update Member] 멤버 정보 저장/업데이트를 시작합니다."
-        );
-        console.log("현재 멤버 데이터:", this.editedMember);
-        console.log(
-          "작업 유형:",
-          this.editedMember.userId ? "멤버 수정" : "신규 멤버 추가"
-        );
-        console.groupEnd();
-
+        // 기본 검증
-          console.error("선택된 조직이 없습니다.");
-          alert("선택된 조직이 없습니다. 조직을 먼저 선택해주세요.");
+          this.showErrorMessage(
+            "선택된 조직이 없습니다. 조직을 먼저 선택해주세요."
+          );
-        // 유효성 검사 실행
+        // 유효성 검사
-          console.warn("⚠️ [Validation] 필수 정보가 누락되었습니다.");
-
-          // 스낵바와 알럿 모두 표시
-          this.$store.dispatch("snackbar/showMessage", {
-            message: `필수 항목을 입력해주세요.`,
-            color: "error",
-          });
-
-          alert("모든 필수 항목(*)을 입력해주세요.");
+          this.showErrorMessage("모든 필수 항목(*)을 입력해주세요.");
-        // 역할 ID가 없는 경우 기본값 설정 (순원: 74)
+        // 역할 ID 기본값 설정
-          console.log("역할 ID가 없어서 기본값 74(순원)으로 설정합니다.");
-          this.editedMember.roleId = 74;
+          this.editedMember.roleId = 74; // 기본값: 순원
-        // 데이터 변경 감지 (수정 모드일 경우)
+        // 데이터 변경 감지 (수정 모드)
-          console.log("🔍 [Change Detection] 변경된 데이터가 없습니다.");
-
-          // 스낵바와 알럿 모두 표시
-          this.$store.dispatch("snackbar/showMessage", {
-            message: "변경된 데이터가 없습니다.",
-            color: "info",
-          });
-
-          alert("변경된 데이터가 없습니다. 데이터를 수정하거나 취소하세요.");
+          this.showMessage("변경된 데이터가 없습니다.", "info");
-        // 임의의 데이터 생성
-        const randomData = this.generateRandomData(this.editedMember.name);
-
-        // 현재 날짜를 YYYY-MM-DD 형식으로 가져오기
-        const today = new Date().toISOString().split("T")[0];
-
-        // API 요청 데이터 형식 맞추기 (snake_case로 통일)
-        const apiUserData = {
-          id: this.editedMember.userId, // ID 필드 추가
-          name: this.editedMember.name,
-          name_suffix: this.editedMember.nameSuffix || "FFF", // 구분자가 없으면 "FFF"로 설정
-          email: this.editedMember.email || "email@email.com", // 이메일이 없으면 "email@email.com"으로 설정
-          phone_number: this.editedMember.phoneNumber,
-          password: this.editedMember.phoneNumber || "1234",
-          gender_type: this.editedMember.genderType,
-          birth_date: this.editedMember.birthDate || randomData.birthDate,
-          church_member_number:
-            this.editedMember.memberNumber || randomData.memberNumber,
-          church_registration_date: this.editedMember.registrationDate || today,
-          country: this.editedMember.countryCode || "KOR",
-          address: this.editedMember.address || randomData.address,
-          address_detail:
-            this.editedMember.addressDetail || randomData.addressDetail,
-          zip_postal_code: this.editedMember.postcode || randomData.postcode,
-          hobby: this.editedMember.hobby || randomData.hobby,
-          is_long_term_absentee: this.editedMember.isLongTermAbsentee,
-          is_new_member: this.editedMember.isNewMember,
-          is_kakaotalk_chat_member: this.editedMember.isKakaotalkChatMember,
-          is_address_public: this.editedMember.isAddressPublic,
-          is_phone_number_public: this.editedMember.isPhoneNumberPublic,
-          sns_url: this.editedMember.snsUrl,
-          city: this.editedMember.city,
-          state_province: this.editedMember.stateProvince,
-          role_id: this.editedMember.roleId, // 필수 필드로 포함
-        };
-
+        // API 데이터 준비
+        const apiUserData = this.prepareApiUserData();
+        const creatingUserId = this.userInfo?.id || null;
-        // 상세 디버깅 정보 - 원본 멤버 데이터
-        console.group("🔍 [Debug] 원본 멤버 데이터 (상세)");
-        console.log("editedMember 객체:", this.editedMember);
-        console.log("originalMember 객체:", this.originalMember);
-        console.groupEnd();
-
-        // 상세 디버깅 정보 - 변환된 API 데이터
-        console.group("🔄 [Debug] 변환된 API 데이터 (상세)");
-        console.log("apiUserData:", apiUserData);
-        console.table({
-          id: apiUserData.id,
-          name: apiUserData.name,
-          name_suffix: apiUserData.name_suffix,
-          email: apiUserData.email,
-          phone_number: apiUserData.phone_number,
-          password: apiUserData.password,
-          gender_type: apiUserData.gender_type,
-          birth_date: apiUserData.birth_date,
-          church_member_number: apiUserData.church_member_number,
-          church_registration_date: apiUserData.church_registration_date,
-          country: apiUserData.country,
-          role_id: apiUserData.role_id,
-          is_new_member: apiUserData.is_new_member,
-          is_long_term_absentee: apiUserData.is_long_term_absentee,
-          is_kakaotalk_chat_member: apiUserData.is_kakaotalk_chat_member,
-        });
-        console.groupEnd();
-
-        // 조직 정보 디버깅
-        console.group("🏢 [Debug] 조직 정보 (상세)");
-        console.log("selectedOrganization:", this.selectedOrganization);
-        console.table({
-          id: organizationId,
-          organization_code: organizationCode,
-          organization_name: this.selectedOrganization.organization_name,
-        });
-        console.groupEnd();
-
-        // 사용자 정보 디버깅
-        console.group("👤 [Debug] 작업자 정보 (상세)");
-        console.log("userInfo:", this.userInfo);
-        console.table({
-          id: this.userInfo && this.userInfo.id ? this.userInfo.id : "없음",
-          email:
-            this.userInfo && this.userInfo.email ? this.userInfo.email : "없음",
-          roles:
-            this.userInfo && this.userInfo.roles
-              ? JSON.stringify(this.userInfo.roles)
-              : "없음",
-        });
-        console.groupEnd();
-
-        // API 요청 형식 디버깅 로그
-        console.group("📡 [Debug] API 요청 데이터 (최종)");
-        const finalRequestData = {
-          userData: apiUserData,
-          organizationId,
-          organizationCode,
-          idOfCreatingUser:
-            this.userInfo && this.userInfo.id ? this.userInfo.id : null,
-        };
-        console.log("API 요청 형식:", finalRequestData);
-        console.log(
-          "API 엔드포인트:",
-          `${this.BASIC_URL}${this.CurrentMember_EP}`
-        );
-        console.log("HTTP 메서드:", "POST");
-        console.groupEnd();
-
-        let response;
-
+        // 멤버 수정 또는 추가
-          // 멤버 수정 API 호출
-          console.log(
-            "🔄 [Update Member] 멤버 수정 시작:",
-            this.editedMember.name,
-            "유저 ID:",
-            this.editedMember.userId
-          );
-
-          try {
-            // MasterCtrl의 openUpdateData 메서드 사용 (MemberUpdateView.vue 방식으로 변경)
-            response = await this.openUpdateData(
-              this.User, // "/users" URL 사용
-              this.editedMember.userId, // 수정할 회원 ID
-              apiUserData, // 수정할 데이터
-              true // 로그 표시
-            );
-
-            console.log("✅ [Update Member] 업데이트 응답:", response);
-
-            // 성공적으로 수정된 경우 UI 업데이트
-            const index = this.members.findIndex(
-              (m) => m.userId === this.editedMember.userId
-            );
-
-            if (index !== -1) {
-              // UI에 표시할 데이터 형식으로 변환 (camelCase로)
-              const updatedMember = {
-                userId: this.editedMember.userId,
-                name: apiUserData.name,
-                nameSuffix: apiUserData.name_suffix,
-                phoneNumber: apiUserData.phone_number,
-                genderType: apiUserData.gender_type,
-                email: apiUserData.email,
-                birthDate: apiUserData.birth_date,
-                isNewMember: apiUserData.is_new_member,
-                isLongTermAbsentee: apiUserData.is_long_term_absentee,
-                isKakaotalkChatMember: apiUserData.is_kakaotalk_chat_member,
-                roleId: apiUserData.role_id,
-                roleName: this.getRoleName(apiUserData.role_id), // 역할 이름 유지
-                memberNumber: apiUserData.church_member_number,
-                registrationDate: apiUserData.church_registration_date,
-                countryCode: apiUserData.country,
-                address: apiUserData.address,
-                addressDetail: apiUserData.address_detail,
-                postcode: apiUserData.zip_postal_code,
-                hobby: apiUserData.hobby,
-              };
-
-              this.members.splice(index, 1, updatedMember);
-            }
-
-            // 성공 메시지 표시
-            this.$nextTick(() => {
-              try {
-                this.$store.dispatch("snackbar/showMessage", {
-                  message: `멤버 ${this.editedMember.name}님의 정보가 수정되었습니다.`,
-                  color: "success",
-                });
-              } catch (e) {
-                console.warn("스낵바 메시지 표시 오류:", e);
-                alert(
-                  `멤버 ${this.editedMember.name}님의 정보가 수정되었습니다.`
-                );
-              }
-            });
-
-            console.log(
-              "✅ [Update Member] 멤버 수정 완료:",
-              this.editedMember.name
-            );
-
-            // 대화 상자 닫기
-            this.closeMemberDialog();
-          } catch (error) {
-            console.error("❌ [API Error] 멤버 수정 실패:", error);
-
-            // 작업 실패 메시지 표시
-            try {
-              this.$store.dispatch("snackbar/showMessage", {
-                message: `멤버 수정 중 오류가 발생했습니다: ${error.message}`,
-                color: "error",
-              });
-            } catch (e) {
-              console.warn("스낵바 메시지 표시 오류:", e);
-              alert(`멤버 수정 중 오류가 발생했습니다: ${error.message}`);
-            }
-          }
+          await this.updateExistingMember(apiUserData);
-          // 멤버 추가 API 호출
-          console.log(
-            "➕ [Create Member] 신규 멤버 추가 시작:",
-            this.editedMember.name
+          await this.createNewMember(
+            apiUserData,
+            organizationId,
+            organizationCode,
+            creatingUserId
+        }
-          try {
-            console.log("💡 [Debug] createMember 함수 호출 전");
-            console.log("- userData:", JSON.stringify(apiUserData));
-            console.log("- organizationId:", organizationId);
-            console.log("- organizationCode:", organizationCode);
-            console.log(
-              "- idOfCreatingUser:",
-              this.userInfo && this.userInfo.id ? this.userInfo.id : null
-            );
-
-            // 브라우저 개발자 도구 중단점 설정 (디버깅 용도)
-            console.log(
-              "%c API 호출 직전 - 개발자 도구에서 중단점을 설정할 수 있습니다",
-              "background: #ff0000; color: #ffffff; font-size: 16px;"
-            );
-
-            // API 호출 전 네트워크 탭 확인 메시지
-            console.log(
-              "%c 개발자 도구의 네트워크 탭에서 API 요청을 확인하세요",
-              "background: #00ff00; color: #000000; font-size: 16px;"
-            );
-
-            response = await this.createMember(
-              apiUserData,
-              organizationId,
-              organizationCode,
-              this.userInfo && this.userInfo.id ? this.userInfo.id : null,
-              true
-            );
-
-            console.log("💡 [Debug] createMember 함수 호출 후");
-            console.group("✅ [Debug] API 응답 데이터 (상세)");
-            console.log("응답 원본:", response);
-            if (response && typeof response === "object") {
-              console.table(response);
-            }
-            console.groupEnd();
-
-            if (!response) {
-              console.error("❌ [API Error] 응답이 없습니다.");
-              throw new Error("API 응답이 없습니다.");
-            }
+        // 목록 정렬 적용
+        this.members = this.sortMembers(this.members);
+      } catch (error) {
+        this.showErrorMessage(
+          `멤버 저장 중 오류가 발생했습니다: ${error.message}`
+        );
+      } finally {
+        this.savingMember = false;
+      }
+    },
-            if (response && response.error) {
-              console.error(
-                "❌ [API Error] 멤버 추가 API 오류:",
-                response.error
-              );
-              throw new Error(response.error);
-            }
+    // API 데이터 준비
+    prepareApiUserData() {
+      // 현재 날짜 (YYYY-MM-DD)
+      const today = new Date().toISOString().split("T")[0];
+      // 임의 데이터 생성
+      const randomData = this.generateRandomData(this.editedMember.name);
+
+      return {
+        id: this.editedMember.userId,
+        name: this.editedMember.name,
+        name_suffix: this.editedMember.nameSuffix || "FFF",
+        email: this.editedMember.email || "email@email.com",
+        phone_number: this.editedMember.phoneNumber,
+        password: this.editedMember.phoneNumber || "1234",
+        gender_type: this.editedMember.genderType,
+        birth_date: this.editedMember.birthDate || randomData.birthDate,
+        church_member_number:
+          this.editedMember.memberNumber || randomData.memberNumber,
+        church_registration_date: this.editedMember.registrationDate || today,
+        country: this.editedMember.countryCode || "KOR",
+        address: this.editedMember.address || randomData.address,
+        address_detail:
+          this.editedMember.addressDetail || randomData.addressDetail,
+        zip_postal_code: this.editedMember.postcode || randomData.postcode,
+        hobby: this.editedMember.hobby || randomData.hobby,
+        is_long_term_absentee: this.editedMember.isLongTermAbsentee,
+        is_new_member: this.editedMember.isNewMember,
+        is_kakaotalk_chat_member: this.editedMember.isKakaotalkChatMember,
+        is_address_public: this.editedMember.isAddressPublic,
+        is_phone_number_public: this.editedMember.isPhoneNumberPublic,
+        sns_url: this.editedMember.snsUrl,
+        city: this.editedMember.city,
+        state_province: this.editedMember.stateProvince,
+        role_id: this.editedMember.roleId,
+      };
+    },
-            // 새로 생성된 멤버의 ID 가져오기
-            const memberId = response.userId || response.id;
-
-            if (memberId) {
-              // UI에 표시할 데이터 형식으로 변환 (camelCase로)
-              const newMember = {
-                userId: memberId,
-                name: apiUserData.name,
-                nameSuffix: apiUserData.name_suffix,
-                phoneNumber: apiUserData.phone_number,
-                genderType: apiUserData.gender_type,
-                email: apiUserData.email,
-                birthDate: apiUserData.birth_date,
-                isNewMember: apiUserData.is_new_member,
-                isLongTermAbsentee: apiUserData.is_long_term_absentee,
-                isKakaotalkChatMember: apiUserData.is_kakaotalk_chat_member,
-                roleId: apiUserData.role_id,
-                roleName: this.getRoleName(apiUserData.role_id), // 역할 ID로부터 이름 가져오기
-                memberNumber: apiUserData.church_member_number,
-                registrationDate: apiUserData.church_registration_date,
-                countryCode: apiUserData.country,
-                address: apiUserData.address,
-                addressDetail: apiUserData.address_detail,
-                postcode: apiUserData.zip_postal_code,
-                hobby: apiUserData.hobby,
-              };
-
-              this.members.push(newMember);
-              console.log(
-                "✅ [Create Member] 멤버 목록에 추가된 데이터:",
-                newMember
-              );
+    // 메시지 표시 도우미 메서드들
+    showMessage(message, color = "success") {
+      try {
+        this.$store.dispatch("snackbar/showMessage", { message, color });
+      } catch (e) {
+        if (color === "error") {
+          alert(message);
+        }
+      }
+    },
-              // 성공 메시지 표시
-              this.$nextTick(() => {
-                try {
-                  this.$store.dispatch("snackbar/showMessage", {
-                    message: `멤버 ${this.editedMember.name}님이 추가되었습니다.`,
-                    color: "success",
-                  });
-                } catch (e) {
-                  console.warn("스낵바 메시지 표시 오류:", e);
-                  alert(`멤버 ${this.editedMember.name}님이 추가되었습니다.`);
-                }
-              });
+    showErrorMessage(message) {
+      this.showMessage(message, "error");
+      alert(message);
+    },
-              // 대화 상자 닫기
-              this.closeMemberDialog();
-            } else {
-              console.error(
-                "❌ [API Error] API 응답에 사용자 ID가 없습니다:",
-                response
-              );
-              throw new Error("API 응답에 사용자 ID가 없습니다.");
-            }
-          } catch (error) {
-            console.error("❌ [API Error] 멤버 추가 실패:", error);
+    // 멤버 수정 처리
+    async updateExistingMember(apiUserData) {
+      try {
+        await this.openUpdateData(
+          this.User,
+          this.editedMember.userId,
+          apiUserData,
+          true
+        );
-            // 더 자세한 오류 정보 출력
-            if (error.response) {
-              console.error(
-                "❌ [API Error Details] 상태:",
-                error.response.status
-              );
-              console.error(
-                "❌ [API Error Details] 헤더:",
-                error.response.headers
-              );
-              console.error(
-                "❌ [API Error Details] 데이터:",
-                error.response.data
-              );
+        // UI 업데이트
+        const index = this.members.findIndex(
+          (m) => m.userId === this.editedMember.userId
+        );
+        if (index !== -1) {
+          const updatedMember = this.convertToUiMember(
+            apiUserData,
+            this.editedMember.userId
+          );
+          this.members.splice(index, 1, updatedMember);
+        }
-              // 응답에 메시지가 있으면 표시
-              const errorMessage =
-                error.response.data && error.response.data.message
-                  ? error.response.data.message
-                  : error.message;
+        // 성공 메시지
+        this.showMessage(
+          `멤버 ${this.editedMember.name}님의 정보가 수정되었습니다.`
+        );
+        this.closeMemberDialog();
+      } catch (error) {
+        this.showErrorMessage(
+          `멤버 수정 중 오류가 발생했습니다: ${error.message}`
+        );
+      }
+    },
-              alert(
-                `멤버 추가 실패 (${error.response.status}): ${errorMessage}`
-              );
-            } else if (error.request) {
-              // 요청은 보냈지만 응답을 받지 못한 경우
-              console.error("❌ [API Error Details] 요청만 됨:", error.request);
-              alert(`멤버 추가 요청 후 응답 없음: ${error.message}`);
-            } else {
-              // 요청 설정 중 오류 발생
-              console.error("❌ [API Error Details] 설정 오류:", error.message);
-              alert(`멤버 추가 요청 설정 중 오류: ${error.message}`);
-            }
+    // 새 멤버 생성 처리
+    async createNewMember(
+      apiUserData,
+      organizationId,
+      organizationCode,
+      creatingUserId
+    ) {
+      try {
+        const response = await this.createMember(
+          apiUserData,
+          organizationId,
+          organizationCode,
+          creatingUserId,
+          true
+        );
-            // 작업 실패 메시지 표시
-            try {
-              this.$store.dispatch("snackbar/showMessage", {
-                message: `멤버 추가 중 오류가 발생했습니다: ${error.message}`,
-                color: "error",
-              });
-            } catch (e) {
-              console.warn("스낵바 메시지 표시 오류:", e);
-            }
-          }
+        if (!response) {
+          throw new Error("API 응답이 없습니다.");
-        // 정렬 다시 수행
-        this.members.sort((a, b) => {
-          // 역할 우선순위에 따른 정렬
-          const roleOrder = {
-            그룹장: 1,
-            부그룹장: 2,
-            순장: 3,
-            EBS: 4,
-          };
+        if (response.error) {
+          throw new Error(response.error);
+        }
-          // 역할 우선순위 확인 (지정된 역할이 없으면 높은 값 할당)
-          const roleA =
-            roleOrder[a.roleName] !== undefined ? roleOrder[a.roleName] : 10;
-          const roleB =
-            roleOrder[b.roleName] !== undefined ? roleOrder[b.roleName] : 10;
+        // 새로 생성된 멤버의 ID 가져오기
+        const memberId = response.userId || response.id;
+        if (!memberId) {
+          throw new Error("API 응답에 사용자 ID가 없습니다.");
+        }
-          // 역할 우선순위가 다르면 그에 따라 정렬
-          if (roleA !== roleB) {
-            return roleA - roleB;
-          }
+        // UI에 멤버 추가
+        const newMember = this.convertToUiMember(apiUserData, memberId);
+        this.members.push(newMember);
-          // 역할이 같으면 이름으로 정렬
-          return a.name.localeCompare(b.name);
-        });
+        // 성공 메시지
+        this.showMessage(`멤버 ${this.editedMember.name}님이 추가되었습니다.`);
+        this.closeMemberDialog();
-        console.error("❌ [Error] 멤버 저장 중 예상치 못한 오류:", error);
-        alert(`멤버 저장 중 오류가 발생했습니다: ${error.message}`);
-      } finally {
-        this.savingMember = false; // 저장 작업 완료 표시
-        console.timeEnd("멤버 저장 작업 시간");
+        // 오류 정보 표시
+        if (error.response) {
+          const errorMessage = error.response.data?.message || error.message;
+          this.showErrorMessage(
+            `멤버 추가 실패 (${error.response.status}): ${errorMessage}`
+          );
+        } else if (error.request) {
+          this.showErrorMessage(
+            `멤버 추가 요청 후 응답 없음: ${error.message}`
+          );
+        } else {
+          this.showErrorMessage(
+            `멤버 추가 요청 설정 중 오류: ${error.message}`
+          );
+        }
+    // API 데이터를 UI 표시용 데이터로 변환
+    convertToUiMember(apiData, userId) {
+      return {
+        userId,
+        name: apiData.name,
+        nameSuffix: apiData.name_suffix,
+        phoneNumber: apiData.phone_number,
+        genderType: apiData.gender_type,
+        email: apiData.email,
+        birthDate: apiData.birth_date,
+        isNewMember: apiData.is_new_member,
+        isLongTermAbsentee: apiData.is_long_term_absentee,
+        isKakaotalkChatMember: apiData.is_kakaotalk_chat_member,
+        roleId: apiData.role_id,
+        roleName: this.getRoleName(apiData.role_id),
+        memberNumber: apiData.church_member_number,
+        registrationDate: apiData.church_registration_date,
+        countryCode: apiData.country,
+        address: apiData.address,
+        addressDetail: apiData.address_detail,
+        postcode: apiData.zip_postal_code,
+        hobby: apiData.hobby,
+      };
+    },
+
-            console.log(`멤버 ${this.deleteItem.name} 삭제 완료`);
-
-      console.log(
-        "buildOrganizationTree 호출됨, 조직 데이터:",
-        organizations ? organizations.length : 0
-      );
-
-        console.warn("유효한 조직 데이터가 없습니다.");
-            console.warn("유효하지 않은 조직 데이터 무시:", org);
-          console.log(
-            `조직 매핑: ID ${org.id} - ${
-              org.organization_name || org.name || "unnamed"
-            }`
-          );
-        } catch (error) {
-          console.error(
-            `조직 데이터 매핑 중 오류 발생 (ID: ${org?.id || "unknown"}):`,
-            error
-          );
+        } catch {
+          // 조직 데이터 매핑 중 오류 발생
-      console.log("조직 매핑 완료, 총 조직 수:", organizationMap.size);
-
-            console.log(
-              `최상위 조직 추가: ${org.id} - ${
-                org.organization_name || org.name || "unnamed"
-              }`
-            );
-              console.log(
-                `하위 조직 추가: ${org.id} - ${
-                  org.organization_name || org.name || "unnamed"
-                } -> 상위: ${org.upper_organization_id}`
-              );
-              console.log(
-                `상위 조직 없음, 최상위로 처리: ${org.id} - ${
-                  org.organization_name || org.name || "unnamed"
-                }`
-              );
-        } catch (error) {
-          console.error(
-            `조직 트리 구성 중 오류 발생 (ID: ${org?.id || "unknown"}):`,
-            error
-          );
+        } catch {
+          // 조직 트리 구성 중 오류 발생
-      console.log("최종 트리 구성 완료, 최상위 조직 수:", tree.length);
-      if (tree.length > 0) {
-        console.log(
-          "최상위 조직 목록:",
-          tree.map(
-            (org) =>
-              `${org.id} - ${org.organization_name || org.name || "unnamed"}`
-          )
-        );
-      } else {
-        console.warn(
-          "최상위 조직이 없습니다. 모든 조직을 최상위로 처리합니다."
-        );
-        // 트리가 비어있으면 모든 조직을 최상위로 처리
-        for (const [id, org] of organizationMap.entries()) {
+      // 트리가 비어있으면 모든 조직을 최상위로 처리
+      if (tree.length === 0) {
+        for (const [, org] of organizationMap.entries()) {
-          console.log(
-            `강제 최상위 조직 추가: ${id} - ${
-              org.organization_name || org.name || "unnamed"
-            }`
-          );
-      console.log("첫 번째 최하위 조직 선택 시도...");
-        console.warn("조직 트리가 비어있어 선택할 수 없습니다.");
-            console.log(
-              `최하위 조직 발견: ${node.id} - ${
-                node.organization_name || node.name || "unnamed"
-              }`
-            );
-        console.log(
-          `최하위 조직 선택: ${leafNode.id} - ${
-            leafNode.organization_name || leafNode.name || "unnamed"
-          }`
-        );
-        console.log("최하위 조직이 없어 첫 번째 조직 선택");
+
+    // 1156번 라인 근처의 level 변수 오류 수정
+    getFilteredOrganizations() {
+      if (!this.organizationSearchTerm) {
+        return this.organizationTree;
+      }
+
+      const searchTerm = this.organizationSearchTerm.toLowerCase();
+      const filtered = [];
+
+      const searchInTree = (items) => {
+        items.forEach((org) => {
+          if (org.name.toLowerCase().includes(searchTerm)) {
+            filtered.push(org);
+          }
+          if (org.children && org.children.length > 0) {
+            searchInTree(org.children);
+          }
+        });
+      };
+
+      searchInTree(this.organizationTree);
+      return filtered;
+    },
-.v-data-table ::v-deep table {
-  border-collapse: collapse;
-}
+.v-data-table ::v-deep {
+  table {
+    border-collapse: collapse;
+  }
-.v-data-table ::v-deep th {
-  background-color: #f5f5f5;
-  font-weight: bold;
-  color: rgba(0, 0, 0, 0.87);
-}
+  th {
+    background-color: #f5f5f5;
+    font-weight: bold;
+    color: rgba(0, 0, 0, 0.87);
+  }
-.v-data-table ::v-deep td {
-  border-bottom: thin solid rgba(0, 0, 0, 0.12);
+  td {
+    border-bottom: thin solid rgba(0, 0, 0, 0.12);
+  }
-/* MemberRegistrationView.vue에서 가져온 스타일 */
+/* 텍스트 스타일 */
-.switch {
-  position: relative;
-  display: inline-block;
-  width: 60px;
-  height: 34px;
-}
-
-.switch input {
-  opacity: 0;
-  width: 0;
-  height: 0;
-}
-
-.slider {
-  position: absolute;
-  cursor: pointer;
-  top: 0;
-  left: 0;
-  right: 0;
-  bottom: 0;
-  background-color: #ccc;
-  -webkit-transition: 0.4s;
-  transition: 0.4s;
-}
-
-.slider:before {
-  position: absolute;
-  content: "";
-  height: 26px;
-  width: 26px;
-  left: 4px;
-  bottom: 4px;
-  background-color: white;
-  -webkit-transition: 0.4s;
-  transition: 0.4s;
-}
-
-input:checked + .slider {
-  background-color: #7ea394;
-}
-
-input:focus + .slider {
-  box-shadow: 0 0 1px #7ea394;
-}
-
-input:checked + .slider:before {
-  -webkit-transform: translateX(26px);
-  -ms-transform: translateX(26px);
-  transform: translateX(26px);
-}
-
-/* Rounded sliders */
-.slider.round {
-  border-radius: 34px;
-}
-
-.slider.round:before {
-  border-radius: 50%;
-}
-
-.fadeIn {
-  animation: fadeIn 0.5s;
-}
-
-@keyframes fadeIn {
-  from {
-    opacity: 0;
+/* 멤버 정보 표시 스타일 */
+.member {
+  &-name {
+    font-weight: 600;
-  to {
-    opacity: 1;
-  }
-}
-.bg-transparent {
-  background-color: transparent !important;
-}
-
-/* 특정 페이지에서만 헤더와 메뉴 버튼 숨기기 (조직관리 페이지) */
-.organization-management-page :deep(.v-app-bar__nav-icon) {
-  display: none !important;
-}
-
-.organization-management-page :deep(.v-toolbar__content > .v-btn.v-btn--icon) {
-  display: none !important;
-}
-
-.organization-management-page :deep(.v-toolbar__items) {
-  display: none !important;
-}
-
-/* 조직 트리뷰 아이템 간격 조정 */
-.v-treeview-node__root {
-  margin-bottom: 4px;
-}
-
-/* 이름 볼드 처리 및 구분자 스타일 */
-.member-name {
-  font-weight: 600;
-}
-
-.member-suffix {
-  opacity: 0.7;
-  font-size: 0.85em;
+  &-suffix {
+    opacity: 0.7;
+    font-size: 0.85em;
+  }
-/* 커스텀 입력 필드 스타일 */
-.org-custom-input {
+/* 커스텀 입력 필드 공통 스타일 */
+%input-common {
+
+  &:focus-within {
+    box-shadow: 7px 7px 20px #00000015, -7px -7px 20px #ffffff !important;
+    border-color: #7ea394 !important;
+  }
-.org-custom-input:focus-within {
-  box-shadow: 7px 7px 20px #00000015, -7px -7px 20px #ffffff !important;
-  border-color: #7ea394 !important;
+/* 커스텀 입력 필드 스타일 */
+.org-custom-input {
+  @extend %input-common;
+/* 커스텀 셀렉트 스타일 */
-  border-radius: a20px !important;
+  border-radius: 20px !important;
-}
-.custom-switch input {
-  opacity: 0;
-  width: 0;
-  height: 0;
+  input {
+    opacity: 0;
+    width: 0;
+    height: 0;
+  }
-}
-.custom-slider:before {
-  position: absolute;
-  content: "";
-  height: 26px;
-  width: 26px;
-  left: 4px;
-  bottom: 4px;
-  background-color: white;
-  transition: 0.4s;
-  border-radius: 50%;
-}
+  &:before {
+    position: absolute;
+    content: "";
+    height: 26px;
+    width: 26px;
+    left: 4px;
+    bottom: 4px;
+    background-color: white;
+    transition: 0.4s;
+    border-radius: 50%;
+  }
-input:checked + .custom-slider {
-  background-color: #7ea394;
+  input:checked + & {
+    background-color: #7ea394;
+  }
+
+  input:focus + & {
+    box-shadow: 0 0 1px #7ea394;
+  }
+
+  input:checked + &:before {
+    transform: translateX(26px);
+  }
-input:focus + .custom-slider {
-  box-shadow: 0 0 1px #7ea394;
+/* 애니메이션 효과 */
+.fadeIn {
+  animation: fadeIn 0.5s;
+
+  @keyframes fadeIn {
+    from {
+      opacity: 0;
+    }
+    to {
+      opacity: 1;
+    }
+  }
-input:checked + .custom-slider:before {
-  transform: translateX(26px);
+.bg-transparent {
+  background-color: transparent !important;
-/* 왼쪽 메뉴와 상단 헤더 숨기기 - 이 부분을 제거합니다 */
-/* :global(.v-navigation-drawer) {
-  display: none !important;
-} */
+/* 조직 트리뷰 아이템 간격 조정 */
+.v-treeview-node__root {
+  margin-bottom: 4px;
+}
-}
-.custom-save-btn:hover {
-  background-color: #6a8d82 !important;
-  box-shadow: 4px 4px 12px rgba(0, 0, 0, 0.15) !important;
-}
+  &:hover {
+    background-color: #6a8d82 !important;
+    box-shadow: 4px 4px 12px rgba(0, 0, 0, 0.15) !important;
+  }
-.custom-save-btn:disabled {
-  background-color: #cccccc !important;
-  color: #888888 !important;
+  &:disabled {
+    background-color: #cccccc !important;
+    color: #888888 !important;
+  }
diff --git a/src/views/admin/members/OrganizationMeetingHistoryView.vue b/src/views/admin/members/OrganizationMeetingHistoryView.vue
--- a/src/views/admin/members/OrganizationMeetingHistoryView.vue
+++ b/src/views/admin/members/OrganizationMeetingHistoryView.vue
-        console.log("조직 데이터 가져오기 시작...");
+        // console.log("조직 데이터 가져오기 시작...");
-          console.log("캐시된 조직 데이터 사용 중...");
+          // console.log("캐시된 조직 데이터 사용 중...");
-        console.log("API에서 조직 데이터 가져오기...");
+        // console.log("API에서 조직 데이터 가져오기...");
-          console.log("API 응답에서 data 배열 추출:", organizations.length);
+          // console.log("API 응답에서 data 배열 추출:", organizations.length);
-          console.log("API 응답이 직접 배열인 경우:", organizations.length);
+          // console.log("API 응답이 직접 배열인 경우:", organizations.length);
-          console.log("더미 데이터 사용:", organizations.length);
+          // console.log("더미 데이터 사용:", organizations.length);
-          console.log("조직 데이터가 없습니다. 더미 데이터를 사용합니다.");
+          // console.log("조직 데이터가 없습니다. 더미 데이터를 사용합니다.");
-        console.log("조직 트리 구성 완료:", this.organizationTree);
+        // console.log("조직 트리 구성 완료:", this.organizationTree);
-        console.log("멤버 수 계산 시작");
+        // console.log("멤버 수 계산 시작");
-        console.log(`리프 노드 찾음: ${leafOrgs.length}개`);
+        // console.log(`리프 노드 찾음: ${leafOrgs.length}개`);
-            console.log(
-              `조직 ID ${leafOrg.id} (${leafOrg.organization_name}): 멤버 ${leafOrg.memberCount}명`
-            );
+            // console.log(
+            //   `조직 ID ${leafOrg.id} (${leafOrg.organization_name}): 멤버 ${leafOrg.memberCount}명`
+            // );
-        console.log(`조직 레벨 수: ${orgLevels.length}`);
+        // console.log(`조직 레벨 수: ${orgLevels.length}`);
-            console.log(
-              `상위 조직 ID ${org.id} (${org.organization_name}): 멤버 ${org.memberCount}명 (하위 조직 ${childOrgs.length}개)`
-            );
+            // console.log(
+            //   `상위 조직 ID ${org.id} (${org.organization_name}): 멤버 ${org.memberCount}명 (하위 조직 ${childOrgs.length}개)`
+            // );
-        console.log("멤버 수 계산 완료");
+        // console.log("멤버 수 계산 완료");
-      console.log("모든 조직의 모임 데이터 가져오기 시작");
+      // console.log("모든 조직의 모임 데이터 가져오기 시작");
-      console.log("모임 카운트 업데이트 완료");
+      // console.log("모임 카운트 업데이트 완료");
-        console.log(`조직 ID ${orgId}의 모임 데이터 로딩 시작`);
+        // console.log(`조직 ID ${orgId}의 모임 데이터 로딩 시작`);
-          console.log(`${response.activities.length}개의 활동을 처리합니다.`);
+          // console.log(`${response.activities.length}개의 활동을 처리합니다.`);
-            console.log(`활동 "${activity.name}" 처리 중...`);
+            // console.log(`활동 "${activity.name}" 처리 중...`);
-              console.log(
-                `${activity.instances.length}개의 인스턴스를 발견했습니다.`
-              );
+              // console.log(
+              //   `${activity.instances.length}개의 인스턴스를 발견했습니다.`
+              // );
-          console.log(`조직 ID ${orgId}의 모임 수: ${meetings.length}`);
+          // console.log(`조직 ID ${orgId}의 모임 수: ${meetings.length}`);
-      if (!dateTimeString) return "-";
-      try {
-        return moment(dateTimeString).format("HH:mm");
-      } catch (error) {
-        return "-";
-      }
+      return this.format(dateTimeString, "time");
-        // 이미 한글 상태가 아닌 경우에만 미정으로 설정
-        else if (status !== "출석" && status !== "결석" && status !== "지각")
+        else if (!(status === "출석" || status === "결석" || status === "지각"))
-      console.log("포맷팅된 출석 데이터:", result);
+      // console.log("포맷팅된 출석 데이터:", result);
-        console.log("모임 상세 정보 가져오기:", meeting);
+        // console.log("모임 상세 정보 가져오기:", meeting);
-          console.log("모임 상세 정보 응답:", response);
+          // console.log("모임 상세 정보 응답:", response);
-          console.log("원본 출석 데이터:", attendances);
+          // console.log("원본 출석 데이터:", attendances);
-          console.log("포맷된 출석 데이터:", formattedAttendances);
+          // console.log("포맷된 출석 데이터:", formattedAttendances);
-          console.log("상세 정보를 가져오지 못해 기존 데이터 사용");
+          // console.log("상세 정보를 가져오지 못해 기존 데이터 사용");
-              console.log(
-                "샘플 출석 데이터 생성:",
-                this.selectedMeeting.attendances
-              );
+              // console.log("샘플 출석 데이터 생성:", this.selectedMeeting.attendances);
-    formatDateTime(dateTimeString) {
-      if (!dateTimeString) return "-";
+    format(value, type = "dateTime") {
+      if (!value) return "-";
-        return moment(dateTimeString).format("YYYY년 MM월 DD일");
+        switch (type) {
+          case "dateTime":
+            return moment(value).format("YYYY년 MM월 DD일");
+          case "time":
+            if (value.includes(":")) {
+              const [hours, minutes] = value.split(":");
+              const time = new Date();
+              time.setHours(parseInt(hours));
+              time.setMinutes(parseInt(minutes));
+              return time.toLocaleTimeString("ko-KR", {
+                hour: "2-digit",
+                minute: "2-digit",
+                hour12: true,
+              });
+            } else {
+              return moment(value).format("HH:mm");
+            }
+          default:
+            return value;
+        }
+    formatDateTime(dateTimeString) {
+      return this.format(dateTimeString, "dateTime");
+    },
+
-      if (!timeString) return "-";
-      try {
-        const [hours, minutes] = timeString.split(":");
-        const time = new Date();
-        time.setHours(parseInt(hours));
-        time.setMinutes(parseInt(minutes));
-        return time.toLocaleTimeString("ko-KR", {
-          hour: "2-digit",
-          minute: "2-digit",
-          hour12: true,
-        });
-      } catch (error) {
-        return "-";
-      }
+      return this.format(timeString, "time");
-        console.log("선택된 조직:", this.selectedOrganization);
+        // console.log("선택된 조직:", this.selectedOrganization);
-        console.log(
-          `조직 ID ${selectedOrg.id}(${selectedOrg.organization_name})의 모임 데이터 로드 시작`
-        );
+        // console.log(
+        //   `조직 ID ${selectedOrg.id}(${selectedOrg.organization_name})의 모임 데이터 로드 시작`
+        // );
-        console.log(
-          `총 ${allOrgIds.length}개 조직의 모임 데이터를 로드합니다:`,
-          allOrgIds
-        );
+        // console.log(
+        //   `총 ${allOrgIds.length}개 조직의 모임 데이터를 로드합니다:`,
+        //   allOrgIds
+        // );
-        console.log(`총 ${this.meetings.length}개의 모임 데이터 로드 완료`);
+        // console.log(`총 ${this.meetings.length}개의 모임 데이터 로드 완료`);
